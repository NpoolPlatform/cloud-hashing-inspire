// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/appcouponsetting"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// AppCouponSettingUpdate is the builder for updating AppCouponSetting entities.
type AppCouponSettingUpdate struct {
	config
	hooks    []Hook
	mutation *AppCouponSettingMutation
}

// Where appends a list predicates to the AppCouponSettingUpdate builder.
func (acsu *AppCouponSettingUpdate) Where(ps ...predicate.AppCouponSetting) *AppCouponSettingUpdate {
	acsu.mutation.Where(ps...)
	return acsu
}

// SetAppID sets the "app_id" field.
func (acsu *AppCouponSettingUpdate) SetAppID(u uuid.UUID) *AppCouponSettingUpdate {
	acsu.mutation.SetAppID(u)
	return acsu
}

// SetDominationLimit sets the "domination_limit" field.
func (acsu *AppCouponSettingUpdate) SetDominationLimit(u uint64) *AppCouponSettingUpdate {
	acsu.mutation.ResetDominationLimit()
	acsu.mutation.SetDominationLimit(u)
	return acsu
}

// AddDominationLimit adds u to the "domination_limit" field.
func (acsu *AppCouponSettingUpdate) AddDominationLimit(u int64) *AppCouponSettingUpdate {
	acsu.mutation.AddDominationLimit(u)
	return acsu
}

// SetTotalLimit sets the "total_limit" field.
func (acsu *AppCouponSettingUpdate) SetTotalLimit(i int32) *AppCouponSettingUpdate {
	acsu.mutation.ResetTotalLimit()
	acsu.mutation.SetTotalLimit(i)
	return acsu
}

// AddTotalLimit adds i to the "total_limit" field.
func (acsu *AppCouponSettingUpdate) AddTotalLimit(i int32) *AppCouponSettingUpdate {
	acsu.mutation.AddTotalLimit(i)
	return acsu
}

// SetCreateAt sets the "create_at" field.
func (acsu *AppCouponSettingUpdate) SetCreateAt(u uint32) *AppCouponSettingUpdate {
	acsu.mutation.ResetCreateAt()
	acsu.mutation.SetCreateAt(u)
	return acsu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (acsu *AppCouponSettingUpdate) SetNillableCreateAt(u *uint32) *AppCouponSettingUpdate {
	if u != nil {
		acsu.SetCreateAt(*u)
	}
	return acsu
}

// AddCreateAt adds u to the "create_at" field.
func (acsu *AppCouponSettingUpdate) AddCreateAt(u int32) *AppCouponSettingUpdate {
	acsu.mutation.AddCreateAt(u)
	return acsu
}

// SetUpdateAt sets the "update_at" field.
func (acsu *AppCouponSettingUpdate) SetUpdateAt(u uint32) *AppCouponSettingUpdate {
	acsu.mutation.ResetUpdateAt()
	acsu.mutation.SetUpdateAt(u)
	return acsu
}

// AddUpdateAt adds u to the "update_at" field.
func (acsu *AppCouponSettingUpdate) AddUpdateAt(u int32) *AppCouponSettingUpdate {
	acsu.mutation.AddUpdateAt(u)
	return acsu
}

// SetDeleteAt sets the "delete_at" field.
func (acsu *AppCouponSettingUpdate) SetDeleteAt(u uint32) *AppCouponSettingUpdate {
	acsu.mutation.ResetDeleteAt()
	acsu.mutation.SetDeleteAt(u)
	return acsu
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (acsu *AppCouponSettingUpdate) SetNillableDeleteAt(u *uint32) *AppCouponSettingUpdate {
	if u != nil {
		acsu.SetDeleteAt(*u)
	}
	return acsu
}

// AddDeleteAt adds u to the "delete_at" field.
func (acsu *AppCouponSettingUpdate) AddDeleteAt(u int32) *AppCouponSettingUpdate {
	acsu.mutation.AddDeleteAt(u)
	return acsu
}

// Mutation returns the AppCouponSettingMutation object of the builder.
func (acsu *AppCouponSettingUpdate) Mutation() *AppCouponSettingMutation {
	return acsu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (acsu *AppCouponSettingUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	acsu.defaults()
	if len(acsu.hooks) == 0 {
		affected, err = acsu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppCouponSettingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			acsu.mutation = mutation
			affected, err = acsu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(acsu.hooks) - 1; i >= 0; i-- {
			if acsu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = acsu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, acsu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (acsu *AppCouponSettingUpdate) SaveX(ctx context.Context) int {
	affected, err := acsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (acsu *AppCouponSettingUpdate) Exec(ctx context.Context) error {
	_, err := acsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acsu *AppCouponSettingUpdate) ExecX(ctx context.Context) {
	if err := acsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (acsu *AppCouponSettingUpdate) defaults() {
	if _, ok := acsu.mutation.UpdateAt(); !ok {
		v := appcouponsetting.UpdateDefaultUpdateAt()
		acsu.mutation.SetUpdateAt(v)
	}
}

func (acsu *AppCouponSettingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   appcouponsetting.Table,
			Columns: appcouponsetting.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: appcouponsetting.FieldID,
			},
		},
	}
	if ps := acsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := acsu.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appcouponsetting.FieldAppID,
		})
	}
	if value, ok := acsu.mutation.DominationLimit(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: appcouponsetting.FieldDominationLimit,
		})
	}
	if value, ok := acsu.mutation.AddedDominationLimit(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: appcouponsetting.FieldDominationLimit,
		})
	}
	if value, ok := acsu.mutation.TotalLimit(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: appcouponsetting.FieldTotalLimit,
		})
	}
	if value, ok := acsu.mutation.AddedTotalLimit(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: appcouponsetting.FieldTotalLimit,
		})
	}
	if value, ok := acsu.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appcouponsetting.FieldCreateAt,
		})
	}
	if value, ok := acsu.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appcouponsetting.FieldCreateAt,
		})
	}
	if value, ok := acsu.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appcouponsetting.FieldUpdateAt,
		})
	}
	if value, ok := acsu.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appcouponsetting.FieldUpdateAt,
		})
	}
	if value, ok := acsu.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appcouponsetting.FieldDeleteAt,
		})
	}
	if value, ok := acsu.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appcouponsetting.FieldDeleteAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, acsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appcouponsetting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// AppCouponSettingUpdateOne is the builder for updating a single AppCouponSetting entity.
type AppCouponSettingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AppCouponSettingMutation
}

// SetAppID sets the "app_id" field.
func (acsuo *AppCouponSettingUpdateOne) SetAppID(u uuid.UUID) *AppCouponSettingUpdateOne {
	acsuo.mutation.SetAppID(u)
	return acsuo
}

// SetDominationLimit sets the "domination_limit" field.
func (acsuo *AppCouponSettingUpdateOne) SetDominationLimit(u uint64) *AppCouponSettingUpdateOne {
	acsuo.mutation.ResetDominationLimit()
	acsuo.mutation.SetDominationLimit(u)
	return acsuo
}

// AddDominationLimit adds u to the "domination_limit" field.
func (acsuo *AppCouponSettingUpdateOne) AddDominationLimit(u int64) *AppCouponSettingUpdateOne {
	acsuo.mutation.AddDominationLimit(u)
	return acsuo
}

// SetTotalLimit sets the "total_limit" field.
func (acsuo *AppCouponSettingUpdateOne) SetTotalLimit(i int32) *AppCouponSettingUpdateOne {
	acsuo.mutation.ResetTotalLimit()
	acsuo.mutation.SetTotalLimit(i)
	return acsuo
}

// AddTotalLimit adds i to the "total_limit" field.
func (acsuo *AppCouponSettingUpdateOne) AddTotalLimit(i int32) *AppCouponSettingUpdateOne {
	acsuo.mutation.AddTotalLimit(i)
	return acsuo
}

// SetCreateAt sets the "create_at" field.
func (acsuo *AppCouponSettingUpdateOne) SetCreateAt(u uint32) *AppCouponSettingUpdateOne {
	acsuo.mutation.ResetCreateAt()
	acsuo.mutation.SetCreateAt(u)
	return acsuo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (acsuo *AppCouponSettingUpdateOne) SetNillableCreateAt(u *uint32) *AppCouponSettingUpdateOne {
	if u != nil {
		acsuo.SetCreateAt(*u)
	}
	return acsuo
}

// AddCreateAt adds u to the "create_at" field.
func (acsuo *AppCouponSettingUpdateOne) AddCreateAt(u int32) *AppCouponSettingUpdateOne {
	acsuo.mutation.AddCreateAt(u)
	return acsuo
}

// SetUpdateAt sets the "update_at" field.
func (acsuo *AppCouponSettingUpdateOne) SetUpdateAt(u uint32) *AppCouponSettingUpdateOne {
	acsuo.mutation.ResetUpdateAt()
	acsuo.mutation.SetUpdateAt(u)
	return acsuo
}

// AddUpdateAt adds u to the "update_at" field.
func (acsuo *AppCouponSettingUpdateOne) AddUpdateAt(u int32) *AppCouponSettingUpdateOne {
	acsuo.mutation.AddUpdateAt(u)
	return acsuo
}

// SetDeleteAt sets the "delete_at" field.
func (acsuo *AppCouponSettingUpdateOne) SetDeleteAt(u uint32) *AppCouponSettingUpdateOne {
	acsuo.mutation.ResetDeleteAt()
	acsuo.mutation.SetDeleteAt(u)
	return acsuo
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (acsuo *AppCouponSettingUpdateOne) SetNillableDeleteAt(u *uint32) *AppCouponSettingUpdateOne {
	if u != nil {
		acsuo.SetDeleteAt(*u)
	}
	return acsuo
}

// AddDeleteAt adds u to the "delete_at" field.
func (acsuo *AppCouponSettingUpdateOne) AddDeleteAt(u int32) *AppCouponSettingUpdateOne {
	acsuo.mutation.AddDeleteAt(u)
	return acsuo
}

// Mutation returns the AppCouponSettingMutation object of the builder.
func (acsuo *AppCouponSettingUpdateOne) Mutation() *AppCouponSettingMutation {
	return acsuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (acsuo *AppCouponSettingUpdateOne) Select(field string, fields ...string) *AppCouponSettingUpdateOne {
	acsuo.fields = append([]string{field}, fields...)
	return acsuo
}

// Save executes the query and returns the updated AppCouponSetting entity.
func (acsuo *AppCouponSettingUpdateOne) Save(ctx context.Context) (*AppCouponSetting, error) {
	var (
		err  error
		node *AppCouponSetting
	)
	acsuo.defaults()
	if len(acsuo.hooks) == 0 {
		node, err = acsuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppCouponSettingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			acsuo.mutation = mutation
			node, err = acsuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(acsuo.hooks) - 1; i >= 0; i-- {
			if acsuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = acsuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, acsuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*AppCouponSetting)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from AppCouponSettingMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (acsuo *AppCouponSettingUpdateOne) SaveX(ctx context.Context) *AppCouponSetting {
	node, err := acsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (acsuo *AppCouponSettingUpdateOne) Exec(ctx context.Context) error {
	_, err := acsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acsuo *AppCouponSettingUpdateOne) ExecX(ctx context.Context) {
	if err := acsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (acsuo *AppCouponSettingUpdateOne) defaults() {
	if _, ok := acsuo.mutation.UpdateAt(); !ok {
		v := appcouponsetting.UpdateDefaultUpdateAt()
		acsuo.mutation.SetUpdateAt(v)
	}
}

func (acsuo *AppCouponSettingUpdateOne) sqlSave(ctx context.Context) (_node *AppCouponSetting, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   appcouponsetting.Table,
			Columns: appcouponsetting.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: appcouponsetting.FieldID,
			},
		},
	}
	id, ok := acsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AppCouponSetting.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := acsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, appcouponsetting.FieldID)
		for _, f := range fields {
			if !appcouponsetting.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != appcouponsetting.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := acsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := acsuo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appcouponsetting.FieldAppID,
		})
	}
	if value, ok := acsuo.mutation.DominationLimit(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: appcouponsetting.FieldDominationLimit,
		})
	}
	if value, ok := acsuo.mutation.AddedDominationLimit(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: appcouponsetting.FieldDominationLimit,
		})
	}
	if value, ok := acsuo.mutation.TotalLimit(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: appcouponsetting.FieldTotalLimit,
		})
	}
	if value, ok := acsuo.mutation.AddedTotalLimit(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: appcouponsetting.FieldTotalLimit,
		})
	}
	if value, ok := acsuo.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appcouponsetting.FieldCreateAt,
		})
	}
	if value, ok := acsuo.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appcouponsetting.FieldCreateAt,
		})
	}
	if value, ok := acsuo.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appcouponsetting.FieldUpdateAt,
		})
	}
	if value, ok := acsuo.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appcouponsetting.FieldUpdateAt,
		})
	}
	if value, ok := acsuo.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appcouponsetting.FieldDeleteAt,
		})
	}
	if value, ok := acsuo.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appcouponsetting.FieldDeleteAt,
		})
	}
	_node = &AppCouponSetting{config: acsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, acsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appcouponsetting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
