// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/appuserinvitationsetting"
	"github.com/google/uuid"
)

// AppUserInvitationSettingCreate is the builder for creating a AppUserInvitationSetting entity.
type AppUserInvitationSettingCreate struct {
	config
	mutation *AppUserInvitationSettingMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetAppID sets the "app_id" field.
func (auisc *AppUserInvitationSettingCreate) SetAppID(u uuid.UUID) *AppUserInvitationSettingCreate {
	auisc.mutation.SetAppID(u)
	return auisc
}

// SetUserID sets the "user_id" field.
func (auisc *AppUserInvitationSettingCreate) SetUserID(u uuid.UUID) *AppUserInvitationSettingCreate {
	auisc.mutation.SetUserID(u)
	return auisc
}

// SetCount sets the "count" field.
func (auisc *AppUserInvitationSettingCreate) SetCount(u uint32) *AppUserInvitationSettingCreate {
	auisc.mutation.SetCount(u)
	return auisc
}

// SetDiscount sets the "discount" field.
func (auisc *AppUserInvitationSettingCreate) SetDiscount(u uint32) *AppUserInvitationSettingCreate {
	auisc.mutation.SetDiscount(u)
	return auisc
}

// SetCreateAt sets the "create_at" field.
func (auisc *AppUserInvitationSettingCreate) SetCreateAt(u uint32) *AppUserInvitationSettingCreate {
	auisc.mutation.SetCreateAt(u)
	return auisc
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (auisc *AppUserInvitationSettingCreate) SetNillableCreateAt(u *uint32) *AppUserInvitationSettingCreate {
	if u != nil {
		auisc.SetCreateAt(*u)
	}
	return auisc
}

// SetUpdateAt sets the "update_at" field.
func (auisc *AppUserInvitationSettingCreate) SetUpdateAt(u uint32) *AppUserInvitationSettingCreate {
	auisc.mutation.SetUpdateAt(u)
	return auisc
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (auisc *AppUserInvitationSettingCreate) SetNillableUpdateAt(u *uint32) *AppUserInvitationSettingCreate {
	if u != nil {
		auisc.SetUpdateAt(*u)
	}
	return auisc
}

// SetDeleteAt sets the "delete_at" field.
func (auisc *AppUserInvitationSettingCreate) SetDeleteAt(u uint32) *AppUserInvitationSettingCreate {
	auisc.mutation.SetDeleteAt(u)
	return auisc
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (auisc *AppUserInvitationSettingCreate) SetNillableDeleteAt(u *uint32) *AppUserInvitationSettingCreate {
	if u != nil {
		auisc.SetDeleteAt(*u)
	}
	return auisc
}

// SetTitle sets the "title" field.
func (auisc *AppUserInvitationSettingCreate) SetTitle(s string) *AppUserInvitationSettingCreate {
	auisc.mutation.SetTitle(s)
	return auisc
}

// SetBadgeLarge sets the "badge_large" field.
func (auisc *AppUserInvitationSettingCreate) SetBadgeLarge(s string) *AppUserInvitationSettingCreate {
	auisc.mutation.SetBadgeLarge(s)
	return auisc
}

// SetBadgeSmall sets the "badge_small" field.
func (auisc *AppUserInvitationSettingCreate) SetBadgeSmall(s string) *AppUserInvitationSettingCreate {
	auisc.mutation.SetBadgeSmall(s)
	return auisc
}

// SetID sets the "id" field.
func (auisc *AppUserInvitationSettingCreate) SetID(u uuid.UUID) *AppUserInvitationSettingCreate {
	auisc.mutation.SetID(u)
	return auisc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (auisc *AppUserInvitationSettingCreate) SetNillableID(u *uuid.UUID) *AppUserInvitationSettingCreate {
	if u != nil {
		auisc.SetID(*u)
	}
	return auisc
}

// Mutation returns the AppUserInvitationSettingMutation object of the builder.
func (auisc *AppUserInvitationSettingCreate) Mutation() *AppUserInvitationSettingMutation {
	return auisc.mutation
}

// Save creates the AppUserInvitationSetting in the database.
func (auisc *AppUserInvitationSettingCreate) Save(ctx context.Context) (*AppUserInvitationSetting, error) {
	var (
		err  error
		node *AppUserInvitationSetting
	)
	auisc.defaults()
	if len(auisc.hooks) == 0 {
		if err = auisc.check(); err != nil {
			return nil, err
		}
		node, err = auisc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppUserInvitationSettingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = auisc.check(); err != nil {
				return nil, err
			}
			auisc.mutation = mutation
			if node, err = auisc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(auisc.hooks) - 1; i >= 0; i-- {
			if auisc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = auisc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, auisc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (auisc *AppUserInvitationSettingCreate) SaveX(ctx context.Context) *AppUserInvitationSetting {
	v, err := auisc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (auisc *AppUserInvitationSettingCreate) Exec(ctx context.Context) error {
	_, err := auisc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auisc *AppUserInvitationSettingCreate) ExecX(ctx context.Context) {
	if err := auisc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auisc *AppUserInvitationSettingCreate) defaults() {
	if _, ok := auisc.mutation.CreateAt(); !ok {
		v := appuserinvitationsetting.DefaultCreateAt()
		auisc.mutation.SetCreateAt(v)
	}
	if _, ok := auisc.mutation.UpdateAt(); !ok {
		v := appuserinvitationsetting.DefaultUpdateAt()
		auisc.mutation.SetUpdateAt(v)
	}
	if _, ok := auisc.mutation.DeleteAt(); !ok {
		v := appuserinvitationsetting.DefaultDeleteAt()
		auisc.mutation.SetDeleteAt(v)
	}
	if _, ok := auisc.mutation.ID(); !ok {
		v := appuserinvitationsetting.DefaultID()
		auisc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auisc *AppUserInvitationSettingCreate) check() error {
	if _, ok := auisc.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`ent: missing required field "AppUserInvitationSetting.app_id"`)}
	}
	if _, ok := auisc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "AppUserInvitationSetting.user_id"`)}
	}
	if _, ok := auisc.mutation.Count(); !ok {
		return &ValidationError{Name: "count", err: errors.New(`ent: missing required field "AppUserInvitationSetting.count"`)}
	}
	if _, ok := auisc.mutation.Discount(); !ok {
		return &ValidationError{Name: "discount", err: errors.New(`ent: missing required field "AppUserInvitationSetting.discount"`)}
	}
	if _, ok := auisc.mutation.CreateAt(); !ok {
		return &ValidationError{Name: "create_at", err: errors.New(`ent: missing required field "AppUserInvitationSetting.create_at"`)}
	}
	if _, ok := auisc.mutation.UpdateAt(); !ok {
		return &ValidationError{Name: "update_at", err: errors.New(`ent: missing required field "AppUserInvitationSetting.update_at"`)}
	}
	if _, ok := auisc.mutation.DeleteAt(); !ok {
		return &ValidationError{Name: "delete_at", err: errors.New(`ent: missing required field "AppUserInvitationSetting.delete_at"`)}
	}
	if _, ok := auisc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "AppUserInvitationSetting.title"`)}
	}
	if _, ok := auisc.mutation.BadgeLarge(); !ok {
		return &ValidationError{Name: "badge_large", err: errors.New(`ent: missing required field "AppUserInvitationSetting.badge_large"`)}
	}
	if _, ok := auisc.mutation.BadgeSmall(); !ok {
		return &ValidationError{Name: "badge_small", err: errors.New(`ent: missing required field "AppUserInvitationSetting.badge_small"`)}
	}
	return nil
}

func (auisc *AppUserInvitationSettingCreate) sqlSave(ctx context.Context) (*AppUserInvitationSetting, error) {
	_node, _spec := auisc.createSpec()
	if err := sqlgraph.CreateNode(ctx, auisc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (auisc *AppUserInvitationSettingCreate) createSpec() (*AppUserInvitationSetting, *sqlgraph.CreateSpec) {
	var (
		_node = &AppUserInvitationSetting{config: auisc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: appuserinvitationsetting.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: appuserinvitationsetting.FieldID,
			},
		}
	)
	_spec.OnConflict = auisc.conflict
	if id, ok := auisc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := auisc.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appuserinvitationsetting.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := auisc.mutation.UserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appuserinvitationsetting.FieldUserID,
		})
		_node.UserID = value
	}
	if value, ok := auisc.mutation.Count(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appuserinvitationsetting.FieldCount,
		})
		_node.Count = value
	}
	if value, ok := auisc.mutation.Discount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appuserinvitationsetting.FieldDiscount,
		})
		_node.Discount = value
	}
	if value, ok := auisc.mutation.CreateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appuserinvitationsetting.FieldCreateAt,
		})
		_node.CreateAt = value
	}
	if value, ok := auisc.mutation.UpdateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appuserinvitationsetting.FieldUpdateAt,
		})
		_node.UpdateAt = value
	}
	if value, ok := auisc.mutation.DeleteAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appuserinvitationsetting.FieldDeleteAt,
		})
		_node.DeleteAt = value
	}
	if value, ok := auisc.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appuserinvitationsetting.FieldTitle,
		})
		_node.Title = value
	}
	if value, ok := auisc.mutation.BadgeLarge(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appuserinvitationsetting.FieldBadgeLarge,
		})
		_node.BadgeLarge = value
	}
	if value, ok := auisc.mutation.BadgeSmall(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appuserinvitationsetting.FieldBadgeSmall,
		})
		_node.BadgeSmall = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppUserInvitationSetting.Create().
//		SetAppID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppUserInvitationSettingUpsert) {
//			SetAppID(v+v).
//		}).
//		Exec(ctx)
//
func (auisc *AppUserInvitationSettingCreate) OnConflict(opts ...sql.ConflictOption) *AppUserInvitationSettingUpsertOne {
	auisc.conflict = opts
	return &AppUserInvitationSettingUpsertOne{
		create: auisc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppUserInvitationSetting.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (auisc *AppUserInvitationSettingCreate) OnConflictColumns(columns ...string) *AppUserInvitationSettingUpsertOne {
	auisc.conflict = append(auisc.conflict, sql.ConflictColumns(columns...))
	return &AppUserInvitationSettingUpsertOne{
		create: auisc,
	}
}

type (
	// AppUserInvitationSettingUpsertOne is the builder for "upsert"-ing
	//  one AppUserInvitationSetting node.
	AppUserInvitationSettingUpsertOne struct {
		create *AppUserInvitationSettingCreate
	}

	// AppUserInvitationSettingUpsert is the "OnConflict" setter.
	AppUserInvitationSettingUpsert struct {
		*sql.UpdateSet
	}
)

// SetAppID sets the "app_id" field.
func (u *AppUserInvitationSettingUpsert) SetAppID(v uuid.UUID) *AppUserInvitationSettingUpsert {
	u.Set(appuserinvitationsetting.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppUserInvitationSettingUpsert) UpdateAppID() *AppUserInvitationSettingUpsert {
	u.SetExcluded(appuserinvitationsetting.FieldAppID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *AppUserInvitationSettingUpsert) SetUserID(v uuid.UUID) *AppUserInvitationSettingUpsert {
	u.Set(appuserinvitationsetting.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *AppUserInvitationSettingUpsert) UpdateUserID() *AppUserInvitationSettingUpsert {
	u.SetExcluded(appuserinvitationsetting.FieldUserID)
	return u
}

// SetCount sets the "count" field.
func (u *AppUserInvitationSettingUpsert) SetCount(v uint32) *AppUserInvitationSettingUpsert {
	u.Set(appuserinvitationsetting.FieldCount, v)
	return u
}

// UpdateCount sets the "count" field to the value that was provided on create.
func (u *AppUserInvitationSettingUpsert) UpdateCount() *AppUserInvitationSettingUpsert {
	u.SetExcluded(appuserinvitationsetting.FieldCount)
	return u
}

// AddCount adds v to the "count" field.
func (u *AppUserInvitationSettingUpsert) AddCount(v uint32) *AppUserInvitationSettingUpsert {
	u.Add(appuserinvitationsetting.FieldCount, v)
	return u
}

// SetDiscount sets the "discount" field.
func (u *AppUserInvitationSettingUpsert) SetDiscount(v uint32) *AppUserInvitationSettingUpsert {
	u.Set(appuserinvitationsetting.FieldDiscount, v)
	return u
}

// UpdateDiscount sets the "discount" field to the value that was provided on create.
func (u *AppUserInvitationSettingUpsert) UpdateDiscount() *AppUserInvitationSettingUpsert {
	u.SetExcluded(appuserinvitationsetting.FieldDiscount)
	return u
}

// AddDiscount adds v to the "discount" field.
func (u *AppUserInvitationSettingUpsert) AddDiscount(v uint32) *AppUserInvitationSettingUpsert {
	u.Add(appuserinvitationsetting.FieldDiscount, v)
	return u
}

// SetCreateAt sets the "create_at" field.
func (u *AppUserInvitationSettingUpsert) SetCreateAt(v uint32) *AppUserInvitationSettingUpsert {
	u.Set(appuserinvitationsetting.FieldCreateAt, v)
	return u
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *AppUserInvitationSettingUpsert) UpdateCreateAt() *AppUserInvitationSettingUpsert {
	u.SetExcluded(appuserinvitationsetting.FieldCreateAt)
	return u
}

// AddCreateAt adds v to the "create_at" field.
func (u *AppUserInvitationSettingUpsert) AddCreateAt(v uint32) *AppUserInvitationSettingUpsert {
	u.Add(appuserinvitationsetting.FieldCreateAt, v)
	return u
}

// SetUpdateAt sets the "update_at" field.
func (u *AppUserInvitationSettingUpsert) SetUpdateAt(v uint32) *AppUserInvitationSettingUpsert {
	u.Set(appuserinvitationsetting.FieldUpdateAt, v)
	return u
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *AppUserInvitationSettingUpsert) UpdateUpdateAt() *AppUserInvitationSettingUpsert {
	u.SetExcluded(appuserinvitationsetting.FieldUpdateAt)
	return u
}

// AddUpdateAt adds v to the "update_at" field.
func (u *AppUserInvitationSettingUpsert) AddUpdateAt(v uint32) *AppUserInvitationSettingUpsert {
	u.Add(appuserinvitationsetting.FieldUpdateAt, v)
	return u
}

// SetDeleteAt sets the "delete_at" field.
func (u *AppUserInvitationSettingUpsert) SetDeleteAt(v uint32) *AppUserInvitationSettingUpsert {
	u.Set(appuserinvitationsetting.FieldDeleteAt, v)
	return u
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *AppUserInvitationSettingUpsert) UpdateDeleteAt() *AppUserInvitationSettingUpsert {
	u.SetExcluded(appuserinvitationsetting.FieldDeleteAt)
	return u
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *AppUserInvitationSettingUpsert) AddDeleteAt(v uint32) *AppUserInvitationSettingUpsert {
	u.Add(appuserinvitationsetting.FieldDeleteAt, v)
	return u
}

// SetTitle sets the "title" field.
func (u *AppUserInvitationSettingUpsert) SetTitle(v string) *AppUserInvitationSettingUpsert {
	u.Set(appuserinvitationsetting.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *AppUserInvitationSettingUpsert) UpdateTitle() *AppUserInvitationSettingUpsert {
	u.SetExcluded(appuserinvitationsetting.FieldTitle)
	return u
}

// SetBadgeLarge sets the "badge_large" field.
func (u *AppUserInvitationSettingUpsert) SetBadgeLarge(v string) *AppUserInvitationSettingUpsert {
	u.Set(appuserinvitationsetting.FieldBadgeLarge, v)
	return u
}

// UpdateBadgeLarge sets the "badge_large" field to the value that was provided on create.
func (u *AppUserInvitationSettingUpsert) UpdateBadgeLarge() *AppUserInvitationSettingUpsert {
	u.SetExcluded(appuserinvitationsetting.FieldBadgeLarge)
	return u
}

// SetBadgeSmall sets the "badge_small" field.
func (u *AppUserInvitationSettingUpsert) SetBadgeSmall(v string) *AppUserInvitationSettingUpsert {
	u.Set(appuserinvitationsetting.FieldBadgeSmall, v)
	return u
}

// UpdateBadgeSmall sets the "badge_small" field to the value that was provided on create.
func (u *AppUserInvitationSettingUpsert) UpdateBadgeSmall() *AppUserInvitationSettingUpsert {
	u.SetExcluded(appuserinvitationsetting.FieldBadgeSmall)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.AppUserInvitationSetting.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(appuserinvitationsetting.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *AppUserInvitationSettingUpsertOne) UpdateNewValues() *AppUserInvitationSettingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(appuserinvitationsetting.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.AppUserInvitationSetting.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *AppUserInvitationSettingUpsertOne) Ignore() *AppUserInvitationSettingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppUserInvitationSettingUpsertOne) DoNothing() *AppUserInvitationSettingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppUserInvitationSettingCreate.OnConflict
// documentation for more info.
func (u *AppUserInvitationSettingUpsertOne) Update(set func(*AppUserInvitationSettingUpsert)) *AppUserInvitationSettingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppUserInvitationSettingUpsert{UpdateSet: update})
	}))
	return u
}

// SetAppID sets the "app_id" field.
func (u *AppUserInvitationSettingUpsertOne) SetAppID(v uuid.UUID) *AppUserInvitationSettingUpsertOne {
	return u.Update(func(s *AppUserInvitationSettingUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppUserInvitationSettingUpsertOne) UpdateAppID() *AppUserInvitationSettingUpsertOne {
	return u.Update(func(s *AppUserInvitationSettingUpsert) {
		s.UpdateAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *AppUserInvitationSettingUpsertOne) SetUserID(v uuid.UUID) *AppUserInvitationSettingUpsertOne {
	return u.Update(func(s *AppUserInvitationSettingUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *AppUserInvitationSettingUpsertOne) UpdateUserID() *AppUserInvitationSettingUpsertOne {
	return u.Update(func(s *AppUserInvitationSettingUpsert) {
		s.UpdateUserID()
	})
}

// SetCount sets the "count" field.
func (u *AppUserInvitationSettingUpsertOne) SetCount(v uint32) *AppUserInvitationSettingUpsertOne {
	return u.Update(func(s *AppUserInvitationSettingUpsert) {
		s.SetCount(v)
	})
}

// AddCount adds v to the "count" field.
func (u *AppUserInvitationSettingUpsertOne) AddCount(v uint32) *AppUserInvitationSettingUpsertOne {
	return u.Update(func(s *AppUserInvitationSettingUpsert) {
		s.AddCount(v)
	})
}

// UpdateCount sets the "count" field to the value that was provided on create.
func (u *AppUserInvitationSettingUpsertOne) UpdateCount() *AppUserInvitationSettingUpsertOne {
	return u.Update(func(s *AppUserInvitationSettingUpsert) {
		s.UpdateCount()
	})
}

// SetDiscount sets the "discount" field.
func (u *AppUserInvitationSettingUpsertOne) SetDiscount(v uint32) *AppUserInvitationSettingUpsertOne {
	return u.Update(func(s *AppUserInvitationSettingUpsert) {
		s.SetDiscount(v)
	})
}

// AddDiscount adds v to the "discount" field.
func (u *AppUserInvitationSettingUpsertOne) AddDiscount(v uint32) *AppUserInvitationSettingUpsertOne {
	return u.Update(func(s *AppUserInvitationSettingUpsert) {
		s.AddDiscount(v)
	})
}

// UpdateDiscount sets the "discount" field to the value that was provided on create.
func (u *AppUserInvitationSettingUpsertOne) UpdateDiscount() *AppUserInvitationSettingUpsertOne {
	return u.Update(func(s *AppUserInvitationSettingUpsert) {
		s.UpdateDiscount()
	})
}

// SetCreateAt sets the "create_at" field.
func (u *AppUserInvitationSettingUpsertOne) SetCreateAt(v uint32) *AppUserInvitationSettingUpsertOne {
	return u.Update(func(s *AppUserInvitationSettingUpsert) {
		s.SetCreateAt(v)
	})
}

// AddCreateAt adds v to the "create_at" field.
func (u *AppUserInvitationSettingUpsertOne) AddCreateAt(v uint32) *AppUserInvitationSettingUpsertOne {
	return u.Update(func(s *AppUserInvitationSettingUpsert) {
		s.AddCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *AppUserInvitationSettingUpsertOne) UpdateCreateAt() *AppUserInvitationSettingUpsertOne {
	return u.Update(func(s *AppUserInvitationSettingUpsert) {
		s.UpdateCreateAt()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *AppUserInvitationSettingUpsertOne) SetUpdateAt(v uint32) *AppUserInvitationSettingUpsertOne {
	return u.Update(func(s *AppUserInvitationSettingUpsert) {
		s.SetUpdateAt(v)
	})
}

// AddUpdateAt adds v to the "update_at" field.
func (u *AppUserInvitationSettingUpsertOne) AddUpdateAt(v uint32) *AppUserInvitationSettingUpsertOne {
	return u.Update(func(s *AppUserInvitationSettingUpsert) {
		s.AddUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *AppUserInvitationSettingUpsertOne) UpdateUpdateAt() *AppUserInvitationSettingUpsertOne {
	return u.Update(func(s *AppUserInvitationSettingUpsert) {
		s.UpdateUpdateAt()
	})
}

// SetDeleteAt sets the "delete_at" field.
func (u *AppUserInvitationSettingUpsertOne) SetDeleteAt(v uint32) *AppUserInvitationSettingUpsertOne {
	return u.Update(func(s *AppUserInvitationSettingUpsert) {
		s.SetDeleteAt(v)
	})
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *AppUserInvitationSettingUpsertOne) AddDeleteAt(v uint32) *AppUserInvitationSettingUpsertOne {
	return u.Update(func(s *AppUserInvitationSettingUpsert) {
		s.AddDeleteAt(v)
	})
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *AppUserInvitationSettingUpsertOne) UpdateDeleteAt() *AppUserInvitationSettingUpsertOne {
	return u.Update(func(s *AppUserInvitationSettingUpsert) {
		s.UpdateDeleteAt()
	})
}

// SetTitle sets the "title" field.
func (u *AppUserInvitationSettingUpsertOne) SetTitle(v string) *AppUserInvitationSettingUpsertOne {
	return u.Update(func(s *AppUserInvitationSettingUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *AppUserInvitationSettingUpsertOne) UpdateTitle() *AppUserInvitationSettingUpsertOne {
	return u.Update(func(s *AppUserInvitationSettingUpsert) {
		s.UpdateTitle()
	})
}

// SetBadgeLarge sets the "badge_large" field.
func (u *AppUserInvitationSettingUpsertOne) SetBadgeLarge(v string) *AppUserInvitationSettingUpsertOne {
	return u.Update(func(s *AppUserInvitationSettingUpsert) {
		s.SetBadgeLarge(v)
	})
}

// UpdateBadgeLarge sets the "badge_large" field to the value that was provided on create.
func (u *AppUserInvitationSettingUpsertOne) UpdateBadgeLarge() *AppUserInvitationSettingUpsertOne {
	return u.Update(func(s *AppUserInvitationSettingUpsert) {
		s.UpdateBadgeLarge()
	})
}

// SetBadgeSmall sets the "badge_small" field.
func (u *AppUserInvitationSettingUpsertOne) SetBadgeSmall(v string) *AppUserInvitationSettingUpsertOne {
	return u.Update(func(s *AppUserInvitationSettingUpsert) {
		s.SetBadgeSmall(v)
	})
}

// UpdateBadgeSmall sets the "badge_small" field to the value that was provided on create.
func (u *AppUserInvitationSettingUpsertOne) UpdateBadgeSmall() *AppUserInvitationSettingUpsertOne {
	return u.Update(func(s *AppUserInvitationSettingUpsert) {
		s.UpdateBadgeSmall()
	})
}

// Exec executes the query.
func (u *AppUserInvitationSettingUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AppUserInvitationSettingCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppUserInvitationSettingUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AppUserInvitationSettingUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: AppUserInvitationSettingUpsertOne.ID is not supported by MySQL driver. Use AppUserInvitationSettingUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AppUserInvitationSettingUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AppUserInvitationSettingCreateBulk is the builder for creating many AppUserInvitationSetting entities in bulk.
type AppUserInvitationSettingCreateBulk struct {
	config
	builders []*AppUserInvitationSettingCreate
	conflict []sql.ConflictOption
}

// Save creates the AppUserInvitationSetting entities in the database.
func (auiscb *AppUserInvitationSettingCreateBulk) Save(ctx context.Context) ([]*AppUserInvitationSetting, error) {
	specs := make([]*sqlgraph.CreateSpec, len(auiscb.builders))
	nodes := make([]*AppUserInvitationSetting, len(auiscb.builders))
	mutators := make([]Mutator, len(auiscb.builders))
	for i := range auiscb.builders {
		func(i int, root context.Context) {
			builder := auiscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AppUserInvitationSettingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, auiscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = auiscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, auiscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, auiscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (auiscb *AppUserInvitationSettingCreateBulk) SaveX(ctx context.Context) []*AppUserInvitationSetting {
	v, err := auiscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (auiscb *AppUserInvitationSettingCreateBulk) Exec(ctx context.Context) error {
	_, err := auiscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auiscb *AppUserInvitationSettingCreateBulk) ExecX(ctx context.Context) {
	if err := auiscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppUserInvitationSetting.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppUserInvitationSettingUpsert) {
//			SetAppID(v+v).
//		}).
//		Exec(ctx)
//
func (auiscb *AppUserInvitationSettingCreateBulk) OnConflict(opts ...sql.ConflictOption) *AppUserInvitationSettingUpsertBulk {
	auiscb.conflict = opts
	return &AppUserInvitationSettingUpsertBulk{
		create: auiscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppUserInvitationSetting.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (auiscb *AppUserInvitationSettingCreateBulk) OnConflictColumns(columns ...string) *AppUserInvitationSettingUpsertBulk {
	auiscb.conflict = append(auiscb.conflict, sql.ConflictColumns(columns...))
	return &AppUserInvitationSettingUpsertBulk{
		create: auiscb,
	}
}

// AppUserInvitationSettingUpsertBulk is the builder for "upsert"-ing
// a bulk of AppUserInvitationSetting nodes.
type AppUserInvitationSettingUpsertBulk struct {
	create *AppUserInvitationSettingCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AppUserInvitationSetting.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(appuserinvitationsetting.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *AppUserInvitationSettingUpsertBulk) UpdateNewValues() *AppUserInvitationSettingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(appuserinvitationsetting.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppUserInvitationSetting.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *AppUserInvitationSettingUpsertBulk) Ignore() *AppUserInvitationSettingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppUserInvitationSettingUpsertBulk) DoNothing() *AppUserInvitationSettingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppUserInvitationSettingCreateBulk.OnConflict
// documentation for more info.
func (u *AppUserInvitationSettingUpsertBulk) Update(set func(*AppUserInvitationSettingUpsert)) *AppUserInvitationSettingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppUserInvitationSettingUpsert{UpdateSet: update})
	}))
	return u
}

// SetAppID sets the "app_id" field.
func (u *AppUserInvitationSettingUpsertBulk) SetAppID(v uuid.UUID) *AppUserInvitationSettingUpsertBulk {
	return u.Update(func(s *AppUserInvitationSettingUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppUserInvitationSettingUpsertBulk) UpdateAppID() *AppUserInvitationSettingUpsertBulk {
	return u.Update(func(s *AppUserInvitationSettingUpsert) {
		s.UpdateAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *AppUserInvitationSettingUpsertBulk) SetUserID(v uuid.UUID) *AppUserInvitationSettingUpsertBulk {
	return u.Update(func(s *AppUserInvitationSettingUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *AppUserInvitationSettingUpsertBulk) UpdateUserID() *AppUserInvitationSettingUpsertBulk {
	return u.Update(func(s *AppUserInvitationSettingUpsert) {
		s.UpdateUserID()
	})
}

// SetCount sets the "count" field.
func (u *AppUserInvitationSettingUpsertBulk) SetCount(v uint32) *AppUserInvitationSettingUpsertBulk {
	return u.Update(func(s *AppUserInvitationSettingUpsert) {
		s.SetCount(v)
	})
}

// AddCount adds v to the "count" field.
func (u *AppUserInvitationSettingUpsertBulk) AddCount(v uint32) *AppUserInvitationSettingUpsertBulk {
	return u.Update(func(s *AppUserInvitationSettingUpsert) {
		s.AddCount(v)
	})
}

// UpdateCount sets the "count" field to the value that was provided on create.
func (u *AppUserInvitationSettingUpsertBulk) UpdateCount() *AppUserInvitationSettingUpsertBulk {
	return u.Update(func(s *AppUserInvitationSettingUpsert) {
		s.UpdateCount()
	})
}

// SetDiscount sets the "discount" field.
func (u *AppUserInvitationSettingUpsertBulk) SetDiscount(v uint32) *AppUserInvitationSettingUpsertBulk {
	return u.Update(func(s *AppUserInvitationSettingUpsert) {
		s.SetDiscount(v)
	})
}

// AddDiscount adds v to the "discount" field.
func (u *AppUserInvitationSettingUpsertBulk) AddDiscount(v uint32) *AppUserInvitationSettingUpsertBulk {
	return u.Update(func(s *AppUserInvitationSettingUpsert) {
		s.AddDiscount(v)
	})
}

// UpdateDiscount sets the "discount" field to the value that was provided on create.
func (u *AppUserInvitationSettingUpsertBulk) UpdateDiscount() *AppUserInvitationSettingUpsertBulk {
	return u.Update(func(s *AppUserInvitationSettingUpsert) {
		s.UpdateDiscount()
	})
}

// SetCreateAt sets the "create_at" field.
func (u *AppUserInvitationSettingUpsertBulk) SetCreateAt(v uint32) *AppUserInvitationSettingUpsertBulk {
	return u.Update(func(s *AppUserInvitationSettingUpsert) {
		s.SetCreateAt(v)
	})
}

// AddCreateAt adds v to the "create_at" field.
func (u *AppUserInvitationSettingUpsertBulk) AddCreateAt(v uint32) *AppUserInvitationSettingUpsertBulk {
	return u.Update(func(s *AppUserInvitationSettingUpsert) {
		s.AddCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *AppUserInvitationSettingUpsertBulk) UpdateCreateAt() *AppUserInvitationSettingUpsertBulk {
	return u.Update(func(s *AppUserInvitationSettingUpsert) {
		s.UpdateCreateAt()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *AppUserInvitationSettingUpsertBulk) SetUpdateAt(v uint32) *AppUserInvitationSettingUpsertBulk {
	return u.Update(func(s *AppUserInvitationSettingUpsert) {
		s.SetUpdateAt(v)
	})
}

// AddUpdateAt adds v to the "update_at" field.
func (u *AppUserInvitationSettingUpsertBulk) AddUpdateAt(v uint32) *AppUserInvitationSettingUpsertBulk {
	return u.Update(func(s *AppUserInvitationSettingUpsert) {
		s.AddUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *AppUserInvitationSettingUpsertBulk) UpdateUpdateAt() *AppUserInvitationSettingUpsertBulk {
	return u.Update(func(s *AppUserInvitationSettingUpsert) {
		s.UpdateUpdateAt()
	})
}

// SetDeleteAt sets the "delete_at" field.
func (u *AppUserInvitationSettingUpsertBulk) SetDeleteAt(v uint32) *AppUserInvitationSettingUpsertBulk {
	return u.Update(func(s *AppUserInvitationSettingUpsert) {
		s.SetDeleteAt(v)
	})
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *AppUserInvitationSettingUpsertBulk) AddDeleteAt(v uint32) *AppUserInvitationSettingUpsertBulk {
	return u.Update(func(s *AppUserInvitationSettingUpsert) {
		s.AddDeleteAt(v)
	})
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *AppUserInvitationSettingUpsertBulk) UpdateDeleteAt() *AppUserInvitationSettingUpsertBulk {
	return u.Update(func(s *AppUserInvitationSettingUpsert) {
		s.UpdateDeleteAt()
	})
}

// SetTitle sets the "title" field.
func (u *AppUserInvitationSettingUpsertBulk) SetTitle(v string) *AppUserInvitationSettingUpsertBulk {
	return u.Update(func(s *AppUserInvitationSettingUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *AppUserInvitationSettingUpsertBulk) UpdateTitle() *AppUserInvitationSettingUpsertBulk {
	return u.Update(func(s *AppUserInvitationSettingUpsert) {
		s.UpdateTitle()
	})
}

// SetBadgeLarge sets the "badge_large" field.
func (u *AppUserInvitationSettingUpsertBulk) SetBadgeLarge(v string) *AppUserInvitationSettingUpsertBulk {
	return u.Update(func(s *AppUserInvitationSettingUpsert) {
		s.SetBadgeLarge(v)
	})
}

// UpdateBadgeLarge sets the "badge_large" field to the value that was provided on create.
func (u *AppUserInvitationSettingUpsertBulk) UpdateBadgeLarge() *AppUserInvitationSettingUpsertBulk {
	return u.Update(func(s *AppUserInvitationSettingUpsert) {
		s.UpdateBadgeLarge()
	})
}

// SetBadgeSmall sets the "badge_small" field.
func (u *AppUserInvitationSettingUpsertBulk) SetBadgeSmall(v string) *AppUserInvitationSettingUpsertBulk {
	return u.Update(func(s *AppUserInvitationSettingUpsert) {
		s.SetBadgeSmall(v)
	})
}

// UpdateBadgeSmall sets the "badge_small" field to the value that was provided on create.
func (u *AppUserInvitationSettingUpsertBulk) UpdateBadgeSmall() *AppUserInvitationSettingUpsertBulk {
	return u.Update(func(s *AppUserInvitationSettingUpsert) {
		s.UpdateBadgeSmall()
	})
}

// Exec executes the query.
func (u *AppUserInvitationSettingUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AppUserInvitationSettingCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AppUserInvitationSettingCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppUserInvitationSettingUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
