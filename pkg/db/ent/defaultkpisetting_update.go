// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/defaultkpisetting"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// DefaultKpiSettingUpdate is the builder for updating DefaultKpiSetting entities.
type DefaultKpiSettingUpdate struct {
	config
	hooks    []Hook
	mutation *DefaultKpiSettingMutation
}

// Where appends a list predicates to the DefaultKpiSettingUpdate builder.
func (dksu *DefaultKpiSettingUpdate) Where(ps ...predicate.DefaultKpiSetting) *DefaultKpiSettingUpdate {
	dksu.mutation.Where(ps...)
	return dksu
}

// SetAmount sets the "amount" field.
func (dksu *DefaultKpiSettingUpdate) SetAmount(u uint64) *DefaultKpiSettingUpdate {
	dksu.mutation.ResetAmount()
	dksu.mutation.SetAmount(u)
	return dksu
}

// AddAmount adds u to the "amount" field.
func (dksu *DefaultKpiSettingUpdate) AddAmount(u int64) *DefaultKpiSettingUpdate {
	dksu.mutation.AddAmount(u)
	return dksu
}

// SetPercent sets the "percent" field.
func (dksu *DefaultKpiSettingUpdate) SetPercent(i int32) *DefaultKpiSettingUpdate {
	dksu.mutation.ResetPercent()
	dksu.mutation.SetPercent(i)
	return dksu
}

// AddPercent adds i to the "percent" field.
func (dksu *DefaultKpiSettingUpdate) AddPercent(i int32) *DefaultKpiSettingUpdate {
	dksu.mutation.AddPercent(i)
	return dksu
}

// SetAppID sets the "app_id" field.
func (dksu *DefaultKpiSettingUpdate) SetAppID(u uuid.UUID) *DefaultKpiSettingUpdate {
	dksu.mutation.SetAppID(u)
	return dksu
}

// SetGoodID sets the "good_id" field.
func (dksu *DefaultKpiSettingUpdate) SetGoodID(u uuid.UUID) *DefaultKpiSettingUpdate {
	dksu.mutation.SetGoodID(u)
	return dksu
}

// SetCreateAt sets the "create_at" field.
func (dksu *DefaultKpiSettingUpdate) SetCreateAt(u uint32) *DefaultKpiSettingUpdate {
	dksu.mutation.ResetCreateAt()
	dksu.mutation.SetCreateAt(u)
	return dksu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (dksu *DefaultKpiSettingUpdate) SetNillableCreateAt(u *uint32) *DefaultKpiSettingUpdate {
	if u != nil {
		dksu.SetCreateAt(*u)
	}
	return dksu
}

// AddCreateAt adds u to the "create_at" field.
func (dksu *DefaultKpiSettingUpdate) AddCreateAt(u int32) *DefaultKpiSettingUpdate {
	dksu.mutation.AddCreateAt(u)
	return dksu
}

// SetUpdateAt sets the "update_at" field.
func (dksu *DefaultKpiSettingUpdate) SetUpdateAt(u uint32) *DefaultKpiSettingUpdate {
	dksu.mutation.ResetUpdateAt()
	dksu.mutation.SetUpdateAt(u)
	return dksu
}

// AddUpdateAt adds u to the "update_at" field.
func (dksu *DefaultKpiSettingUpdate) AddUpdateAt(u int32) *DefaultKpiSettingUpdate {
	dksu.mutation.AddUpdateAt(u)
	return dksu
}

// SetDeleteAt sets the "delete_at" field.
func (dksu *DefaultKpiSettingUpdate) SetDeleteAt(u uint32) *DefaultKpiSettingUpdate {
	dksu.mutation.ResetDeleteAt()
	dksu.mutation.SetDeleteAt(u)
	return dksu
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (dksu *DefaultKpiSettingUpdate) SetNillableDeleteAt(u *uint32) *DefaultKpiSettingUpdate {
	if u != nil {
		dksu.SetDeleteAt(*u)
	}
	return dksu
}

// AddDeleteAt adds u to the "delete_at" field.
func (dksu *DefaultKpiSettingUpdate) AddDeleteAt(u int32) *DefaultKpiSettingUpdate {
	dksu.mutation.AddDeleteAt(u)
	return dksu
}

// Mutation returns the DefaultKpiSettingMutation object of the builder.
func (dksu *DefaultKpiSettingUpdate) Mutation() *DefaultKpiSettingMutation {
	return dksu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dksu *DefaultKpiSettingUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	dksu.defaults()
	if len(dksu.hooks) == 0 {
		affected, err = dksu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DefaultKpiSettingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			dksu.mutation = mutation
			affected, err = dksu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(dksu.hooks) - 1; i >= 0; i-- {
			if dksu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dksu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dksu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (dksu *DefaultKpiSettingUpdate) SaveX(ctx context.Context) int {
	affected, err := dksu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dksu *DefaultKpiSettingUpdate) Exec(ctx context.Context) error {
	_, err := dksu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dksu *DefaultKpiSettingUpdate) ExecX(ctx context.Context) {
	if err := dksu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dksu *DefaultKpiSettingUpdate) defaults() {
	if _, ok := dksu.mutation.UpdateAt(); !ok {
		v := defaultkpisetting.UpdateDefaultUpdateAt()
		dksu.mutation.SetUpdateAt(v)
	}
}

func (dksu *DefaultKpiSettingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   defaultkpisetting.Table,
			Columns: defaultkpisetting.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: defaultkpisetting.FieldID,
			},
		},
	}
	if ps := dksu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dksu.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: defaultkpisetting.FieldAmount,
		})
	}
	if value, ok := dksu.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: defaultkpisetting.FieldAmount,
		})
	}
	if value, ok := dksu.mutation.Percent(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: defaultkpisetting.FieldPercent,
		})
	}
	if value, ok := dksu.mutation.AddedPercent(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: defaultkpisetting.FieldPercent,
		})
	}
	if value, ok := dksu.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: defaultkpisetting.FieldAppID,
		})
	}
	if value, ok := dksu.mutation.GoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: defaultkpisetting.FieldGoodID,
		})
	}
	if value, ok := dksu.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: defaultkpisetting.FieldCreateAt,
		})
	}
	if value, ok := dksu.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: defaultkpisetting.FieldCreateAt,
		})
	}
	if value, ok := dksu.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: defaultkpisetting.FieldUpdateAt,
		})
	}
	if value, ok := dksu.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: defaultkpisetting.FieldUpdateAt,
		})
	}
	if value, ok := dksu.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: defaultkpisetting.FieldDeleteAt,
		})
	}
	if value, ok := dksu.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: defaultkpisetting.FieldDeleteAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dksu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{defaultkpisetting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// DefaultKpiSettingUpdateOne is the builder for updating a single DefaultKpiSetting entity.
type DefaultKpiSettingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DefaultKpiSettingMutation
}

// SetAmount sets the "amount" field.
func (dksuo *DefaultKpiSettingUpdateOne) SetAmount(u uint64) *DefaultKpiSettingUpdateOne {
	dksuo.mutation.ResetAmount()
	dksuo.mutation.SetAmount(u)
	return dksuo
}

// AddAmount adds u to the "amount" field.
func (dksuo *DefaultKpiSettingUpdateOne) AddAmount(u int64) *DefaultKpiSettingUpdateOne {
	dksuo.mutation.AddAmount(u)
	return dksuo
}

// SetPercent sets the "percent" field.
func (dksuo *DefaultKpiSettingUpdateOne) SetPercent(i int32) *DefaultKpiSettingUpdateOne {
	dksuo.mutation.ResetPercent()
	dksuo.mutation.SetPercent(i)
	return dksuo
}

// AddPercent adds i to the "percent" field.
func (dksuo *DefaultKpiSettingUpdateOne) AddPercent(i int32) *DefaultKpiSettingUpdateOne {
	dksuo.mutation.AddPercent(i)
	return dksuo
}

// SetAppID sets the "app_id" field.
func (dksuo *DefaultKpiSettingUpdateOne) SetAppID(u uuid.UUID) *DefaultKpiSettingUpdateOne {
	dksuo.mutation.SetAppID(u)
	return dksuo
}

// SetGoodID sets the "good_id" field.
func (dksuo *DefaultKpiSettingUpdateOne) SetGoodID(u uuid.UUID) *DefaultKpiSettingUpdateOne {
	dksuo.mutation.SetGoodID(u)
	return dksuo
}

// SetCreateAt sets the "create_at" field.
func (dksuo *DefaultKpiSettingUpdateOne) SetCreateAt(u uint32) *DefaultKpiSettingUpdateOne {
	dksuo.mutation.ResetCreateAt()
	dksuo.mutation.SetCreateAt(u)
	return dksuo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (dksuo *DefaultKpiSettingUpdateOne) SetNillableCreateAt(u *uint32) *DefaultKpiSettingUpdateOne {
	if u != nil {
		dksuo.SetCreateAt(*u)
	}
	return dksuo
}

// AddCreateAt adds u to the "create_at" field.
func (dksuo *DefaultKpiSettingUpdateOne) AddCreateAt(u int32) *DefaultKpiSettingUpdateOne {
	dksuo.mutation.AddCreateAt(u)
	return dksuo
}

// SetUpdateAt sets the "update_at" field.
func (dksuo *DefaultKpiSettingUpdateOne) SetUpdateAt(u uint32) *DefaultKpiSettingUpdateOne {
	dksuo.mutation.ResetUpdateAt()
	dksuo.mutation.SetUpdateAt(u)
	return dksuo
}

// AddUpdateAt adds u to the "update_at" field.
func (dksuo *DefaultKpiSettingUpdateOne) AddUpdateAt(u int32) *DefaultKpiSettingUpdateOne {
	dksuo.mutation.AddUpdateAt(u)
	return dksuo
}

// SetDeleteAt sets the "delete_at" field.
func (dksuo *DefaultKpiSettingUpdateOne) SetDeleteAt(u uint32) *DefaultKpiSettingUpdateOne {
	dksuo.mutation.ResetDeleteAt()
	dksuo.mutation.SetDeleteAt(u)
	return dksuo
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (dksuo *DefaultKpiSettingUpdateOne) SetNillableDeleteAt(u *uint32) *DefaultKpiSettingUpdateOne {
	if u != nil {
		dksuo.SetDeleteAt(*u)
	}
	return dksuo
}

// AddDeleteAt adds u to the "delete_at" field.
func (dksuo *DefaultKpiSettingUpdateOne) AddDeleteAt(u int32) *DefaultKpiSettingUpdateOne {
	dksuo.mutation.AddDeleteAt(u)
	return dksuo
}

// Mutation returns the DefaultKpiSettingMutation object of the builder.
func (dksuo *DefaultKpiSettingUpdateOne) Mutation() *DefaultKpiSettingMutation {
	return dksuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dksuo *DefaultKpiSettingUpdateOne) Select(field string, fields ...string) *DefaultKpiSettingUpdateOne {
	dksuo.fields = append([]string{field}, fields...)
	return dksuo
}

// Save executes the query and returns the updated DefaultKpiSetting entity.
func (dksuo *DefaultKpiSettingUpdateOne) Save(ctx context.Context) (*DefaultKpiSetting, error) {
	var (
		err  error
		node *DefaultKpiSetting
	)
	dksuo.defaults()
	if len(dksuo.hooks) == 0 {
		node, err = dksuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DefaultKpiSettingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			dksuo.mutation = mutation
			node, err = dksuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(dksuo.hooks) - 1; i >= 0; i-- {
			if dksuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dksuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, dksuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*DefaultKpiSetting)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from DefaultKpiSettingMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (dksuo *DefaultKpiSettingUpdateOne) SaveX(ctx context.Context) *DefaultKpiSetting {
	node, err := dksuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dksuo *DefaultKpiSettingUpdateOne) Exec(ctx context.Context) error {
	_, err := dksuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dksuo *DefaultKpiSettingUpdateOne) ExecX(ctx context.Context) {
	if err := dksuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dksuo *DefaultKpiSettingUpdateOne) defaults() {
	if _, ok := dksuo.mutation.UpdateAt(); !ok {
		v := defaultkpisetting.UpdateDefaultUpdateAt()
		dksuo.mutation.SetUpdateAt(v)
	}
}

func (dksuo *DefaultKpiSettingUpdateOne) sqlSave(ctx context.Context) (_node *DefaultKpiSetting, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   defaultkpisetting.Table,
			Columns: defaultkpisetting.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: defaultkpisetting.FieldID,
			},
		},
	}
	id, ok := dksuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DefaultKpiSetting.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dksuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, defaultkpisetting.FieldID)
		for _, f := range fields {
			if !defaultkpisetting.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != defaultkpisetting.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dksuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dksuo.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: defaultkpisetting.FieldAmount,
		})
	}
	if value, ok := dksuo.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: defaultkpisetting.FieldAmount,
		})
	}
	if value, ok := dksuo.mutation.Percent(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: defaultkpisetting.FieldPercent,
		})
	}
	if value, ok := dksuo.mutation.AddedPercent(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: defaultkpisetting.FieldPercent,
		})
	}
	if value, ok := dksuo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: defaultkpisetting.FieldAppID,
		})
	}
	if value, ok := dksuo.mutation.GoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: defaultkpisetting.FieldGoodID,
		})
	}
	if value, ok := dksuo.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: defaultkpisetting.FieldCreateAt,
		})
	}
	if value, ok := dksuo.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: defaultkpisetting.FieldCreateAt,
		})
	}
	if value, ok := dksuo.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: defaultkpisetting.FieldUpdateAt,
		})
	}
	if value, ok := dksuo.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: defaultkpisetting.FieldUpdateAt,
		})
	}
	if value, ok := dksuo.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: defaultkpisetting.FieldDeleteAt,
		})
	}
	if value, ok := dksuo.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: defaultkpisetting.FieldDeleteAt,
		})
	}
	_node = &DefaultKpiSetting{config: dksuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dksuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{defaultkpisetting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
