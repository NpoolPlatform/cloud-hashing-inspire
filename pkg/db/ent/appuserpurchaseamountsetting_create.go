// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/appuserpurchaseamountsetting"
	"github.com/google/uuid"
)

// AppUserPurchaseAmountSettingCreate is the builder for creating a AppUserPurchaseAmountSetting entity.
type AppUserPurchaseAmountSettingCreate struct {
	config
	mutation *AppUserPurchaseAmountSettingMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetAppID sets the "app_id" field.
func (aupasc *AppUserPurchaseAmountSettingCreate) SetAppID(u uuid.UUID) *AppUserPurchaseAmountSettingCreate {
	aupasc.mutation.SetAppID(u)
	return aupasc
}

// SetUserID sets the "user_id" field.
func (aupasc *AppUserPurchaseAmountSettingCreate) SetUserID(u uuid.UUID) *AppUserPurchaseAmountSettingCreate {
	aupasc.mutation.SetUserID(u)
	return aupasc
}

// SetTitle sets the "title" field.
func (aupasc *AppUserPurchaseAmountSettingCreate) SetTitle(s string) *AppUserPurchaseAmountSettingCreate {
	aupasc.mutation.SetTitle(s)
	return aupasc
}

// SetBadgeLarge sets the "badge_large" field.
func (aupasc *AppUserPurchaseAmountSettingCreate) SetBadgeLarge(s string) *AppUserPurchaseAmountSettingCreate {
	aupasc.mutation.SetBadgeLarge(s)
	return aupasc
}

// SetBadgeSmall sets the "badge_small" field.
func (aupasc *AppUserPurchaseAmountSettingCreate) SetBadgeSmall(s string) *AppUserPurchaseAmountSettingCreate {
	aupasc.mutation.SetBadgeSmall(s)
	return aupasc
}

// SetAmount sets the "amount" field.
func (aupasc *AppUserPurchaseAmountSettingCreate) SetAmount(u uint64) *AppUserPurchaseAmountSettingCreate {
	aupasc.mutation.SetAmount(u)
	return aupasc
}

// SetPercent sets the "percent" field.
func (aupasc *AppUserPurchaseAmountSettingCreate) SetPercent(u uint32) *AppUserPurchaseAmountSettingCreate {
	aupasc.mutation.SetPercent(u)
	return aupasc
}

// SetCreateAt sets the "create_at" field.
func (aupasc *AppUserPurchaseAmountSettingCreate) SetCreateAt(u uint32) *AppUserPurchaseAmountSettingCreate {
	aupasc.mutation.SetCreateAt(u)
	return aupasc
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (aupasc *AppUserPurchaseAmountSettingCreate) SetNillableCreateAt(u *uint32) *AppUserPurchaseAmountSettingCreate {
	if u != nil {
		aupasc.SetCreateAt(*u)
	}
	return aupasc
}

// SetUpdateAt sets the "update_at" field.
func (aupasc *AppUserPurchaseAmountSettingCreate) SetUpdateAt(u uint32) *AppUserPurchaseAmountSettingCreate {
	aupasc.mutation.SetUpdateAt(u)
	return aupasc
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (aupasc *AppUserPurchaseAmountSettingCreate) SetNillableUpdateAt(u *uint32) *AppUserPurchaseAmountSettingCreate {
	if u != nil {
		aupasc.SetUpdateAt(*u)
	}
	return aupasc
}

// SetDeleteAt sets the "delete_at" field.
func (aupasc *AppUserPurchaseAmountSettingCreate) SetDeleteAt(u uint32) *AppUserPurchaseAmountSettingCreate {
	aupasc.mutation.SetDeleteAt(u)
	return aupasc
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (aupasc *AppUserPurchaseAmountSettingCreate) SetNillableDeleteAt(u *uint32) *AppUserPurchaseAmountSettingCreate {
	if u != nil {
		aupasc.SetDeleteAt(*u)
	}
	return aupasc
}

// SetID sets the "id" field.
func (aupasc *AppUserPurchaseAmountSettingCreate) SetID(u uuid.UUID) *AppUserPurchaseAmountSettingCreate {
	aupasc.mutation.SetID(u)
	return aupasc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (aupasc *AppUserPurchaseAmountSettingCreate) SetNillableID(u *uuid.UUID) *AppUserPurchaseAmountSettingCreate {
	if u != nil {
		aupasc.SetID(*u)
	}
	return aupasc
}

// Mutation returns the AppUserPurchaseAmountSettingMutation object of the builder.
func (aupasc *AppUserPurchaseAmountSettingCreate) Mutation() *AppUserPurchaseAmountSettingMutation {
	return aupasc.mutation
}

// Save creates the AppUserPurchaseAmountSetting in the database.
func (aupasc *AppUserPurchaseAmountSettingCreate) Save(ctx context.Context) (*AppUserPurchaseAmountSetting, error) {
	var (
		err  error
		node *AppUserPurchaseAmountSetting
	)
	aupasc.defaults()
	if len(aupasc.hooks) == 0 {
		if err = aupasc.check(); err != nil {
			return nil, err
		}
		node, err = aupasc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppUserPurchaseAmountSettingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = aupasc.check(); err != nil {
				return nil, err
			}
			aupasc.mutation = mutation
			if node, err = aupasc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(aupasc.hooks) - 1; i >= 0; i-- {
			if aupasc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = aupasc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aupasc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (aupasc *AppUserPurchaseAmountSettingCreate) SaveX(ctx context.Context) *AppUserPurchaseAmountSetting {
	v, err := aupasc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aupasc *AppUserPurchaseAmountSettingCreate) Exec(ctx context.Context) error {
	_, err := aupasc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aupasc *AppUserPurchaseAmountSettingCreate) ExecX(ctx context.Context) {
	if err := aupasc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aupasc *AppUserPurchaseAmountSettingCreate) defaults() {
	if _, ok := aupasc.mutation.CreateAt(); !ok {
		v := appuserpurchaseamountsetting.DefaultCreateAt()
		aupasc.mutation.SetCreateAt(v)
	}
	if _, ok := aupasc.mutation.UpdateAt(); !ok {
		v := appuserpurchaseamountsetting.DefaultUpdateAt()
		aupasc.mutation.SetUpdateAt(v)
	}
	if _, ok := aupasc.mutation.DeleteAt(); !ok {
		v := appuserpurchaseamountsetting.DefaultDeleteAt()
		aupasc.mutation.SetDeleteAt(v)
	}
	if _, ok := aupasc.mutation.ID(); !ok {
		v := appuserpurchaseamountsetting.DefaultID()
		aupasc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aupasc *AppUserPurchaseAmountSettingCreate) check() error {
	if _, ok := aupasc.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`ent: missing required field "AppUserPurchaseAmountSetting.app_id"`)}
	}
	if _, ok := aupasc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "AppUserPurchaseAmountSetting.user_id"`)}
	}
	if _, ok := aupasc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "AppUserPurchaseAmountSetting.title"`)}
	}
	if _, ok := aupasc.mutation.BadgeLarge(); !ok {
		return &ValidationError{Name: "badge_large", err: errors.New(`ent: missing required field "AppUserPurchaseAmountSetting.badge_large"`)}
	}
	if _, ok := aupasc.mutation.BadgeSmall(); !ok {
		return &ValidationError{Name: "badge_small", err: errors.New(`ent: missing required field "AppUserPurchaseAmountSetting.badge_small"`)}
	}
	if _, ok := aupasc.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`ent: missing required field "AppUserPurchaseAmountSetting.amount"`)}
	}
	if _, ok := aupasc.mutation.Percent(); !ok {
		return &ValidationError{Name: "percent", err: errors.New(`ent: missing required field "AppUserPurchaseAmountSetting.percent"`)}
	}
	if _, ok := aupasc.mutation.CreateAt(); !ok {
		return &ValidationError{Name: "create_at", err: errors.New(`ent: missing required field "AppUserPurchaseAmountSetting.create_at"`)}
	}
	if _, ok := aupasc.mutation.UpdateAt(); !ok {
		return &ValidationError{Name: "update_at", err: errors.New(`ent: missing required field "AppUserPurchaseAmountSetting.update_at"`)}
	}
	if _, ok := aupasc.mutation.DeleteAt(); !ok {
		return &ValidationError{Name: "delete_at", err: errors.New(`ent: missing required field "AppUserPurchaseAmountSetting.delete_at"`)}
	}
	return nil
}

func (aupasc *AppUserPurchaseAmountSettingCreate) sqlSave(ctx context.Context) (*AppUserPurchaseAmountSetting, error) {
	_node, _spec := aupasc.createSpec()
	if err := sqlgraph.CreateNode(ctx, aupasc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (aupasc *AppUserPurchaseAmountSettingCreate) createSpec() (*AppUserPurchaseAmountSetting, *sqlgraph.CreateSpec) {
	var (
		_node = &AppUserPurchaseAmountSetting{config: aupasc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: appuserpurchaseamountsetting.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: appuserpurchaseamountsetting.FieldID,
			},
		}
	)
	_spec.OnConflict = aupasc.conflict
	if id, ok := aupasc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := aupasc.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appuserpurchaseamountsetting.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := aupasc.mutation.UserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appuserpurchaseamountsetting.FieldUserID,
		})
		_node.UserID = value
	}
	if value, ok := aupasc.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appuserpurchaseamountsetting.FieldTitle,
		})
		_node.Title = value
	}
	if value, ok := aupasc.mutation.BadgeLarge(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appuserpurchaseamountsetting.FieldBadgeLarge,
		})
		_node.BadgeLarge = value
	}
	if value, ok := aupasc.mutation.BadgeSmall(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appuserpurchaseamountsetting.FieldBadgeSmall,
		})
		_node.BadgeSmall = value
	}
	if value, ok := aupasc.mutation.Amount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: appuserpurchaseamountsetting.FieldAmount,
		})
		_node.Amount = value
	}
	if value, ok := aupasc.mutation.Percent(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appuserpurchaseamountsetting.FieldPercent,
		})
		_node.Percent = value
	}
	if value, ok := aupasc.mutation.CreateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appuserpurchaseamountsetting.FieldCreateAt,
		})
		_node.CreateAt = value
	}
	if value, ok := aupasc.mutation.UpdateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appuserpurchaseamountsetting.FieldUpdateAt,
		})
		_node.UpdateAt = value
	}
	if value, ok := aupasc.mutation.DeleteAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appuserpurchaseamountsetting.FieldDeleteAt,
		})
		_node.DeleteAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppUserPurchaseAmountSetting.Create().
//		SetAppID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppUserPurchaseAmountSettingUpsert) {
//			SetAppID(v+v).
//		}).
//		Exec(ctx)
//
func (aupasc *AppUserPurchaseAmountSettingCreate) OnConflict(opts ...sql.ConflictOption) *AppUserPurchaseAmountSettingUpsertOne {
	aupasc.conflict = opts
	return &AppUserPurchaseAmountSettingUpsertOne{
		create: aupasc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppUserPurchaseAmountSetting.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (aupasc *AppUserPurchaseAmountSettingCreate) OnConflictColumns(columns ...string) *AppUserPurchaseAmountSettingUpsertOne {
	aupasc.conflict = append(aupasc.conflict, sql.ConflictColumns(columns...))
	return &AppUserPurchaseAmountSettingUpsertOne{
		create: aupasc,
	}
}

type (
	// AppUserPurchaseAmountSettingUpsertOne is the builder for "upsert"-ing
	//  one AppUserPurchaseAmountSetting node.
	AppUserPurchaseAmountSettingUpsertOne struct {
		create *AppUserPurchaseAmountSettingCreate
	}

	// AppUserPurchaseAmountSettingUpsert is the "OnConflict" setter.
	AppUserPurchaseAmountSettingUpsert struct {
		*sql.UpdateSet
	}
)

// SetAppID sets the "app_id" field.
func (u *AppUserPurchaseAmountSettingUpsert) SetAppID(v uuid.UUID) *AppUserPurchaseAmountSettingUpsert {
	u.Set(appuserpurchaseamountsetting.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppUserPurchaseAmountSettingUpsert) UpdateAppID() *AppUserPurchaseAmountSettingUpsert {
	u.SetExcluded(appuserpurchaseamountsetting.FieldAppID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *AppUserPurchaseAmountSettingUpsert) SetUserID(v uuid.UUID) *AppUserPurchaseAmountSettingUpsert {
	u.Set(appuserpurchaseamountsetting.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *AppUserPurchaseAmountSettingUpsert) UpdateUserID() *AppUserPurchaseAmountSettingUpsert {
	u.SetExcluded(appuserpurchaseamountsetting.FieldUserID)
	return u
}

// SetTitle sets the "title" field.
func (u *AppUserPurchaseAmountSettingUpsert) SetTitle(v string) *AppUserPurchaseAmountSettingUpsert {
	u.Set(appuserpurchaseamountsetting.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *AppUserPurchaseAmountSettingUpsert) UpdateTitle() *AppUserPurchaseAmountSettingUpsert {
	u.SetExcluded(appuserpurchaseamountsetting.FieldTitle)
	return u
}

// SetBadgeLarge sets the "badge_large" field.
func (u *AppUserPurchaseAmountSettingUpsert) SetBadgeLarge(v string) *AppUserPurchaseAmountSettingUpsert {
	u.Set(appuserpurchaseamountsetting.FieldBadgeLarge, v)
	return u
}

// UpdateBadgeLarge sets the "badge_large" field to the value that was provided on create.
func (u *AppUserPurchaseAmountSettingUpsert) UpdateBadgeLarge() *AppUserPurchaseAmountSettingUpsert {
	u.SetExcluded(appuserpurchaseamountsetting.FieldBadgeLarge)
	return u
}

// SetBadgeSmall sets the "badge_small" field.
func (u *AppUserPurchaseAmountSettingUpsert) SetBadgeSmall(v string) *AppUserPurchaseAmountSettingUpsert {
	u.Set(appuserpurchaseamountsetting.FieldBadgeSmall, v)
	return u
}

// UpdateBadgeSmall sets the "badge_small" field to the value that was provided on create.
func (u *AppUserPurchaseAmountSettingUpsert) UpdateBadgeSmall() *AppUserPurchaseAmountSettingUpsert {
	u.SetExcluded(appuserpurchaseamountsetting.FieldBadgeSmall)
	return u
}

// SetAmount sets the "amount" field.
func (u *AppUserPurchaseAmountSettingUpsert) SetAmount(v uint64) *AppUserPurchaseAmountSettingUpsert {
	u.Set(appuserpurchaseamountsetting.FieldAmount, v)
	return u
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *AppUserPurchaseAmountSettingUpsert) UpdateAmount() *AppUserPurchaseAmountSettingUpsert {
	u.SetExcluded(appuserpurchaseamountsetting.FieldAmount)
	return u
}

// AddAmount adds v to the "amount" field.
func (u *AppUserPurchaseAmountSettingUpsert) AddAmount(v uint64) *AppUserPurchaseAmountSettingUpsert {
	u.Add(appuserpurchaseamountsetting.FieldAmount, v)
	return u
}

// SetPercent sets the "percent" field.
func (u *AppUserPurchaseAmountSettingUpsert) SetPercent(v uint32) *AppUserPurchaseAmountSettingUpsert {
	u.Set(appuserpurchaseamountsetting.FieldPercent, v)
	return u
}

// UpdatePercent sets the "percent" field to the value that was provided on create.
func (u *AppUserPurchaseAmountSettingUpsert) UpdatePercent() *AppUserPurchaseAmountSettingUpsert {
	u.SetExcluded(appuserpurchaseamountsetting.FieldPercent)
	return u
}

// AddPercent adds v to the "percent" field.
func (u *AppUserPurchaseAmountSettingUpsert) AddPercent(v uint32) *AppUserPurchaseAmountSettingUpsert {
	u.Add(appuserpurchaseamountsetting.FieldPercent, v)
	return u
}

// SetCreateAt sets the "create_at" field.
func (u *AppUserPurchaseAmountSettingUpsert) SetCreateAt(v uint32) *AppUserPurchaseAmountSettingUpsert {
	u.Set(appuserpurchaseamountsetting.FieldCreateAt, v)
	return u
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *AppUserPurchaseAmountSettingUpsert) UpdateCreateAt() *AppUserPurchaseAmountSettingUpsert {
	u.SetExcluded(appuserpurchaseamountsetting.FieldCreateAt)
	return u
}

// AddCreateAt adds v to the "create_at" field.
func (u *AppUserPurchaseAmountSettingUpsert) AddCreateAt(v uint32) *AppUserPurchaseAmountSettingUpsert {
	u.Add(appuserpurchaseamountsetting.FieldCreateAt, v)
	return u
}

// SetUpdateAt sets the "update_at" field.
func (u *AppUserPurchaseAmountSettingUpsert) SetUpdateAt(v uint32) *AppUserPurchaseAmountSettingUpsert {
	u.Set(appuserpurchaseamountsetting.FieldUpdateAt, v)
	return u
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *AppUserPurchaseAmountSettingUpsert) UpdateUpdateAt() *AppUserPurchaseAmountSettingUpsert {
	u.SetExcluded(appuserpurchaseamountsetting.FieldUpdateAt)
	return u
}

// AddUpdateAt adds v to the "update_at" field.
func (u *AppUserPurchaseAmountSettingUpsert) AddUpdateAt(v uint32) *AppUserPurchaseAmountSettingUpsert {
	u.Add(appuserpurchaseamountsetting.FieldUpdateAt, v)
	return u
}

// SetDeleteAt sets the "delete_at" field.
func (u *AppUserPurchaseAmountSettingUpsert) SetDeleteAt(v uint32) *AppUserPurchaseAmountSettingUpsert {
	u.Set(appuserpurchaseamountsetting.FieldDeleteAt, v)
	return u
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *AppUserPurchaseAmountSettingUpsert) UpdateDeleteAt() *AppUserPurchaseAmountSettingUpsert {
	u.SetExcluded(appuserpurchaseamountsetting.FieldDeleteAt)
	return u
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *AppUserPurchaseAmountSettingUpsert) AddDeleteAt(v uint32) *AppUserPurchaseAmountSettingUpsert {
	u.Add(appuserpurchaseamountsetting.FieldDeleteAt, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.AppUserPurchaseAmountSetting.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(appuserpurchaseamountsetting.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *AppUserPurchaseAmountSettingUpsertOne) UpdateNewValues() *AppUserPurchaseAmountSettingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(appuserpurchaseamountsetting.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.AppUserPurchaseAmountSetting.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *AppUserPurchaseAmountSettingUpsertOne) Ignore() *AppUserPurchaseAmountSettingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppUserPurchaseAmountSettingUpsertOne) DoNothing() *AppUserPurchaseAmountSettingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppUserPurchaseAmountSettingCreate.OnConflict
// documentation for more info.
func (u *AppUserPurchaseAmountSettingUpsertOne) Update(set func(*AppUserPurchaseAmountSettingUpsert)) *AppUserPurchaseAmountSettingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppUserPurchaseAmountSettingUpsert{UpdateSet: update})
	}))
	return u
}

// SetAppID sets the "app_id" field.
func (u *AppUserPurchaseAmountSettingUpsertOne) SetAppID(v uuid.UUID) *AppUserPurchaseAmountSettingUpsertOne {
	return u.Update(func(s *AppUserPurchaseAmountSettingUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppUserPurchaseAmountSettingUpsertOne) UpdateAppID() *AppUserPurchaseAmountSettingUpsertOne {
	return u.Update(func(s *AppUserPurchaseAmountSettingUpsert) {
		s.UpdateAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *AppUserPurchaseAmountSettingUpsertOne) SetUserID(v uuid.UUID) *AppUserPurchaseAmountSettingUpsertOne {
	return u.Update(func(s *AppUserPurchaseAmountSettingUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *AppUserPurchaseAmountSettingUpsertOne) UpdateUserID() *AppUserPurchaseAmountSettingUpsertOne {
	return u.Update(func(s *AppUserPurchaseAmountSettingUpsert) {
		s.UpdateUserID()
	})
}

// SetTitle sets the "title" field.
func (u *AppUserPurchaseAmountSettingUpsertOne) SetTitle(v string) *AppUserPurchaseAmountSettingUpsertOne {
	return u.Update(func(s *AppUserPurchaseAmountSettingUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *AppUserPurchaseAmountSettingUpsertOne) UpdateTitle() *AppUserPurchaseAmountSettingUpsertOne {
	return u.Update(func(s *AppUserPurchaseAmountSettingUpsert) {
		s.UpdateTitle()
	})
}

// SetBadgeLarge sets the "badge_large" field.
func (u *AppUserPurchaseAmountSettingUpsertOne) SetBadgeLarge(v string) *AppUserPurchaseAmountSettingUpsertOne {
	return u.Update(func(s *AppUserPurchaseAmountSettingUpsert) {
		s.SetBadgeLarge(v)
	})
}

// UpdateBadgeLarge sets the "badge_large" field to the value that was provided on create.
func (u *AppUserPurchaseAmountSettingUpsertOne) UpdateBadgeLarge() *AppUserPurchaseAmountSettingUpsertOne {
	return u.Update(func(s *AppUserPurchaseAmountSettingUpsert) {
		s.UpdateBadgeLarge()
	})
}

// SetBadgeSmall sets the "badge_small" field.
func (u *AppUserPurchaseAmountSettingUpsertOne) SetBadgeSmall(v string) *AppUserPurchaseAmountSettingUpsertOne {
	return u.Update(func(s *AppUserPurchaseAmountSettingUpsert) {
		s.SetBadgeSmall(v)
	})
}

// UpdateBadgeSmall sets the "badge_small" field to the value that was provided on create.
func (u *AppUserPurchaseAmountSettingUpsertOne) UpdateBadgeSmall() *AppUserPurchaseAmountSettingUpsertOne {
	return u.Update(func(s *AppUserPurchaseAmountSettingUpsert) {
		s.UpdateBadgeSmall()
	})
}

// SetAmount sets the "amount" field.
func (u *AppUserPurchaseAmountSettingUpsertOne) SetAmount(v uint64) *AppUserPurchaseAmountSettingUpsertOne {
	return u.Update(func(s *AppUserPurchaseAmountSettingUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *AppUserPurchaseAmountSettingUpsertOne) AddAmount(v uint64) *AppUserPurchaseAmountSettingUpsertOne {
	return u.Update(func(s *AppUserPurchaseAmountSettingUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *AppUserPurchaseAmountSettingUpsertOne) UpdateAmount() *AppUserPurchaseAmountSettingUpsertOne {
	return u.Update(func(s *AppUserPurchaseAmountSettingUpsert) {
		s.UpdateAmount()
	})
}

// SetPercent sets the "percent" field.
func (u *AppUserPurchaseAmountSettingUpsertOne) SetPercent(v uint32) *AppUserPurchaseAmountSettingUpsertOne {
	return u.Update(func(s *AppUserPurchaseAmountSettingUpsert) {
		s.SetPercent(v)
	})
}

// AddPercent adds v to the "percent" field.
func (u *AppUserPurchaseAmountSettingUpsertOne) AddPercent(v uint32) *AppUserPurchaseAmountSettingUpsertOne {
	return u.Update(func(s *AppUserPurchaseAmountSettingUpsert) {
		s.AddPercent(v)
	})
}

// UpdatePercent sets the "percent" field to the value that was provided on create.
func (u *AppUserPurchaseAmountSettingUpsertOne) UpdatePercent() *AppUserPurchaseAmountSettingUpsertOne {
	return u.Update(func(s *AppUserPurchaseAmountSettingUpsert) {
		s.UpdatePercent()
	})
}

// SetCreateAt sets the "create_at" field.
func (u *AppUserPurchaseAmountSettingUpsertOne) SetCreateAt(v uint32) *AppUserPurchaseAmountSettingUpsertOne {
	return u.Update(func(s *AppUserPurchaseAmountSettingUpsert) {
		s.SetCreateAt(v)
	})
}

// AddCreateAt adds v to the "create_at" field.
func (u *AppUserPurchaseAmountSettingUpsertOne) AddCreateAt(v uint32) *AppUserPurchaseAmountSettingUpsertOne {
	return u.Update(func(s *AppUserPurchaseAmountSettingUpsert) {
		s.AddCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *AppUserPurchaseAmountSettingUpsertOne) UpdateCreateAt() *AppUserPurchaseAmountSettingUpsertOne {
	return u.Update(func(s *AppUserPurchaseAmountSettingUpsert) {
		s.UpdateCreateAt()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *AppUserPurchaseAmountSettingUpsertOne) SetUpdateAt(v uint32) *AppUserPurchaseAmountSettingUpsertOne {
	return u.Update(func(s *AppUserPurchaseAmountSettingUpsert) {
		s.SetUpdateAt(v)
	})
}

// AddUpdateAt adds v to the "update_at" field.
func (u *AppUserPurchaseAmountSettingUpsertOne) AddUpdateAt(v uint32) *AppUserPurchaseAmountSettingUpsertOne {
	return u.Update(func(s *AppUserPurchaseAmountSettingUpsert) {
		s.AddUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *AppUserPurchaseAmountSettingUpsertOne) UpdateUpdateAt() *AppUserPurchaseAmountSettingUpsertOne {
	return u.Update(func(s *AppUserPurchaseAmountSettingUpsert) {
		s.UpdateUpdateAt()
	})
}

// SetDeleteAt sets the "delete_at" field.
func (u *AppUserPurchaseAmountSettingUpsertOne) SetDeleteAt(v uint32) *AppUserPurchaseAmountSettingUpsertOne {
	return u.Update(func(s *AppUserPurchaseAmountSettingUpsert) {
		s.SetDeleteAt(v)
	})
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *AppUserPurchaseAmountSettingUpsertOne) AddDeleteAt(v uint32) *AppUserPurchaseAmountSettingUpsertOne {
	return u.Update(func(s *AppUserPurchaseAmountSettingUpsert) {
		s.AddDeleteAt(v)
	})
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *AppUserPurchaseAmountSettingUpsertOne) UpdateDeleteAt() *AppUserPurchaseAmountSettingUpsertOne {
	return u.Update(func(s *AppUserPurchaseAmountSettingUpsert) {
		s.UpdateDeleteAt()
	})
}

// Exec executes the query.
func (u *AppUserPurchaseAmountSettingUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AppUserPurchaseAmountSettingCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppUserPurchaseAmountSettingUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AppUserPurchaseAmountSettingUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: AppUserPurchaseAmountSettingUpsertOne.ID is not supported by MySQL driver. Use AppUserPurchaseAmountSettingUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AppUserPurchaseAmountSettingUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AppUserPurchaseAmountSettingCreateBulk is the builder for creating many AppUserPurchaseAmountSetting entities in bulk.
type AppUserPurchaseAmountSettingCreateBulk struct {
	config
	builders []*AppUserPurchaseAmountSettingCreate
	conflict []sql.ConflictOption
}

// Save creates the AppUserPurchaseAmountSetting entities in the database.
func (aupascb *AppUserPurchaseAmountSettingCreateBulk) Save(ctx context.Context) ([]*AppUserPurchaseAmountSetting, error) {
	specs := make([]*sqlgraph.CreateSpec, len(aupascb.builders))
	nodes := make([]*AppUserPurchaseAmountSetting, len(aupascb.builders))
	mutators := make([]Mutator, len(aupascb.builders))
	for i := range aupascb.builders {
		func(i int, root context.Context) {
			builder := aupascb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AppUserPurchaseAmountSettingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, aupascb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = aupascb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, aupascb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, aupascb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (aupascb *AppUserPurchaseAmountSettingCreateBulk) SaveX(ctx context.Context) []*AppUserPurchaseAmountSetting {
	v, err := aupascb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aupascb *AppUserPurchaseAmountSettingCreateBulk) Exec(ctx context.Context) error {
	_, err := aupascb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aupascb *AppUserPurchaseAmountSettingCreateBulk) ExecX(ctx context.Context) {
	if err := aupascb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppUserPurchaseAmountSetting.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppUserPurchaseAmountSettingUpsert) {
//			SetAppID(v+v).
//		}).
//		Exec(ctx)
//
func (aupascb *AppUserPurchaseAmountSettingCreateBulk) OnConflict(opts ...sql.ConflictOption) *AppUserPurchaseAmountSettingUpsertBulk {
	aupascb.conflict = opts
	return &AppUserPurchaseAmountSettingUpsertBulk{
		create: aupascb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppUserPurchaseAmountSetting.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (aupascb *AppUserPurchaseAmountSettingCreateBulk) OnConflictColumns(columns ...string) *AppUserPurchaseAmountSettingUpsertBulk {
	aupascb.conflict = append(aupascb.conflict, sql.ConflictColumns(columns...))
	return &AppUserPurchaseAmountSettingUpsertBulk{
		create: aupascb,
	}
}

// AppUserPurchaseAmountSettingUpsertBulk is the builder for "upsert"-ing
// a bulk of AppUserPurchaseAmountSetting nodes.
type AppUserPurchaseAmountSettingUpsertBulk struct {
	create *AppUserPurchaseAmountSettingCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AppUserPurchaseAmountSetting.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(appuserpurchaseamountsetting.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *AppUserPurchaseAmountSettingUpsertBulk) UpdateNewValues() *AppUserPurchaseAmountSettingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(appuserpurchaseamountsetting.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppUserPurchaseAmountSetting.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *AppUserPurchaseAmountSettingUpsertBulk) Ignore() *AppUserPurchaseAmountSettingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppUserPurchaseAmountSettingUpsertBulk) DoNothing() *AppUserPurchaseAmountSettingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppUserPurchaseAmountSettingCreateBulk.OnConflict
// documentation for more info.
func (u *AppUserPurchaseAmountSettingUpsertBulk) Update(set func(*AppUserPurchaseAmountSettingUpsert)) *AppUserPurchaseAmountSettingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppUserPurchaseAmountSettingUpsert{UpdateSet: update})
	}))
	return u
}

// SetAppID sets the "app_id" field.
func (u *AppUserPurchaseAmountSettingUpsertBulk) SetAppID(v uuid.UUID) *AppUserPurchaseAmountSettingUpsertBulk {
	return u.Update(func(s *AppUserPurchaseAmountSettingUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppUserPurchaseAmountSettingUpsertBulk) UpdateAppID() *AppUserPurchaseAmountSettingUpsertBulk {
	return u.Update(func(s *AppUserPurchaseAmountSettingUpsert) {
		s.UpdateAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *AppUserPurchaseAmountSettingUpsertBulk) SetUserID(v uuid.UUID) *AppUserPurchaseAmountSettingUpsertBulk {
	return u.Update(func(s *AppUserPurchaseAmountSettingUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *AppUserPurchaseAmountSettingUpsertBulk) UpdateUserID() *AppUserPurchaseAmountSettingUpsertBulk {
	return u.Update(func(s *AppUserPurchaseAmountSettingUpsert) {
		s.UpdateUserID()
	})
}

// SetTitle sets the "title" field.
func (u *AppUserPurchaseAmountSettingUpsertBulk) SetTitle(v string) *AppUserPurchaseAmountSettingUpsertBulk {
	return u.Update(func(s *AppUserPurchaseAmountSettingUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *AppUserPurchaseAmountSettingUpsertBulk) UpdateTitle() *AppUserPurchaseAmountSettingUpsertBulk {
	return u.Update(func(s *AppUserPurchaseAmountSettingUpsert) {
		s.UpdateTitle()
	})
}

// SetBadgeLarge sets the "badge_large" field.
func (u *AppUserPurchaseAmountSettingUpsertBulk) SetBadgeLarge(v string) *AppUserPurchaseAmountSettingUpsertBulk {
	return u.Update(func(s *AppUserPurchaseAmountSettingUpsert) {
		s.SetBadgeLarge(v)
	})
}

// UpdateBadgeLarge sets the "badge_large" field to the value that was provided on create.
func (u *AppUserPurchaseAmountSettingUpsertBulk) UpdateBadgeLarge() *AppUserPurchaseAmountSettingUpsertBulk {
	return u.Update(func(s *AppUserPurchaseAmountSettingUpsert) {
		s.UpdateBadgeLarge()
	})
}

// SetBadgeSmall sets the "badge_small" field.
func (u *AppUserPurchaseAmountSettingUpsertBulk) SetBadgeSmall(v string) *AppUserPurchaseAmountSettingUpsertBulk {
	return u.Update(func(s *AppUserPurchaseAmountSettingUpsert) {
		s.SetBadgeSmall(v)
	})
}

// UpdateBadgeSmall sets the "badge_small" field to the value that was provided on create.
func (u *AppUserPurchaseAmountSettingUpsertBulk) UpdateBadgeSmall() *AppUserPurchaseAmountSettingUpsertBulk {
	return u.Update(func(s *AppUserPurchaseAmountSettingUpsert) {
		s.UpdateBadgeSmall()
	})
}

// SetAmount sets the "amount" field.
func (u *AppUserPurchaseAmountSettingUpsertBulk) SetAmount(v uint64) *AppUserPurchaseAmountSettingUpsertBulk {
	return u.Update(func(s *AppUserPurchaseAmountSettingUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *AppUserPurchaseAmountSettingUpsertBulk) AddAmount(v uint64) *AppUserPurchaseAmountSettingUpsertBulk {
	return u.Update(func(s *AppUserPurchaseAmountSettingUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *AppUserPurchaseAmountSettingUpsertBulk) UpdateAmount() *AppUserPurchaseAmountSettingUpsertBulk {
	return u.Update(func(s *AppUserPurchaseAmountSettingUpsert) {
		s.UpdateAmount()
	})
}

// SetPercent sets the "percent" field.
func (u *AppUserPurchaseAmountSettingUpsertBulk) SetPercent(v uint32) *AppUserPurchaseAmountSettingUpsertBulk {
	return u.Update(func(s *AppUserPurchaseAmountSettingUpsert) {
		s.SetPercent(v)
	})
}

// AddPercent adds v to the "percent" field.
func (u *AppUserPurchaseAmountSettingUpsertBulk) AddPercent(v uint32) *AppUserPurchaseAmountSettingUpsertBulk {
	return u.Update(func(s *AppUserPurchaseAmountSettingUpsert) {
		s.AddPercent(v)
	})
}

// UpdatePercent sets the "percent" field to the value that was provided on create.
func (u *AppUserPurchaseAmountSettingUpsertBulk) UpdatePercent() *AppUserPurchaseAmountSettingUpsertBulk {
	return u.Update(func(s *AppUserPurchaseAmountSettingUpsert) {
		s.UpdatePercent()
	})
}

// SetCreateAt sets the "create_at" field.
func (u *AppUserPurchaseAmountSettingUpsertBulk) SetCreateAt(v uint32) *AppUserPurchaseAmountSettingUpsertBulk {
	return u.Update(func(s *AppUserPurchaseAmountSettingUpsert) {
		s.SetCreateAt(v)
	})
}

// AddCreateAt adds v to the "create_at" field.
func (u *AppUserPurchaseAmountSettingUpsertBulk) AddCreateAt(v uint32) *AppUserPurchaseAmountSettingUpsertBulk {
	return u.Update(func(s *AppUserPurchaseAmountSettingUpsert) {
		s.AddCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *AppUserPurchaseAmountSettingUpsertBulk) UpdateCreateAt() *AppUserPurchaseAmountSettingUpsertBulk {
	return u.Update(func(s *AppUserPurchaseAmountSettingUpsert) {
		s.UpdateCreateAt()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *AppUserPurchaseAmountSettingUpsertBulk) SetUpdateAt(v uint32) *AppUserPurchaseAmountSettingUpsertBulk {
	return u.Update(func(s *AppUserPurchaseAmountSettingUpsert) {
		s.SetUpdateAt(v)
	})
}

// AddUpdateAt adds v to the "update_at" field.
func (u *AppUserPurchaseAmountSettingUpsertBulk) AddUpdateAt(v uint32) *AppUserPurchaseAmountSettingUpsertBulk {
	return u.Update(func(s *AppUserPurchaseAmountSettingUpsert) {
		s.AddUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *AppUserPurchaseAmountSettingUpsertBulk) UpdateUpdateAt() *AppUserPurchaseAmountSettingUpsertBulk {
	return u.Update(func(s *AppUserPurchaseAmountSettingUpsert) {
		s.UpdateUpdateAt()
	})
}

// SetDeleteAt sets the "delete_at" field.
func (u *AppUserPurchaseAmountSettingUpsertBulk) SetDeleteAt(v uint32) *AppUserPurchaseAmountSettingUpsertBulk {
	return u.Update(func(s *AppUserPurchaseAmountSettingUpsert) {
		s.SetDeleteAt(v)
	})
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *AppUserPurchaseAmountSettingUpsertBulk) AddDeleteAt(v uint32) *AppUserPurchaseAmountSettingUpsertBulk {
	return u.Update(func(s *AppUserPurchaseAmountSettingUpsert) {
		s.AddDeleteAt(v)
	})
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *AppUserPurchaseAmountSettingUpsertBulk) UpdateDeleteAt() *AppUserPurchaseAmountSettingUpsertBulk {
	return u.Update(func(s *AppUserPurchaseAmountSettingUpsert) {
		s.UpdateDeleteAt()
	})
}

// Exec executes the query.
func (u *AppUserPurchaseAmountSettingUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AppUserPurchaseAmountSettingCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AppUserPurchaseAmountSettingCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppUserPurchaseAmountSettingUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
