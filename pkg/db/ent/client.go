// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/migrate"
	"github.com/google/uuid"

	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/activity"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/appcommissionsetting"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/appcouponsetting"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/appinvitationsetting"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/apppurchaseamountsetting"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/commissioncoinsetting"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/couponallocated"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/couponpool"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/defaultkpisetting"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/discountpool"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/eventcoupon"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/registrationinvitation"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/userinvitationcode"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/userkpisetting"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/userspecialreduction"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Activity is the client for interacting with the Activity builders.
	Activity *ActivityClient
	// AppCommissionSetting is the client for interacting with the AppCommissionSetting builders.
	AppCommissionSetting *AppCommissionSettingClient
	// AppCouponSetting is the client for interacting with the AppCouponSetting builders.
	AppCouponSetting *AppCouponSettingClient
	// AppInvitationSetting is the client for interacting with the AppInvitationSetting builders.
	AppInvitationSetting *AppInvitationSettingClient
	// AppPurchaseAmountSetting is the client for interacting with the AppPurchaseAmountSetting builders.
	AppPurchaseAmountSetting *AppPurchaseAmountSettingClient
	// CommissionCoinSetting is the client for interacting with the CommissionCoinSetting builders.
	CommissionCoinSetting *CommissionCoinSettingClient
	// CouponAllocated is the client for interacting with the CouponAllocated builders.
	CouponAllocated *CouponAllocatedClient
	// CouponPool is the client for interacting with the CouponPool builders.
	CouponPool *CouponPoolClient
	// DefaultKpiSetting is the client for interacting with the DefaultKpiSetting builders.
	DefaultKpiSetting *DefaultKpiSettingClient
	// DiscountPool is the client for interacting with the DiscountPool builders.
	DiscountPool *DiscountPoolClient
	// EventCoupon is the client for interacting with the EventCoupon builders.
	EventCoupon *EventCouponClient
	// RegistrationInvitation is the client for interacting with the RegistrationInvitation builders.
	RegistrationInvitation *RegistrationInvitationClient
	// UserInvitationCode is the client for interacting with the UserInvitationCode builders.
	UserInvitationCode *UserInvitationCodeClient
	// UserKpiSetting is the client for interacting with the UserKpiSetting builders.
	UserKpiSetting *UserKpiSettingClient
	// UserSpecialReduction is the client for interacting with the UserSpecialReduction builders.
	UserSpecialReduction *UserSpecialReductionClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Activity = NewActivityClient(c.config)
	c.AppCommissionSetting = NewAppCommissionSettingClient(c.config)
	c.AppCouponSetting = NewAppCouponSettingClient(c.config)
	c.AppInvitationSetting = NewAppInvitationSettingClient(c.config)
	c.AppPurchaseAmountSetting = NewAppPurchaseAmountSettingClient(c.config)
	c.CommissionCoinSetting = NewCommissionCoinSettingClient(c.config)
	c.CouponAllocated = NewCouponAllocatedClient(c.config)
	c.CouponPool = NewCouponPoolClient(c.config)
	c.DefaultKpiSetting = NewDefaultKpiSettingClient(c.config)
	c.DiscountPool = NewDiscountPoolClient(c.config)
	c.EventCoupon = NewEventCouponClient(c.config)
	c.RegistrationInvitation = NewRegistrationInvitationClient(c.config)
	c.UserInvitationCode = NewUserInvitationCodeClient(c.config)
	c.UserKpiSetting = NewUserKpiSettingClient(c.config)
	c.UserSpecialReduction = NewUserSpecialReductionClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                      ctx,
		config:                   cfg,
		Activity:                 NewActivityClient(cfg),
		AppCommissionSetting:     NewAppCommissionSettingClient(cfg),
		AppCouponSetting:         NewAppCouponSettingClient(cfg),
		AppInvitationSetting:     NewAppInvitationSettingClient(cfg),
		AppPurchaseAmountSetting: NewAppPurchaseAmountSettingClient(cfg),
		CommissionCoinSetting:    NewCommissionCoinSettingClient(cfg),
		CouponAllocated:          NewCouponAllocatedClient(cfg),
		CouponPool:               NewCouponPoolClient(cfg),
		DefaultKpiSetting:        NewDefaultKpiSettingClient(cfg),
		DiscountPool:             NewDiscountPoolClient(cfg),
		EventCoupon:              NewEventCouponClient(cfg),
		RegistrationInvitation:   NewRegistrationInvitationClient(cfg),
		UserInvitationCode:       NewUserInvitationCodeClient(cfg),
		UserKpiSetting:           NewUserKpiSettingClient(cfg),
		UserSpecialReduction:     NewUserSpecialReductionClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                      ctx,
		config:                   cfg,
		Activity:                 NewActivityClient(cfg),
		AppCommissionSetting:     NewAppCommissionSettingClient(cfg),
		AppCouponSetting:         NewAppCouponSettingClient(cfg),
		AppInvitationSetting:     NewAppInvitationSettingClient(cfg),
		AppPurchaseAmountSetting: NewAppPurchaseAmountSettingClient(cfg),
		CommissionCoinSetting:    NewCommissionCoinSettingClient(cfg),
		CouponAllocated:          NewCouponAllocatedClient(cfg),
		CouponPool:               NewCouponPoolClient(cfg),
		DefaultKpiSetting:        NewDefaultKpiSettingClient(cfg),
		DiscountPool:             NewDiscountPoolClient(cfg),
		EventCoupon:              NewEventCouponClient(cfg),
		RegistrationInvitation:   NewRegistrationInvitationClient(cfg),
		UserInvitationCode:       NewUserInvitationCodeClient(cfg),
		UserKpiSetting:           NewUserKpiSettingClient(cfg),
		UserSpecialReduction:     NewUserSpecialReductionClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Activity.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Activity.Use(hooks...)
	c.AppCommissionSetting.Use(hooks...)
	c.AppCouponSetting.Use(hooks...)
	c.AppInvitationSetting.Use(hooks...)
	c.AppPurchaseAmountSetting.Use(hooks...)
	c.CommissionCoinSetting.Use(hooks...)
	c.CouponAllocated.Use(hooks...)
	c.CouponPool.Use(hooks...)
	c.DefaultKpiSetting.Use(hooks...)
	c.DiscountPool.Use(hooks...)
	c.EventCoupon.Use(hooks...)
	c.RegistrationInvitation.Use(hooks...)
	c.UserInvitationCode.Use(hooks...)
	c.UserKpiSetting.Use(hooks...)
	c.UserSpecialReduction.Use(hooks...)
}

// ActivityClient is a client for the Activity schema.
type ActivityClient struct {
	config
}

// NewActivityClient returns a client for the Activity from the given config.
func NewActivityClient(c config) *ActivityClient {
	return &ActivityClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `activity.Hooks(f(g(h())))`.
func (c *ActivityClient) Use(hooks ...Hook) {
	c.hooks.Activity = append(c.hooks.Activity, hooks...)
}

// Create returns a create builder for Activity.
func (c *ActivityClient) Create() *ActivityCreate {
	mutation := newActivityMutation(c.config, OpCreate)
	return &ActivityCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Activity entities.
func (c *ActivityClient) CreateBulk(builders ...*ActivityCreate) *ActivityCreateBulk {
	return &ActivityCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Activity.
func (c *ActivityClient) Update() *ActivityUpdate {
	mutation := newActivityMutation(c.config, OpUpdate)
	return &ActivityUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ActivityClient) UpdateOne(a *Activity) *ActivityUpdateOne {
	mutation := newActivityMutation(c.config, OpUpdateOne, withActivity(a))
	return &ActivityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ActivityClient) UpdateOneID(id uuid.UUID) *ActivityUpdateOne {
	mutation := newActivityMutation(c.config, OpUpdateOne, withActivityID(id))
	return &ActivityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Activity.
func (c *ActivityClient) Delete() *ActivityDelete {
	mutation := newActivityMutation(c.config, OpDelete)
	return &ActivityDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ActivityClient) DeleteOne(a *Activity) *ActivityDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ActivityClient) DeleteOneID(id uuid.UUID) *ActivityDeleteOne {
	builder := c.Delete().Where(activity.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ActivityDeleteOne{builder}
}

// Query returns a query builder for Activity.
func (c *ActivityClient) Query() *ActivityQuery {
	return &ActivityQuery{
		config: c.config,
	}
}

// Get returns a Activity entity by its id.
func (c *ActivityClient) Get(ctx context.Context, id uuid.UUID) (*Activity, error) {
	return c.Query().Where(activity.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ActivityClient) GetX(ctx context.Context, id uuid.UUID) *Activity {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ActivityClient) Hooks() []Hook {
	return c.hooks.Activity
}

// AppCommissionSettingClient is a client for the AppCommissionSetting schema.
type AppCommissionSettingClient struct {
	config
}

// NewAppCommissionSettingClient returns a client for the AppCommissionSetting from the given config.
func NewAppCommissionSettingClient(c config) *AppCommissionSettingClient {
	return &AppCommissionSettingClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `appcommissionsetting.Hooks(f(g(h())))`.
func (c *AppCommissionSettingClient) Use(hooks ...Hook) {
	c.hooks.AppCommissionSetting = append(c.hooks.AppCommissionSetting, hooks...)
}

// Create returns a create builder for AppCommissionSetting.
func (c *AppCommissionSettingClient) Create() *AppCommissionSettingCreate {
	mutation := newAppCommissionSettingMutation(c.config, OpCreate)
	return &AppCommissionSettingCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AppCommissionSetting entities.
func (c *AppCommissionSettingClient) CreateBulk(builders ...*AppCommissionSettingCreate) *AppCommissionSettingCreateBulk {
	return &AppCommissionSettingCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AppCommissionSetting.
func (c *AppCommissionSettingClient) Update() *AppCommissionSettingUpdate {
	mutation := newAppCommissionSettingMutation(c.config, OpUpdate)
	return &AppCommissionSettingUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppCommissionSettingClient) UpdateOne(acs *AppCommissionSetting) *AppCommissionSettingUpdateOne {
	mutation := newAppCommissionSettingMutation(c.config, OpUpdateOne, withAppCommissionSetting(acs))
	return &AppCommissionSettingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppCommissionSettingClient) UpdateOneID(id uuid.UUID) *AppCommissionSettingUpdateOne {
	mutation := newAppCommissionSettingMutation(c.config, OpUpdateOne, withAppCommissionSettingID(id))
	return &AppCommissionSettingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AppCommissionSetting.
func (c *AppCommissionSettingClient) Delete() *AppCommissionSettingDelete {
	mutation := newAppCommissionSettingMutation(c.config, OpDelete)
	return &AppCommissionSettingDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AppCommissionSettingClient) DeleteOne(acs *AppCommissionSetting) *AppCommissionSettingDeleteOne {
	return c.DeleteOneID(acs.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AppCommissionSettingClient) DeleteOneID(id uuid.UUID) *AppCommissionSettingDeleteOne {
	builder := c.Delete().Where(appcommissionsetting.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppCommissionSettingDeleteOne{builder}
}

// Query returns a query builder for AppCommissionSetting.
func (c *AppCommissionSettingClient) Query() *AppCommissionSettingQuery {
	return &AppCommissionSettingQuery{
		config: c.config,
	}
}

// Get returns a AppCommissionSetting entity by its id.
func (c *AppCommissionSettingClient) Get(ctx context.Context, id uuid.UUID) (*AppCommissionSetting, error) {
	return c.Query().Where(appcommissionsetting.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppCommissionSettingClient) GetX(ctx context.Context, id uuid.UUID) *AppCommissionSetting {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AppCommissionSettingClient) Hooks() []Hook {
	return c.hooks.AppCommissionSetting
}

// AppCouponSettingClient is a client for the AppCouponSetting schema.
type AppCouponSettingClient struct {
	config
}

// NewAppCouponSettingClient returns a client for the AppCouponSetting from the given config.
func NewAppCouponSettingClient(c config) *AppCouponSettingClient {
	return &AppCouponSettingClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `appcouponsetting.Hooks(f(g(h())))`.
func (c *AppCouponSettingClient) Use(hooks ...Hook) {
	c.hooks.AppCouponSetting = append(c.hooks.AppCouponSetting, hooks...)
}

// Create returns a create builder for AppCouponSetting.
func (c *AppCouponSettingClient) Create() *AppCouponSettingCreate {
	mutation := newAppCouponSettingMutation(c.config, OpCreate)
	return &AppCouponSettingCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AppCouponSetting entities.
func (c *AppCouponSettingClient) CreateBulk(builders ...*AppCouponSettingCreate) *AppCouponSettingCreateBulk {
	return &AppCouponSettingCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AppCouponSetting.
func (c *AppCouponSettingClient) Update() *AppCouponSettingUpdate {
	mutation := newAppCouponSettingMutation(c.config, OpUpdate)
	return &AppCouponSettingUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppCouponSettingClient) UpdateOne(acs *AppCouponSetting) *AppCouponSettingUpdateOne {
	mutation := newAppCouponSettingMutation(c.config, OpUpdateOne, withAppCouponSetting(acs))
	return &AppCouponSettingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppCouponSettingClient) UpdateOneID(id uuid.UUID) *AppCouponSettingUpdateOne {
	mutation := newAppCouponSettingMutation(c.config, OpUpdateOne, withAppCouponSettingID(id))
	return &AppCouponSettingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AppCouponSetting.
func (c *AppCouponSettingClient) Delete() *AppCouponSettingDelete {
	mutation := newAppCouponSettingMutation(c.config, OpDelete)
	return &AppCouponSettingDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AppCouponSettingClient) DeleteOne(acs *AppCouponSetting) *AppCouponSettingDeleteOne {
	return c.DeleteOneID(acs.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AppCouponSettingClient) DeleteOneID(id uuid.UUID) *AppCouponSettingDeleteOne {
	builder := c.Delete().Where(appcouponsetting.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppCouponSettingDeleteOne{builder}
}

// Query returns a query builder for AppCouponSetting.
func (c *AppCouponSettingClient) Query() *AppCouponSettingQuery {
	return &AppCouponSettingQuery{
		config: c.config,
	}
}

// Get returns a AppCouponSetting entity by its id.
func (c *AppCouponSettingClient) Get(ctx context.Context, id uuid.UUID) (*AppCouponSetting, error) {
	return c.Query().Where(appcouponsetting.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppCouponSettingClient) GetX(ctx context.Context, id uuid.UUID) *AppCouponSetting {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AppCouponSettingClient) Hooks() []Hook {
	return c.hooks.AppCouponSetting
}

// AppInvitationSettingClient is a client for the AppInvitationSetting schema.
type AppInvitationSettingClient struct {
	config
}

// NewAppInvitationSettingClient returns a client for the AppInvitationSetting from the given config.
func NewAppInvitationSettingClient(c config) *AppInvitationSettingClient {
	return &AppInvitationSettingClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `appinvitationsetting.Hooks(f(g(h())))`.
func (c *AppInvitationSettingClient) Use(hooks ...Hook) {
	c.hooks.AppInvitationSetting = append(c.hooks.AppInvitationSetting, hooks...)
}

// Create returns a create builder for AppInvitationSetting.
func (c *AppInvitationSettingClient) Create() *AppInvitationSettingCreate {
	mutation := newAppInvitationSettingMutation(c.config, OpCreate)
	return &AppInvitationSettingCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AppInvitationSetting entities.
func (c *AppInvitationSettingClient) CreateBulk(builders ...*AppInvitationSettingCreate) *AppInvitationSettingCreateBulk {
	return &AppInvitationSettingCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AppInvitationSetting.
func (c *AppInvitationSettingClient) Update() *AppInvitationSettingUpdate {
	mutation := newAppInvitationSettingMutation(c.config, OpUpdate)
	return &AppInvitationSettingUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppInvitationSettingClient) UpdateOne(ais *AppInvitationSetting) *AppInvitationSettingUpdateOne {
	mutation := newAppInvitationSettingMutation(c.config, OpUpdateOne, withAppInvitationSetting(ais))
	return &AppInvitationSettingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppInvitationSettingClient) UpdateOneID(id uuid.UUID) *AppInvitationSettingUpdateOne {
	mutation := newAppInvitationSettingMutation(c.config, OpUpdateOne, withAppInvitationSettingID(id))
	return &AppInvitationSettingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AppInvitationSetting.
func (c *AppInvitationSettingClient) Delete() *AppInvitationSettingDelete {
	mutation := newAppInvitationSettingMutation(c.config, OpDelete)
	return &AppInvitationSettingDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AppInvitationSettingClient) DeleteOne(ais *AppInvitationSetting) *AppInvitationSettingDeleteOne {
	return c.DeleteOneID(ais.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AppInvitationSettingClient) DeleteOneID(id uuid.UUID) *AppInvitationSettingDeleteOne {
	builder := c.Delete().Where(appinvitationsetting.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppInvitationSettingDeleteOne{builder}
}

// Query returns a query builder for AppInvitationSetting.
func (c *AppInvitationSettingClient) Query() *AppInvitationSettingQuery {
	return &AppInvitationSettingQuery{
		config: c.config,
	}
}

// Get returns a AppInvitationSetting entity by its id.
func (c *AppInvitationSettingClient) Get(ctx context.Context, id uuid.UUID) (*AppInvitationSetting, error) {
	return c.Query().Where(appinvitationsetting.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppInvitationSettingClient) GetX(ctx context.Context, id uuid.UUID) *AppInvitationSetting {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AppInvitationSettingClient) Hooks() []Hook {
	return c.hooks.AppInvitationSetting
}

// AppPurchaseAmountSettingClient is a client for the AppPurchaseAmountSetting schema.
type AppPurchaseAmountSettingClient struct {
	config
}

// NewAppPurchaseAmountSettingClient returns a client for the AppPurchaseAmountSetting from the given config.
func NewAppPurchaseAmountSettingClient(c config) *AppPurchaseAmountSettingClient {
	return &AppPurchaseAmountSettingClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `apppurchaseamountsetting.Hooks(f(g(h())))`.
func (c *AppPurchaseAmountSettingClient) Use(hooks ...Hook) {
	c.hooks.AppPurchaseAmountSetting = append(c.hooks.AppPurchaseAmountSetting, hooks...)
}

// Create returns a create builder for AppPurchaseAmountSetting.
func (c *AppPurchaseAmountSettingClient) Create() *AppPurchaseAmountSettingCreate {
	mutation := newAppPurchaseAmountSettingMutation(c.config, OpCreate)
	return &AppPurchaseAmountSettingCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AppPurchaseAmountSetting entities.
func (c *AppPurchaseAmountSettingClient) CreateBulk(builders ...*AppPurchaseAmountSettingCreate) *AppPurchaseAmountSettingCreateBulk {
	return &AppPurchaseAmountSettingCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AppPurchaseAmountSetting.
func (c *AppPurchaseAmountSettingClient) Update() *AppPurchaseAmountSettingUpdate {
	mutation := newAppPurchaseAmountSettingMutation(c.config, OpUpdate)
	return &AppPurchaseAmountSettingUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppPurchaseAmountSettingClient) UpdateOne(apas *AppPurchaseAmountSetting) *AppPurchaseAmountSettingUpdateOne {
	mutation := newAppPurchaseAmountSettingMutation(c.config, OpUpdateOne, withAppPurchaseAmountSetting(apas))
	return &AppPurchaseAmountSettingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppPurchaseAmountSettingClient) UpdateOneID(id uuid.UUID) *AppPurchaseAmountSettingUpdateOne {
	mutation := newAppPurchaseAmountSettingMutation(c.config, OpUpdateOne, withAppPurchaseAmountSettingID(id))
	return &AppPurchaseAmountSettingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AppPurchaseAmountSetting.
func (c *AppPurchaseAmountSettingClient) Delete() *AppPurchaseAmountSettingDelete {
	mutation := newAppPurchaseAmountSettingMutation(c.config, OpDelete)
	return &AppPurchaseAmountSettingDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AppPurchaseAmountSettingClient) DeleteOne(apas *AppPurchaseAmountSetting) *AppPurchaseAmountSettingDeleteOne {
	return c.DeleteOneID(apas.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AppPurchaseAmountSettingClient) DeleteOneID(id uuid.UUID) *AppPurchaseAmountSettingDeleteOne {
	builder := c.Delete().Where(apppurchaseamountsetting.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppPurchaseAmountSettingDeleteOne{builder}
}

// Query returns a query builder for AppPurchaseAmountSetting.
func (c *AppPurchaseAmountSettingClient) Query() *AppPurchaseAmountSettingQuery {
	return &AppPurchaseAmountSettingQuery{
		config: c.config,
	}
}

// Get returns a AppPurchaseAmountSetting entity by its id.
func (c *AppPurchaseAmountSettingClient) Get(ctx context.Context, id uuid.UUID) (*AppPurchaseAmountSetting, error) {
	return c.Query().Where(apppurchaseamountsetting.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppPurchaseAmountSettingClient) GetX(ctx context.Context, id uuid.UUID) *AppPurchaseAmountSetting {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AppPurchaseAmountSettingClient) Hooks() []Hook {
	return c.hooks.AppPurchaseAmountSetting
}

// CommissionCoinSettingClient is a client for the CommissionCoinSetting schema.
type CommissionCoinSettingClient struct {
	config
}

// NewCommissionCoinSettingClient returns a client for the CommissionCoinSetting from the given config.
func NewCommissionCoinSettingClient(c config) *CommissionCoinSettingClient {
	return &CommissionCoinSettingClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `commissioncoinsetting.Hooks(f(g(h())))`.
func (c *CommissionCoinSettingClient) Use(hooks ...Hook) {
	c.hooks.CommissionCoinSetting = append(c.hooks.CommissionCoinSetting, hooks...)
}

// Create returns a create builder for CommissionCoinSetting.
func (c *CommissionCoinSettingClient) Create() *CommissionCoinSettingCreate {
	mutation := newCommissionCoinSettingMutation(c.config, OpCreate)
	return &CommissionCoinSettingCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CommissionCoinSetting entities.
func (c *CommissionCoinSettingClient) CreateBulk(builders ...*CommissionCoinSettingCreate) *CommissionCoinSettingCreateBulk {
	return &CommissionCoinSettingCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CommissionCoinSetting.
func (c *CommissionCoinSettingClient) Update() *CommissionCoinSettingUpdate {
	mutation := newCommissionCoinSettingMutation(c.config, OpUpdate)
	return &CommissionCoinSettingUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CommissionCoinSettingClient) UpdateOne(ccs *CommissionCoinSetting) *CommissionCoinSettingUpdateOne {
	mutation := newCommissionCoinSettingMutation(c.config, OpUpdateOne, withCommissionCoinSetting(ccs))
	return &CommissionCoinSettingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CommissionCoinSettingClient) UpdateOneID(id uuid.UUID) *CommissionCoinSettingUpdateOne {
	mutation := newCommissionCoinSettingMutation(c.config, OpUpdateOne, withCommissionCoinSettingID(id))
	return &CommissionCoinSettingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CommissionCoinSetting.
func (c *CommissionCoinSettingClient) Delete() *CommissionCoinSettingDelete {
	mutation := newCommissionCoinSettingMutation(c.config, OpDelete)
	return &CommissionCoinSettingDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CommissionCoinSettingClient) DeleteOne(ccs *CommissionCoinSetting) *CommissionCoinSettingDeleteOne {
	return c.DeleteOneID(ccs.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CommissionCoinSettingClient) DeleteOneID(id uuid.UUID) *CommissionCoinSettingDeleteOne {
	builder := c.Delete().Where(commissioncoinsetting.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CommissionCoinSettingDeleteOne{builder}
}

// Query returns a query builder for CommissionCoinSetting.
func (c *CommissionCoinSettingClient) Query() *CommissionCoinSettingQuery {
	return &CommissionCoinSettingQuery{
		config: c.config,
	}
}

// Get returns a CommissionCoinSetting entity by its id.
func (c *CommissionCoinSettingClient) Get(ctx context.Context, id uuid.UUID) (*CommissionCoinSetting, error) {
	return c.Query().Where(commissioncoinsetting.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CommissionCoinSettingClient) GetX(ctx context.Context, id uuid.UUID) *CommissionCoinSetting {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CommissionCoinSettingClient) Hooks() []Hook {
	return c.hooks.CommissionCoinSetting
}

// CouponAllocatedClient is a client for the CouponAllocated schema.
type CouponAllocatedClient struct {
	config
}

// NewCouponAllocatedClient returns a client for the CouponAllocated from the given config.
func NewCouponAllocatedClient(c config) *CouponAllocatedClient {
	return &CouponAllocatedClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `couponallocated.Hooks(f(g(h())))`.
func (c *CouponAllocatedClient) Use(hooks ...Hook) {
	c.hooks.CouponAllocated = append(c.hooks.CouponAllocated, hooks...)
}

// Create returns a create builder for CouponAllocated.
func (c *CouponAllocatedClient) Create() *CouponAllocatedCreate {
	mutation := newCouponAllocatedMutation(c.config, OpCreate)
	return &CouponAllocatedCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CouponAllocated entities.
func (c *CouponAllocatedClient) CreateBulk(builders ...*CouponAllocatedCreate) *CouponAllocatedCreateBulk {
	return &CouponAllocatedCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CouponAllocated.
func (c *CouponAllocatedClient) Update() *CouponAllocatedUpdate {
	mutation := newCouponAllocatedMutation(c.config, OpUpdate)
	return &CouponAllocatedUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CouponAllocatedClient) UpdateOne(ca *CouponAllocated) *CouponAllocatedUpdateOne {
	mutation := newCouponAllocatedMutation(c.config, OpUpdateOne, withCouponAllocated(ca))
	return &CouponAllocatedUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CouponAllocatedClient) UpdateOneID(id uuid.UUID) *CouponAllocatedUpdateOne {
	mutation := newCouponAllocatedMutation(c.config, OpUpdateOne, withCouponAllocatedID(id))
	return &CouponAllocatedUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CouponAllocated.
func (c *CouponAllocatedClient) Delete() *CouponAllocatedDelete {
	mutation := newCouponAllocatedMutation(c.config, OpDelete)
	return &CouponAllocatedDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CouponAllocatedClient) DeleteOne(ca *CouponAllocated) *CouponAllocatedDeleteOne {
	return c.DeleteOneID(ca.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CouponAllocatedClient) DeleteOneID(id uuid.UUID) *CouponAllocatedDeleteOne {
	builder := c.Delete().Where(couponallocated.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CouponAllocatedDeleteOne{builder}
}

// Query returns a query builder for CouponAllocated.
func (c *CouponAllocatedClient) Query() *CouponAllocatedQuery {
	return &CouponAllocatedQuery{
		config: c.config,
	}
}

// Get returns a CouponAllocated entity by its id.
func (c *CouponAllocatedClient) Get(ctx context.Context, id uuid.UUID) (*CouponAllocated, error) {
	return c.Query().Where(couponallocated.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CouponAllocatedClient) GetX(ctx context.Context, id uuid.UUID) *CouponAllocated {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CouponAllocatedClient) Hooks() []Hook {
	return c.hooks.CouponAllocated
}

// CouponPoolClient is a client for the CouponPool schema.
type CouponPoolClient struct {
	config
}

// NewCouponPoolClient returns a client for the CouponPool from the given config.
func NewCouponPoolClient(c config) *CouponPoolClient {
	return &CouponPoolClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `couponpool.Hooks(f(g(h())))`.
func (c *CouponPoolClient) Use(hooks ...Hook) {
	c.hooks.CouponPool = append(c.hooks.CouponPool, hooks...)
}

// Create returns a create builder for CouponPool.
func (c *CouponPoolClient) Create() *CouponPoolCreate {
	mutation := newCouponPoolMutation(c.config, OpCreate)
	return &CouponPoolCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CouponPool entities.
func (c *CouponPoolClient) CreateBulk(builders ...*CouponPoolCreate) *CouponPoolCreateBulk {
	return &CouponPoolCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CouponPool.
func (c *CouponPoolClient) Update() *CouponPoolUpdate {
	mutation := newCouponPoolMutation(c.config, OpUpdate)
	return &CouponPoolUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CouponPoolClient) UpdateOne(cp *CouponPool) *CouponPoolUpdateOne {
	mutation := newCouponPoolMutation(c.config, OpUpdateOne, withCouponPool(cp))
	return &CouponPoolUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CouponPoolClient) UpdateOneID(id uuid.UUID) *CouponPoolUpdateOne {
	mutation := newCouponPoolMutation(c.config, OpUpdateOne, withCouponPoolID(id))
	return &CouponPoolUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CouponPool.
func (c *CouponPoolClient) Delete() *CouponPoolDelete {
	mutation := newCouponPoolMutation(c.config, OpDelete)
	return &CouponPoolDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CouponPoolClient) DeleteOne(cp *CouponPool) *CouponPoolDeleteOne {
	return c.DeleteOneID(cp.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CouponPoolClient) DeleteOneID(id uuid.UUID) *CouponPoolDeleteOne {
	builder := c.Delete().Where(couponpool.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CouponPoolDeleteOne{builder}
}

// Query returns a query builder for CouponPool.
func (c *CouponPoolClient) Query() *CouponPoolQuery {
	return &CouponPoolQuery{
		config: c.config,
	}
}

// Get returns a CouponPool entity by its id.
func (c *CouponPoolClient) Get(ctx context.Context, id uuid.UUID) (*CouponPool, error) {
	return c.Query().Where(couponpool.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CouponPoolClient) GetX(ctx context.Context, id uuid.UUID) *CouponPool {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CouponPoolClient) Hooks() []Hook {
	return c.hooks.CouponPool
}

// DefaultKpiSettingClient is a client for the DefaultKpiSetting schema.
type DefaultKpiSettingClient struct {
	config
}

// NewDefaultKpiSettingClient returns a client for the DefaultKpiSetting from the given config.
func NewDefaultKpiSettingClient(c config) *DefaultKpiSettingClient {
	return &DefaultKpiSettingClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `defaultkpisetting.Hooks(f(g(h())))`.
func (c *DefaultKpiSettingClient) Use(hooks ...Hook) {
	c.hooks.DefaultKpiSetting = append(c.hooks.DefaultKpiSetting, hooks...)
}

// Create returns a create builder for DefaultKpiSetting.
func (c *DefaultKpiSettingClient) Create() *DefaultKpiSettingCreate {
	mutation := newDefaultKpiSettingMutation(c.config, OpCreate)
	return &DefaultKpiSettingCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DefaultKpiSetting entities.
func (c *DefaultKpiSettingClient) CreateBulk(builders ...*DefaultKpiSettingCreate) *DefaultKpiSettingCreateBulk {
	return &DefaultKpiSettingCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DefaultKpiSetting.
func (c *DefaultKpiSettingClient) Update() *DefaultKpiSettingUpdate {
	mutation := newDefaultKpiSettingMutation(c.config, OpUpdate)
	return &DefaultKpiSettingUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DefaultKpiSettingClient) UpdateOne(dks *DefaultKpiSetting) *DefaultKpiSettingUpdateOne {
	mutation := newDefaultKpiSettingMutation(c.config, OpUpdateOne, withDefaultKpiSetting(dks))
	return &DefaultKpiSettingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DefaultKpiSettingClient) UpdateOneID(id uuid.UUID) *DefaultKpiSettingUpdateOne {
	mutation := newDefaultKpiSettingMutation(c.config, OpUpdateOne, withDefaultKpiSettingID(id))
	return &DefaultKpiSettingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DefaultKpiSetting.
func (c *DefaultKpiSettingClient) Delete() *DefaultKpiSettingDelete {
	mutation := newDefaultKpiSettingMutation(c.config, OpDelete)
	return &DefaultKpiSettingDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DefaultKpiSettingClient) DeleteOne(dks *DefaultKpiSetting) *DefaultKpiSettingDeleteOne {
	return c.DeleteOneID(dks.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DefaultKpiSettingClient) DeleteOneID(id uuid.UUID) *DefaultKpiSettingDeleteOne {
	builder := c.Delete().Where(defaultkpisetting.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DefaultKpiSettingDeleteOne{builder}
}

// Query returns a query builder for DefaultKpiSetting.
func (c *DefaultKpiSettingClient) Query() *DefaultKpiSettingQuery {
	return &DefaultKpiSettingQuery{
		config: c.config,
	}
}

// Get returns a DefaultKpiSetting entity by its id.
func (c *DefaultKpiSettingClient) Get(ctx context.Context, id uuid.UUID) (*DefaultKpiSetting, error) {
	return c.Query().Where(defaultkpisetting.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DefaultKpiSettingClient) GetX(ctx context.Context, id uuid.UUID) *DefaultKpiSetting {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *DefaultKpiSettingClient) Hooks() []Hook {
	return c.hooks.DefaultKpiSetting
}

// DiscountPoolClient is a client for the DiscountPool schema.
type DiscountPoolClient struct {
	config
}

// NewDiscountPoolClient returns a client for the DiscountPool from the given config.
func NewDiscountPoolClient(c config) *DiscountPoolClient {
	return &DiscountPoolClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `discountpool.Hooks(f(g(h())))`.
func (c *DiscountPoolClient) Use(hooks ...Hook) {
	c.hooks.DiscountPool = append(c.hooks.DiscountPool, hooks...)
}

// Create returns a create builder for DiscountPool.
func (c *DiscountPoolClient) Create() *DiscountPoolCreate {
	mutation := newDiscountPoolMutation(c.config, OpCreate)
	return &DiscountPoolCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DiscountPool entities.
func (c *DiscountPoolClient) CreateBulk(builders ...*DiscountPoolCreate) *DiscountPoolCreateBulk {
	return &DiscountPoolCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DiscountPool.
func (c *DiscountPoolClient) Update() *DiscountPoolUpdate {
	mutation := newDiscountPoolMutation(c.config, OpUpdate)
	return &DiscountPoolUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DiscountPoolClient) UpdateOne(dp *DiscountPool) *DiscountPoolUpdateOne {
	mutation := newDiscountPoolMutation(c.config, OpUpdateOne, withDiscountPool(dp))
	return &DiscountPoolUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DiscountPoolClient) UpdateOneID(id uuid.UUID) *DiscountPoolUpdateOne {
	mutation := newDiscountPoolMutation(c.config, OpUpdateOne, withDiscountPoolID(id))
	return &DiscountPoolUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DiscountPool.
func (c *DiscountPoolClient) Delete() *DiscountPoolDelete {
	mutation := newDiscountPoolMutation(c.config, OpDelete)
	return &DiscountPoolDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DiscountPoolClient) DeleteOne(dp *DiscountPool) *DiscountPoolDeleteOne {
	return c.DeleteOneID(dp.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DiscountPoolClient) DeleteOneID(id uuid.UUID) *DiscountPoolDeleteOne {
	builder := c.Delete().Where(discountpool.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DiscountPoolDeleteOne{builder}
}

// Query returns a query builder for DiscountPool.
func (c *DiscountPoolClient) Query() *DiscountPoolQuery {
	return &DiscountPoolQuery{
		config: c.config,
	}
}

// Get returns a DiscountPool entity by its id.
func (c *DiscountPoolClient) Get(ctx context.Context, id uuid.UUID) (*DiscountPool, error) {
	return c.Query().Where(discountpool.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DiscountPoolClient) GetX(ctx context.Context, id uuid.UUID) *DiscountPool {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *DiscountPoolClient) Hooks() []Hook {
	return c.hooks.DiscountPool
}

// EventCouponClient is a client for the EventCoupon schema.
type EventCouponClient struct {
	config
}

// NewEventCouponClient returns a client for the EventCoupon from the given config.
func NewEventCouponClient(c config) *EventCouponClient {
	return &EventCouponClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `eventcoupon.Hooks(f(g(h())))`.
func (c *EventCouponClient) Use(hooks ...Hook) {
	c.hooks.EventCoupon = append(c.hooks.EventCoupon, hooks...)
}

// Create returns a create builder for EventCoupon.
func (c *EventCouponClient) Create() *EventCouponCreate {
	mutation := newEventCouponMutation(c.config, OpCreate)
	return &EventCouponCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EventCoupon entities.
func (c *EventCouponClient) CreateBulk(builders ...*EventCouponCreate) *EventCouponCreateBulk {
	return &EventCouponCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EventCoupon.
func (c *EventCouponClient) Update() *EventCouponUpdate {
	mutation := newEventCouponMutation(c.config, OpUpdate)
	return &EventCouponUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EventCouponClient) UpdateOne(ec *EventCoupon) *EventCouponUpdateOne {
	mutation := newEventCouponMutation(c.config, OpUpdateOne, withEventCoupon(ec))
	return &EventCouponUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EventCouponClient) UpdateOneID(id uuid.UUID) *EventCouponUpdateOne {
	mutation := newEventCouponMutation(c.config, OpUpdateOne, withEventCouponID(id))
	return &EventCouponUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EventCoupon.
func (c *EventCouponClient) Delete() *EventCouponDelete {
	mutation := newEventCouponMutation(c.config, OpDelete)
	return &EventCouponDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *EventCouponClient) DeleteOne(ec *EventCoupon) *EventCouponDeleteOne {
	return c.DeleteOneID(ec.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *EventCouponClient) DeleteOneID(id uuid.UUID) *EventCouponDeleteOne {
	builder := c.Delete().Where(eventcoupon.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EventCouponDeleteOne{builder}
}

// Query returns a query builder for EventCoupon.
func (c *EventCouponClient) Query() *EventCouponQuery {
	return &EventCouponQuery{
		config: c.config,
	}
}

// Get returns a EventCoupon entity by its id.
func (c *EventCouponClient) Get(ctx context.Context, id uuid.UUID) (*EventCoupon, error) {
	return c.Query().Where(eventcoupon.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EventCouponClient) GetX(ctx context.Context, id uuid.UUID) *EventCoupon {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *EventCouponClient) Hooks() []Hook {
	return c.hooks.EventCoupon
}

// RegistrationInvitationClient is a client for the RegistrationInvitation schema.
type RegistrationInvitationClient struct {
	config
}

// NewRegistrationInvitationClient returns a client for the RegistrationInvitation from the given config.
func NewRegistrationInvitationClient(c config) *RegistrationInvitationClient {
	return &RegistrationInvitationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `registrationinvitation.Hooks(f(g(h())))`.
func (c *RegistrationInvitationClient) Use(hooks ...Hook) {
	c.hooks.RegistrationInvitation = append(c.hooks.RegistrationInvitation, hooks...)
}

// Create returns a create builder for RegistrationInvitation.
func (c *RegistrationInvitationClient) Create() *RegistrationInvitationCreate {
	mutation := newRegistrationInvitationMutation(c.config, OpCreate)
	return &RegistrationInvitationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RegistrationInvitation entities.
func (c *RegistrationInvitationClient) CreateBulk(builders ...*RegistrationInvitationCreate) *RegistrationInvitationCreateBulk {
	return &RegistrationInvitationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RegistrationInvitation.
func (c *RegistrationInvitationClient) Update() *RegistrationInvitationUpdate {
	mutation := newRegistrationInvitationMutation(c.config, OpUpdate)
	return &RegistrationInvitationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RegistrationInvitationClient) UpdateOne(ri *RegistrationInvitation) *RegistrationInvitationUpdateOne {
	mutation := newRegistrationInvitationMutation(c.config, OpUpdateOne, withRegistrationInvitation(ri))
	return &RegistrationInvitationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RegistrationInvitationClient) UpdateOneID(id uuid.UUID) *RegistrationInvitationUpdateOne {
	mutation := newRegistrationInvitationMutation(c.config, OpUpdateOne, withRegistrationInvitationID(id))
	return &RegistrationInvitationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RegistrationInvitation.
func (c *RegistrationInvitationClient) Delete() *RegistrationInvitationDelete {
	mutation := newRegistrationInvitationMutation(c.config, OpDelete)
	return &RegistrationInvitationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RegistrationInvitationClient) DeleteOne(ri *RegistrationInvitation) *RegistrationInvitationDeleteOne {
	return c.DeleteOneID(ri.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RegistrationInvitationClient) DeleteOneID(id uuid.UUID) *RegistrationInvitationDeleteOne {
	builder := c.Delete().Where(registrationinvitation.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RegistrationInvitationDeleteOne{builder}
}

// Query returns a query builder for RegistrationInvitation.
func (c *RegistrationInvitationClient) Query() *RegistrationInvitationQuery {
	return &RegistrationInvitationQuery{
		config: c.config,
	}
}

// Get returns a RegistrationInvitation entity by its id.
func (c *RegistrationInvitationClient) Get(ctx context.Context, id uuid.UUID) (*RegistrationInvitation, error) {
	return c.Query().Where(registrationinvitation.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RegistrationInvitationClient) GetX(ctx context.Context, id uuid.UUID) *RegistrationInvitation {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *RegistrationInvitationClient) Hooks() []Hook {
	return c.hooks.RegistrationInvitation
}

// UserInvitationCodeClient is a client for the UserInvitationCode schema.
type UserInvitationCodeClient struct {
	config
}

// NewUserInvitationCodeClient returns a client for the UserInvitationCode from the given config.
func NewUserInvitationCodeClient(c config) *UserInvitationCodeClient {
	return &UserInvitationCodeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userinvitationcode.Hooks(f(g(h())))`.
func (c *UserInvitationCodeClient) Use(hooks ...Hook) {
	c.hooks.UserInvitationCode = append(c.hooks.UserInvitationCode, hooks...)
}

// Create returns a create builder for UserInvitationCode.
func (c *UserInvitationCodeClient) Create() *UserInvitationCodeCreate {
	mutation := newUserInvitationCodeMutation(c.config, OpCreate)
	return &UserInvitationCodeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserInvitationCode entities.
func (c *UserInvitationCodeClient) CreateBulk(builders ...*UserInvitationCodeCreate) *UserInvitationCodeCreateBulk {
	return &UserInvitationCodeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserInvitationCode.
func (c *UserInvitationCodeClient) Update() *UserInvitationCodeUpdate {
	mutation := newUserInvitationCodeMutation(c.config, OpUpdate)
	return &UserInvitationCodeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserInvitationCodeClient) UpdateOne(uic *UserInvitationCode) *UserInvitationCodeUpdateOne {
	mutation := newUserInvitationCodeMutation(c.config, OpUpdateOne, withUserInvitationCode(uic))
	return &UserInvitationCodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserInvitationCodeClient) UpdateOneID(id uuid.UUID) *UserInvitationCodeUpdateOne {
	mutation := newUserInvitationCodeMutation(c.config, OpUpdateOne, withUserInvitationCodeID(id))
	return &UserInvitationCodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserInvitationCode.
func (c *UserInvitationCodeClient) Delete() *UserInvitationCodeDelete {
	mutation := newUserInvitationCodeMutation(c.config, OpDelete)
	return &UserInvitationCodeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserInvitationCodeClient) DeleteOne(uic *UserInvitationCode) *UserInvitationCodeDeleteOne {
	return c.DeleteOneID(uic.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserInvitationCodeClient) DeleteOneID(id uuid.UUID) *UserInvitationCodeDeleteOne {
	builder := c.Delete().Where(userinvitationcode.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserInvitationCodeDeleteOne{builder}
}

// Query returns a query builder for UserInvitationCode.
func (c *UserInvitationCodeClient) Query() *UserInvitationCodeQuery {
	return &UserInvitationCodeQuery{
		config: c.config,
	}
}

// Get returns a UserInvitationCode entity by its id.
func (c *UserInvitationCodeClient) Get(ctx context.Context, id uuid.UUID) (*UserInvitationCode, error) {
	return c.Query().Where(userinvitationcode.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserInvitationCodeClient) GetX(ctx context.Context, id uuid.UUID) *UserInvitationCode {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserInvitationCodeClient) Hooks() []Hook {
	return c.hooks.UserInvitationCode
}

// UserKpiSettingClient is a client for the UserKpiSetting schema.
type UserKpiSettingClient struct {
	config
}

// NewUserKpiSettingClient returns a client for the UserKpiSetting from the given config.
func NewUserKpiSettingClient(c config) *UserKpiSettingClient {
	return &UserKpiSettingClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userkpisetting.Hooks(f(g(h())))`.
func (c *UserKpiSettingClient) Use(hooks ...Hook) {
	c.hooks.UserKpiSetting = append(c.hooks.UserKpiSetting, hooks...)
}

// Create returns a create builder for UserKpiSetting.
func (c *UserKpiSettingClient) Create() *UserKpiSettingCreate {
	mutation := newUserKpiSettingMutation(c.config, OpCreate)
	return &UserKpiSettingCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserKpiSetting entities.
func (c *UserKpiSettingClient) CreateBulk(builders ...*UserKpiSettingCreate) *UserKpiSettingCreateBulk {
	return &UserKpiSettingCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserKpiSetting.
func (c *UserKpiSettingClient) Update() *UserKpiSettingUpdate {
	mutation := newUserKpiSettingMutation(c.config, OpUpdate)
	return &UserKpiSettingUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserKpiSettingClient) UpdateOne(uks *UserKpiSetting) *UserKpiSettingUpdateOne {
	mutation := newUserKpiSettingMutation(c.config, OpUpdateOne, withUserKpiSetting(uks))
	return &UserKpiSettingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserKpiSettingClient) UpdateOneID(id uuid.UUID) *UserKpiSettingUpdateOne {
	mutation := newUserKpiSettingMutation(c.config, OpUpdateOne, withUserKpiSettingID(id))
	return &UserKpiSettingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserKpiSetting.
func (c *UserKpiSettingClient) Delete() *UserKpiSettingDelete {
	mutation := newUserKpiSettingMutation(c.config, OpDelete)
	return &UserKpiSettingDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserKpiSettingClient) DeleteOne(uks *UserKpiSetting) *UserKpiSettingDeleteOne {
	return c.DeleteOneID(uks.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserKpiSettingClient) DeleteOneID(id uuid.UUID) *UserKpiSettingDeleteOne {
	builder := c.Delete().Where(userkpisetting.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserKpiSettingDeleteOne{builder}
}

// Query returns a query builder for UserKpiSetting.
func (c *UserKpiSettingClient) Query() *UserKpiSettingQuery {
	return &UserKpiSettingQuery{
		config: c.config,
	}
}

// Get returns a UserKpiSetting entity by its id.
func (c *UserKpiSettingClient) Get(ctx context.Context, id uuid.UUID) (*UserKpiSetting, error) {
	return c.Query().Where(userkpisetting.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserKpiSettingClient) GetX(ctx context.Context, id uuid.UUID) *UserKpiSetting {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserKpiSettingClient) Hooks() []Hook {
	return c.hooks.UserKpiSetting
}

// UserSpecialReductionClient is a client for the UserSpecialReduction schema.
type UserSpecialReductionClient struct {
	config
}

// NewUserSpecialReductionClient returns a client for the UserSpecialReduction from the given config.
func NewUserSpecialReductionClient(c config) *UserSpecialReductionClient {
	return &UserSpecialReductionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userspecialreduction.Hooks(f(g(h())))`.
func (c *UserSpecialReductionClient) Use(hooks ...Hook) {
	c.hooks.UserSpecialReduction = append(c.hooks.UserSpecialReduction, hooks...)
}

// Create returns a create builder for UserSpecialReduction.
func (c *UserSpecialReductionClient) Create() *UserSpecialReductionCreate {
	mutation := newUserSpecialReductionMutation(c.config, OpCreate)
	return &UserSpecialReductionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserSpecialReduction entities.
func (c *UserSpecialReductionClient) CreateBulk(builders ...*UserSpecialReductionCreate) *UserSpecialReductionCreateBulk {
	return &UserSpecialReductionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserSpecialReduction.
func (c *UserSpecialReductionClient) Update() *UserSpecialReductionUpdate {
	mutation := newUserSpecialReductionMutation(c.config, OpUpdate)
	return &UserSpecialReductionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserSpecialReductionClient) UpdateOne(usr *UserSpecialReduction) *UserSpecialReductionUpdateOne {
	mutation := newUserSpecialReductionMutation(c.config, OpUpdateOne, withUserSpecialReduction(usr))
	return &UserSpecialReductionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserSpecialReductionClient) UpdateOneID(id uuid.UUID) *UserSpecialReductionUpdateOne {
	mutation := newUserSpecialReductionMutation(c.config, OpUpdateOne, withUserSpecialReductionID(id))
	return &UserSpecialReductionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserSpecialReduction.
func (c *UserSpecialReductionClient) Delete() *UserSpecialReductionDelete {
	mutation := newUserSpecialReductionMutation(c.config, OpDelete)
	return &UserSpecialReductionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserSpecialReductionClient) DeleteOne(usr *UserSpecialReduction) *UserSpecialReductionDeleteOne {
	return c.DeleteOneID(usr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserSpecialReductionClient) DeleteOneID(id uuid.UUID) *UserSpecialReductionDeleteOne {
	builder := c.Delete().Where(userspecialreduction.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserSpecialReductionDeleteOne{builder}
}

// Query returns a query builder for UserSpecialReduction.
func (c *UserSpecialReductionClient) Query() *UserSpecialReductionQuery {
	return &UserSpecialReductionQuery{
		config: c.config,
	}
}

// Get returns a UserSpecialReduction entity by its id.
func (c *UserSpecialReductionClient) Get(ctx context.Context, id uuid.UUID) (*UserSpecialReduction, error) {
	return c.Query().Where(userspecialreduction.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserSpecialReductionClient) GetX(ctx context.Context, id uuid.UUID) *UserSpecialReduction {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserSpecialReductionClient) Hooks() []Hook {
	return c.hooks.UserSpecialReduction
}
