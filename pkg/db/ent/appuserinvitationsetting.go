// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/appuserinvitationsetting"
	"github.com/google/uuid"
)

// AppUserInvitationSetting is the model entity for the AppUserInvitationSetting schema.
type AppUserInvitationSetting struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID uuid.UUID `json:"app_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// Count holds the value of the "count" field.
	Count uint32 `json:"count,omitempty"`
	// Discount holds the value of the "discount" field.
	Discount uint32 `json:"discount,omitempty"`
	// CreateAt holds the value of the "create_at" field.
	CreateAt uint32 `json:"create_at,omitempty"`
	// UpdateAt holds the value of the "update_at" field.
	UpdateAt uint32 `json:"update_at,omitempty"`
	// DeleteAt holds the value of the "delete_at" field.
	DeleteAt uint32 `json:"delete_at,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// BadgeLarge holds the value of the "badge_large" field.
	BadgeLarge string `json:"badge_large,omitempty"`
	// BadgeSmall holds the value of the "badge_small" field.
	BadgeSmall string `json:"badge_small,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AppUserInvitationSetting) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case appuserinvitationsetting.FieldCount, appuserinvitationsetting.FieldDiscount, appuserinvitationsetting.FieldCreateAt, appuserinvitationsetting.FieldUpdateAt, appuserinvitationsetting.FieldDeleteAt:
			values[i] = new(sql.NullInt64)
		case appuserinvitationsetting.FieldTitle, appuserinvitationsetting.FieldBadgeLarge, appuserinvitationsetting.FieldBadgeSmall:
			values[i] = new(sql.NullString)
		case appuserinvitationsetting.FieldID, appuserinvitationsetting.FieldAppID, appuserinvitationsetting.FieldUserID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AppUserInvitationSetting", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AppUserInvitationSetting fields.
func (auis *AppUserInvitationSetting) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case appuserinvitationsetting.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				auis.ID = *value
			}
		case appuserinvitationsetting.FieldAppID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value != nil {
				auis.AppID = *value
			}
		case appuserinvitationsetting.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				auis.UserID = *value
			}
		case appuserinvitationsetting.FieldCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field count", values[i])
			} else if value.Valid {
				auis.Count = uint32(value.Int64)
			}
		case appuserinvitationsetting.FieldDiscount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field discount", values[i])
			} else if value.Valid {
				auis.Discount = uint32(value.Int64)
			}
		case appuserinvitationsetting.FieldCreateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				auis.CreateAt = uint32(value.Int64)
			}
		case appuserinvitationsetting.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				auis.UpdateAt = uint32(value.Int64)
			}
		case appuserinvitationsetting.FieldDeleteAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete_at", values[i])
			} else if value.Valid {
				auis.DeleteAt = uint32(value.Int64)
			}
		case appuserinvitationsetting.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				auis.Title = value.String
			}
		case appuserinvitationsetting.FieldBadgeLarge:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field badge_large", values[i])
			} else if value.Valid {
				auis.BadgeLarge = value.String
			}
		case appuserinvitationsetting.FieldBadgeSmall:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field badge_small", values[i])
			} else if value.Valid {
				auis.BadgeSmall = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this AppUserInvitationSetting.
// Note that you need to call AppUserInvitationSetting.Unwrap() before calling this method if this AppUserInvitationSetting
// was returned from a transaction, and the transaction was committed or rolled back.
func (auis *AppUserInvitationSetting) Update() *AppUserInvitationSettingUpdateOne {
	return (&AppUserInvitationSettingClient{config: auis.config}).UpdateOne(auis)
}

// Unwrap unwraps the AppUserInvitationSetting entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (auis *AppUserInvitationSetting) Unwrap() *AppUserInvitationSetting {
	tx, ok := auis.config.driver.(*txDriver)
	if !ok {
		panic("ent: AppUserInvitationSetting is not a transactional entity")
	}
	auis.config.driver = tx.drv
	return auis
}

// String implements the fmt.Stringer.
func (auis *AppUserInvitationSetting) String() string {
	var builder strings.Builder
	builder.WriteString("AppUserInvitationSetting(")
	builder.WriteString(fmt.Sprintf("id=%v", auis.ID))
	builder.WriteString(", app_id=")
	builder.WriteString(fmt.Sprintf("%v", auis.AppID))
	builder.WriteString(", user_id=")
	builder.WriteString(fmt.Sprintf("%v", auis.UserID))
	builder.WriteString(", count=")
	builder.WriteString(fmt.Sprintf("%v", auis.Count))
	builder.WriteString(", discount=")
	builder.WriteString(fmt.Sprintf("%v", auis.Discount))
	builder.WriteString(", create_at=")
	builder.WriteString(fmt.Sprintf("%v", auis.CreateAt))
	builder.WriteString(", update_at=")
	builder.WriteString(fmt.Sprintf("%v", auis.UpdateAt))
	builder.WriteString(", delete_at=")
	builder.WriteString(fmt.Sprintf("%v", auis.DeleteAt))
	builder.WriteString(", title=")
	builder.WriteString(auis.Title)
	builder.WriteString(", badge_large=")
	builder.WriteString(auis.BadgeLarge)
	builder.WriteString(", badge_small=")
	builder.WriteString(auis.BadgeSmall)
	builder.WriteByte(')')
	return builder.String()
}

// AppUserInvitationSettings is a parsable slice of AppUserInvitationSetting.
type AppUserInvitationSettings []*AppUserInvitationSetting

func (auis AppUserInvitationSettings) config(cfg config) {
	for _i := range auis {
		auis[_i].config = cfg
	}
}
