// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/appinvitationsetting"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// AppInvitationSettingUpdate is the builder for updating AppInvitationSetting entities.
type AppInvitationSettingUpdate struct {
	config
	hooks    []Hook
	mutation *AppInvitationSettingMutation
}

// Where appends a list predicates to the AppInvitationSettingUpdate builder.
func (aisu *AppInvitationSettingUpdate) Where(ps ...predicate.AppInvitationSetting) *AppInvitationSettingUpdate {
	aisu.mutation.Where(ps...)
	return aisu
}

// SetAppID sets the "app_id" field.
func (aisu *AppInvitationSettingUpdate) SetAppID(u uuid.UUID) *AppInvitationSettingUpdate {
	aisu.mutation.SetAppID(u)
	return aisu
}

// SetCount sets the "count" field.
func (aisu *AppInvitationSettingUpdate) SetCount(u uint32) *AppInvitationSettingUpdate {
	aisu.mutation.ResetCount()
	aisu.mutation.SetCount(u)
	return aisu
}

// AddCount adds u to the "count" field.
func (aisu *AppInvitationSettingUpdate) AddCount(u int32) *AppInvitationSettingUpdate {
	aisu.mutation.AddCount(u)
	return aisu
}

// SetDiscount sets the "discount" field.
func (aisu *AppInvitationSettingUpdate) SetDiscount(u uint32) *AppInvitationSettingUpdate {
	aisu.mutation.ResetDiscount()
	aisu.mutation.SetDiscount(u)
	return aisu
}

// AddDiscount adds u to the "discount" field.
func (aisu *AppInvitationSettingUpdate) AddDiscount(u int32) *AppInvitationSettingUpdate {
	aisu.mutation.AddDiscount(u)
	return aisu
}

// SetTitle sets the "title" field.
func (aisu *AppInvitationSettingUpdate) SetTitle(s string) *AppInvitationSettingUpdate {
	aisu.mutation.SetTitle(s)
	return aisu
}

// SetBadgeLarge sets the "badge_large" field.
func (aisu *AppInvitationSettingUpdate) SetBadgeLarge(s string) *AppInvitationSettingUpdate {
	aisu.mutation.SetBadgeLarge(s)
	return aisu
}

// SetBadgeSmall sets the "badge_small" field.
func (aisu *AppInvitationSettingUpdate) SetBadgeSmall(s string) *AppInvitationSettingUpdate {
	aisu.mutation.SetBadgeSmall(s)
	return aisu
}

// SetCreateAt sets the "create_at" field.
func (aisu *AppInvitationSettingUpdate) SetCreateAt(u uint32) *AppInvitationSettingUpdate {
	aisu.mutation.ResetCreateAt()
	aisu.mutation.SetCreateAt(u)
	return aisu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (aisu *AppInvitationSettingUpdate) SetNillableCreateAt(u *uint32) *AppInvitationSettingUpdate {
	if u != nil {
		aisu.SetCreateAt(*u)
	}
	return aisu
}

// AddCreateAt adds u to the "create_at" field.
func (aisu *AppInvitationSettingUpdate) AddCreateAt(u int32) *AppInvitationSettingUpdate {
	aisu.mutation.AddCreateAt(u)
	return aisu
}

// SetUpdateAt sets the "update_at" field.
func (aisu *AppInvitationSettingUpdate) SetUpdateAt(u uint32) *AppInvitationSettingUpdate {
	aisu.mutation.ResetUpdateAt()
	aisu.mutation.SetUpdateAt(u)
	return aisu
}

// AddUpdateAt adds u to the "update_at" field.
func (aisu *AppInvitationSettingUpdate) AddUpdateAt(u int32) *AppInvitationSettingUpdate {
	aisu.mutation.AddUpdateAt(u)
	return aisu
}

// SetDeleteAt sets the "delete_at" field.
func (aisu *AppInvitationSettingUpdate) SetDeleteAt(u uint32) *AppInvitationSettingUpdate {
	aisu.mutation.ResetDeleteAt()
	aisu.mutation.SetDeleteAt(u)
	return aisu
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (aisu *AppInvitationSettingUpdate) SetNillableDeleteAt(u *uint32) *AppInvitationSettingUpdate {
	if u != nil {
		aisu.SetDeleteAt(*u)
	}
	return aisu
}

// AddDeleteAt adds u to the "delete_at" field.
func (aisu *AppInvitationSettingUpdate) AddDeleteAt(u int32) *AppInvitationSettingUpdate {
	aisu.mutation.AddDeleteAt(u)
	return aisu
}

// Mutation returns the AppInvitationSettingMutation object of the builder.
func (aisu *AppInvitationSettingUpdate) Mutation() *AppInvitationSettingMutation {
	return aisu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aisu *AppInvitationSettingUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	aisu.defaults()
	if len(aisu.hooks) == 0 {
		affected, err = aisu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppInvitationSettingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			aisu.mutation = mutation
			affected, err = aisu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(aisu.hooks) - 1; i >= 0; i-- {
			if aisu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = aisu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aisu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (aisu *AppInvitationSettingUpdate) SaveX(ctx context.Context) int {
	affected, err := aisu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aisu *AppInvitationSettingUpdate) Exec(ctx context.Context) error {
	_, err := aisu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aisu *AppInvitationSettingUpdate) ExecX(ctx context.Context) {
	if err := aisu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aisu *AppInvitationSettingUpdate) defaults() {
	if _, ok := aisu.mutation.UpdateAt(); !ok {
		v := appinvitationsetting.UpdateDefaultUpdateAt()
		aisu.mutation.SetUpdateAt(v)
	}
}

func (aisu *AppInvitationSettingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   appinvitationsetting.Table,
			Columns: appinvitationsetting.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: appinvitationsetting.FieldID,
			},
		},
	}
	if ps := aisu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aisu.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appinvitationsetting.FieldAppID,
		})
	}
	if value, ok := aisu.mutation.Count(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appinvitationsetting.FieldCount,
		})
	}
	if value, ok := aisu.mutation.AddedCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appinvitationsetting.FieldCount,
		})
	}
	if value, ok := aisu.mutation.Discount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appinvitationsetting.FieldDiscount,
		})
	}
	if value, ok := aisu.mutation.AddedDiscount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appinvitationsetting.FieldDiscount,
		})
	}
	if value, ok := aisu.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appinvitationsetting.FieldTitle,
		})
	}
	if value, ok := aisu.mutation.BadgeLarge(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appinvitationsetting.FieldBadgeLarge,
		})
	}
	if value, ok := aisu.mutation.BadgeSmall(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appinvitationsetting.FieldBadgeSmall,
		})
	}
	if value, ok := aisu.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appinvitationsetting.FieldCreateAt,
		})
	}
	if value, ok := aisu.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appinvitationsetting.FieldCreateAt,
		})
	}
	if value, ok := aisu.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appinvitationsetting.FieldUpdateAt,
		})
	}
	if value, ok := aisu.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appinvitationsetting.FieldUpdateAt,
		})
	}
	if value, ok := aisu.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appinvitationsetting.FieldDeleteAt,
		})
	}
	if value, ok := aisu.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appinvitationsetting.FieldDeleteAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, aisu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appinvitationsetting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AppInvitationSettingUpdateOne is the builder for updating a single AppInvitationSetting entity.
type AppInvitationSettingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AppInvitationSettingMutation
}

// SetAppID sets the "app_id" field.
func (aisuo *AppInvitationSettingUpdateOne) SetAppID(u uuid.UUID) *AppInvitationSettingUpdateOne {
	aisuo.mutation.SetAppID(u)
	return aisuo
}

// SetCount sets the "count" field.
func (aisuo *AppInvitationSettingUpdateOne) SetCount(u uint32) *AppInvitationSettingUpdateOne {
	aisuo.mutation.ResetCount()
	aisuo.mutation.SetCount(u)
	return aisuo
}

// AddCount adds u to the "count" field.
func (aisuo *AppInvitationSettingUpdateOne) AddCount(u int32) *AppInvitationSettingUpdateOne {
	aisuo.mutation.AddCount(u)
	return aisuo
}

// SetDiscount sets the "discount" field.
func (aisuo *AppInvitationSettingUpdateOne) SetDiscount(u uint32) *AppInvitationSettingUpdateOne {
	aisuo.mutation.ResetDiscount()
	aisuo.mutation.SetDiscount(u)
	return aisuo
}

// AddDiscount adds u to the "discount" field.
func (aisuo *AppInvitationSettingUpdateOne) AddDiscount(u int32) *AppInvitationSettingUpdateOne {
	aisuo.mutation.AddDiscount(u)
	return aisuo
}

// SetTitle sets the "title" field.
func (aisuo *AppInvitationSettingUpdateOne) SetTitle(s string) *AppInvitationSettingUpdateOne {
	aisuo.mutation.SetTitle(s)
	return aisuo
}

// SetBadgeLarge sets the "badge_large" field.
func (aisuo *AppInvitationSettingUpdateOne) SetBadgeLarge(s string) *AppInvitationSettingUpdateOne {
	aisuo.mutation.SetBadgeLarge(s)
	return aisuo
}

// SetBadgeSmall sets the "badge_small" field.
func (aisuo *AppInvitationSettingUpdateOne) SetBadgeSmall(s string) *AppInvitationSettingUpdateOne {
	aisuo.mutation.SetBadgeSmall(s)
	return aisuo
}

// SetCreateAt sets the "create_at" field.
func (aisuo *AppInvitationSettingUpdateOne) SetCreateAt(u uint32) *AppInvitationSettingUpdateOne {
	aisuo.mutation.ResetCreateAt()
	aisuo.mutation.SetCreateAt(u)
	return aisuo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (aisuo *AppInvitationSettingUpdateOne) SetNillableCreateAt(u *uint32) *AppInvitationSettingUpdateOne {
	if u != nil {
		aisuo.SetCreateAt(*u)
	}
	return aisuo
}

// AddCreateAt adds u to the "create_at" field.
func (aisuo *AppInvitationSettingUpdateOne) AddCreateAt(u int32) *AppInvitationSettingUpdateOne {
	aisuo.mutation.AddCreateAt(u)
	return aisuo
}

// SetUpdateAt sets the "update_at" field.
func (aisuo *AppInvitationSettingUpdateOne) SetUpdateAt(u uint32) *AppInvitationSettingUpdateOne {
	aisuo.mutation.ResetUpdateAt()
	aisuo.mutation.SetUpdateAt(u)
	return aisuo
}

// AddUpdateAt adds u to the "update_at" field.
func (aisuo *AppInvitationSettingUpdateOne) AddUpdateAt(u int32) *AppInvitationSettingUpdateOne {
	aisuo.mutation.AddUpdateAt(u)
	return aisuo
}

// SetDeleteAt sets the "delete_at" field.
func (aisuo *AppInvitationSettingUpdateOne) SetDeleteAt(u uint32) *AppInvitationSettingUpdateOne {
	aisuo.mutation.ResetDeleteAt()
	aisuo.mutation.SetDeleteAt(u)
	return aisuo
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (aisuo *AppInvitationSettingUpdateOne) SetNillableDeleteAt(u *uint32) *AppInvitationSettingUpdateOne {
	if u != nil {
		aisuo.SetDeleteAt(*u)
	}
	return aisuo
}

// AddDeleteAt adds u to the "delete_at" field.
func (aisuo *AppInvitationSettingUpdateOne) AddDeleteAt(u int32) *AppInvitationSettingUpdateOne {
	aisuo.mutation.AddDeleteAt(u)
	return aisuo
}

// Mutation returns the AppInvitationSettingMutation object of the builder.
func (aisuo *AppInvitationSettingUpdateOne) Mutation() *AppInvitationSettingMutation {
	return aisuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aisuo *AppInvitationSettingUpdateOne) Select(field string, fields ...string) *AppInvitationSettingUpdateOne {
	aisuo.fields = append([]string{field}, fields...)
	return aisuo
}

// Save executes the query and returns the updated AppInvitationSetting entity.
func (aisuo *AppInvitationSettingUpdateOne) Save(ctx context.Context) (*AppInvitationSetting, error) {
	var (
		err  error
		node *AppInvitationSetting
	)
	aisuo.defaults()
	if len(aisuo.hooks) == 0 {
		node, err = aisuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppInvitationSettingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			aisuo.mutation = mutation
			node, err = aisuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(aisuo.hooks) - 1; i >= 0; i-- {
			if aisuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = aisuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aisuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (aisuo *AppInvitationSettingUpdateOne) SaveX(ctx context.Context) *AppInvitationSetting {
	node, err := aisuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aisuo *AppInvitationSettingUpdateOne) Exec(ctx context.Context) error {
	_, err := aisuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aisuo *AppInvitationSettingUpdateOne) ExecX(ctx context.Context) {
	if err := aisuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aisuo *AppInvitationSettingUpdateOne) defaults() {
	if _, ok := aisuo.mutation.UpdateAt(); !ok {
		v := appinvitationsetting.UpdateDefaultUpdateAt()
		aisuo.mutation.SetUpdateAt(v)
	}
}

func (aisuo *AppInvitationSettingUpdateOne) sqlSave(ctx context.Context) (_node *AppInvitationSetting, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   appinvitationsetting.Table,
			Columns: appinvitationsetting.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: appinvitationsetting.FieldID,
			},
		},
	}
	id, ok := aisuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AppInvitationSetting.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aisuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, appinvitationsetting.FieldID)
		for _, f := range fields {
			if !appinvitationsetting.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != appinvitationsetting.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aisuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aisuo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appinvitationsetting.FieldAppID,
		})
	}
	if value, ok := aisuo.mutation.Count(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appinvitationsetting.FieldCount,
		})
	}
	if value, ok := aisuo.mutation.AddedCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appinvitationsetting.FieldCount,
		})
	}
	if value, ok := aisuo.mutation.Discount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appinvitationsetting.FieldDiscount,
		})
	}
	if value, ok := aisuo.mutation.AddedDiscount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appinvitationsetting.FieldDiscount,
		})
	}
	if value, ok := aisuo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appinvitationsetting.FieldTitle,
		})
	}
	if value, ok := aisuo.mutation.BadgeLarge(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appinvitationsetting.FieldBadgeLarge,
		})
	}
	if value, ok := aisuo.mutation.BadgeSmall(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appinvitationsetting.FieldBadgeSmall,
		})
	}
	if value, ok := aisuo.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appinvitationsetting.FieldCreateAt,
		})
	}
	if value, ok := aisuo.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appinvitationsetting.FieldCreateAt,
		})
	}
	if value, ok := aisuo.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appinvitationsetting.FieldUpdateAt,
		})
	}
	if value, ok := aisuo.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appinvitationsetting.FieldUpdateAt,
		})
	}
	if value, ok := aisuo.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appinvitationsetting.FieldDeleteAt,
		})
	}
	if value, ok := aisuo.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appinvitationsetting.FieldDeleteAt,
		})
	}
	_node = &AppInvitationSetting{config: aisuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aisuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appinvitationsetting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
