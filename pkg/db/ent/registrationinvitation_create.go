// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/registrationinvitation"
	"github.com/google/uuid"
)

// RegistrationInvitationCreate is the builder for creating a RegistrationInvitation entity.
type RegistrationInvitationCreate struct {
	config
	mutation *RegistrationInvitationMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateAt sets the "create_at" field.
func (ric *RegistrationInvitationCreate) SetCreateAt(u uint32) *RegistrationInvitationCreate {
	ric.mutation.SetCreateAt(u)
	return ric
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (ric *RegistrationInvitationCreate) SetNillableCreateAt(u *uint32) *RegistrationInvitationCreate {
	if u != nil {
		ric.SetCreateAt(*u)
	}
	return ric
}

// SetUpdateAt sets the "update_at" field.
func (ric *RegistrationInvitationCreate) SetUpdateAt(u uint32) *RegistrationInvitationCreate {
	ric.mutation.SetUpdateAt(u)
	return ric
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (ric *RegistrationInvitationCreate) SetNillableUpdateAt(u *uint32) *RegistrationInvitationCreate {
	if u != nil {
		ric.SetUpdateAt(*u)
	}
	return ric
}

// SetDeleteAt sets the "delete_at" field.
func (ric *RegistrationInvitationCreate) SetDeleteAt(u uint32) *RegistrationInvitationCreate {
	ric.mutation.SetDeleteAt(u)
	return ric
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (ric *RegistrationInvitationCreate) SetNillableDeleteAt(u *uint32) *RegistrationInvitationCreate {
	if u != nil {
		ric.SetDeleteAt(*u)
	}
	return ric
}

// SetInviterID sets the "inviter_id" field.
func (ric *RegistrationInvitationCreate) SetInviterID(u uuid.UUID) *RegistrationInvitationCreate {
	ric.mutation.SetInviterID(u)
	return ric
}

// SetInviteeID sets the "invitee_id" field.
func (ric *RegistrationInvitationCreate) SetInviteeID(u uuid.UUID) *RegistrationInvitationCreate {
	ric.mutation.SetInviteeID(u)
	return ric
}

// SetAppID sets the "app_id" field.
func (ric *RegistrationInvitationCreate) SetAppID(u uuid.UUID) *RegistrationInvitationCreate {
	ric.mutation.SetAppID(u)
	return ric
}

// SetID sets the "id" field.
func (ric *RegistrationInvitationCreate) SetID(u uuid.UUID) *RegistrationInvitationCreate {
	ric.mutation.SetID(u)
	return ric
}

// Mutation returns the RegistrationInvitationMutation object of the builder.
func (ric *RegistrationInvitationCreate) Mutation() *RegistrationInvitationMutation {
	return ric.mutation
}

// Save creates the RegistrationInvitation in the database.
func (ric *RegistrationInvitationCreate) Save(ctx context.Context) (*RegistrationInvitation, error) {
	var (
		err  error
		node *RegistrationInvitation
	)
	ric.defaults()
	if len(ric.hooks) == 0 {
		if err = ric.check(); err != nil {
			return nil, err
		}
		node, err = ric.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RegistrationInvitationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ric.check(); err != nil {
				return nil, err
			}
			ric.mutation = mutation
			if node, err = ric.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ric.hooks) - 1; i >= 0; i-- {
			if ric.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ric.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ric.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ric *RegistrationInvitationCreate) SaveX(ctx context.Context) *RegistrationInvitation {
	v, err := ric.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ric *RegistrationInvitationCreate) Exec(ctx context.Context) error {
	_, err := ric.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ric *RegistrationInvitationCreate) ExecX(ctx context.Context) {
	if err := ric.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ric *RegistrationInvitationCreate) defaults() {
	if _, ok := ric.mutation.CreateAt(); !ok {
		v := registrationinvitation.DefaultCreateAt()
		ric.mutation.SetCreateAt(v)
	}
	if _, ok := ric.mutation.UpdateAt(); !ok {
		v := registrationinvitation.DefaultUpdateAt()
		ric.mutation.SetUpdateAt(v)
	}
	if _, ok := ric.mutation.DeleteAt(); !ok {
		v := registrationinvitation.DefaultDeleteAt()
		ric.mutation.SetDeleteAt(v)
	}
	if _, ok := ric.mutation.ID(); !ok {
		v := registrationinvitation.DefaultID()
		ric.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ric *RegistrationInvitationCreate) check() error {
	if _, ok := ric.mutation.CreateAt(); !ok {
		return &ValidationError{Name: "create_at", err: errors.New(`ent: missing required field "create_at"`)}
	}
	if _, ok := ric.mutation.UpdateAt(); !ok {
		return &ValidationError{Name: "update_at", err: errors.New(`ent: missing required field "update_at"`)}
	}
	if _, ok := ric.mutation.DeleteAt(); !ok {
		return &ValidationError{Name: "delete_at", err: errors.New(`ent: missing required field "delete_at"`)}
	}
	if _, ok := ric.mutation.InviterID(); !ok {
		return &ValidationError{Name: "inviter_id", err: errors.New(`ent: missing required field "inviter_id"`)}
	}
	if _, ok := ric.mutation.InviteeID(); !ok {
		return &ValidationError{Name: "invitee_id", err: errors.New(`ent: missing required field "invitee_id"`)}
	}
	if _, ok := ric.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`ent: missing required field "app_id"`)}
	}
	return nil
}

func (ric *RegistrationInvitationCreate) sqlSave(ctx context.Context) (*RegistrationInvitation, error) {
	_node, _spec := ric.createSpec()
	if err := sqlgraph.CreateNode(ctx, ric.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		_node.ID = _spec.ID.Value.(uuid.UUID)
	}
	return _node, nil
}

func (ric *RegistrationInvitationCreate) createSpec() (*RegistrationInvitation, *sqlgraph.CreateSpec) {
	var (
		_node = &RegistrationInvitation{config: ric.config}
		_spec = &sqlgraph.CreateSpec{
			Table: registrationinvitation.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: registrationinvitation.FieldID,
			},
		}
	)
	_spec.OnConflict = ric.conflict
	if id, ok := ric.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ric.mutation.CreateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: registrationinvitation.FieldCreateAt,
		})
		_node.CreateAt = value
	}
	if value, ok := ric.mutation.UpdateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: registrationinvitation.FieldUpdateAt,
		})
		_node.UpdateAt = value
	}
	if value, ok := ric.mutation.DeleteAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: registrationinvitation.FieldDeleteAt,
		})
		_node.DeleteAt = value
	}
	if value, ok := ric.mutation.InviterID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: registrationinvitation.FieldInviterID,
		})
		_node.InviterID = value
	}
	if value, ok := ric.mutation.InviteeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: registrationinvitation.FieldInviteeID,
		})
		_node.InviteeID = value
	}
	if value, ok := ric.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: registrationinvitation.FieldAppID,
		})
		_node.AppID = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.RegistrationInvitation.Create().
//		SetCreateAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RegistrationInvitationUpsert) {
//			SetCreateAt(v+v).
//		}).
//		Exec(ctx)
//
func (ric *RegistrationInvitationCreate) OnConflict(opts ...sql.ConflictOption) *RegistrationInvitationUpsertOne {
	ric.conflict = opts
	return &RegistrationInvitationUpsertOne{
		create: ric,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.RegistrationInvitation.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (ric *RegistrationInvitationCreate) OnConflictColumns(columns ...string) *RegistrationInvitationUpsertOne {
	ric.conflict = append(ric.conflict, sql.ConflictColumns(columns...))
	return &RegistrationInvitationUpsertOne{
		create: ric,
	}
}

type (
	// RegistrationInvitationUpsertOne is the builder for "upsert"-ing
	//  one RegistrationInvitation node.
	RegistrationInvitationUpsertOne struct {
		create *RegistrationInvitationCreate
	}

	// RegistrationInvitationUpsert is the "OnConflict" setter.
	RegistrationInvitationUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreateAt sets the "create_at" field.
func (u *RegistrationInvitationUpsert) SetCreateAt(v uint32) *RegistrationInvitationUpsert {
	u.Set(registrationinvitation.FieldCreateAt, v)
	return u
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *RegistrationInvitationUpsert) UpdateCreateAt() *RegistrationInvitationUpsert {
	u.SetExcluded(registrationinvitation.FieldCreateAt)
	return u
}

// SetUpdateAt sets the "update_at" field.
func (u *RegistrationInvitationUpsert) SetUpdateAt(v uint32) *RegistrationInvitationUpsert {
	u.Set(registrationinvitation.FieldUpdateAt, v)
	return u
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *RegistrationInvitationUpsert) UpdateUpdateAt() *RegistrationInvitationUpsert {
	u.SetExcluded(registrationinvitation.FieldUpdateAt)
	return u
}

// SetDeleteAt sets the "delete_at" field.
func (u *RegistrationInvitationUpsert) SetDeleteAt(v uint32) *RegistrationInvitationUpsert {
	u.Set(registrationinvitation.FieldDeleteAt, v)
	return u
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *RegistrationInvitationUpsert) UpdateDeleteAt() *RegistrationInvitationUpsert {
	u.SetExcluded(registrationinvitation.FieldDeleteAt)
	return u
}

// SetInviterID sets the "inviter_id" field.
func (u *RegistrationInvitationUpsert) SetInviterID(v uuid.UUID) *RegistrationInvitationUpsert {
	u.Set(registrationinvitation.FieldInviterID, v)
	return u
}

// UpdateInviterID sets the "inviter_id" field to the value that was provided on create.
func (u *RegistrationInvitationUpsert) UpdateInviterID() *RegistrationInvitationUpsert {
	u.SetExcluded(registrationinvitation.FieldInviterID)
	return u
}

// SetInviteeID sets the "invitee_id" field.
func (u *RegistrationInvitationUpsert) SetInviteeID(v uuid.UUID) *RegistrationInvitationUpsert {
	u.Set(registrationinvitation.FieldInviteeID, v)
	return u
}

// UpdateInviteeID sets the "invitee_id" field to the value that was provided on create.
func (u *RegistrationInvitationUpsert) UpdateInviteeID() *RegistrationInvitationUpsert {
	u.SetExcluded(registrationinvitation.FieldInviteeID)
	return u
}

// SetAppID sets the "app_id" field.
func (u *RegistrationInvitationUpsert) SetAppID(v uuid.UUID) *RegistrationInvitationUpsert {
	u.Set(registrationinvitation.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *RegistrationInvitationUpsert) UpdateAppID() *RegistrationInvitationUpsert {
	u.SetExcluded(registrationinvitation.FieldAppID)
	return u
}

// UpdateNewValues updates the fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.RegistrationInvitation.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(registrationinvitation.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *RegistrationInvitationUpsertOne) UpdateNewValues() *RegistrationInvitationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(registrationinvitation.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.RegistrationInvitation.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *RegistrationInvitationUpsertOne) Ignore() *RegistrationInvitationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RegistrationInvitationUpsertOne) DoNothing() *RegistrationInvitationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RegistrationInvitationCreate.OnConflict
// documentation for more info.
func (u *RegistrationInvitationUpsertOne) Update(set func(*RegistrationInvitationUpsert)) *RegistrationInvitationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RegistrationInvitationUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreateAt sets the "create_at" field.
func (u *RegistrationInvitationUpsertOne) SetCreateAt(v uint32) *RegistrationInvitationUpsertOne {
	return u.Update(func(s *RegistrationInvitationUpsert) {
		s.SetCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *RegistrationInvitationUpsertOne) UpdateCreateAt() *RegistrationInvitationUpsertOne {
	return u.Update(func(s *RegistrationInvitationUpsert) {
		s.UpdateCreateAt()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *RegistrationInvitationUpsertOne) SetUpdateAt(v uint32) *RegistrationInvitationUpsertOne {
	return u.Update(func(s *RegistrationInvitationUpsert) {
		s.SetUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *RegistrationInvitationUpsertOne) UpdateUpdateAt() *RegistrationInvitationUpsertOne {
	return u.Update(func(s *RegistrationInvitationUpsert) {
		s.UpdateUpdateAt()
	})
}

// SetDeleteAt sets the "delete_at" field.
func (u *RegistrationInvitationUpsertOne) SetDeleteAt(v uint32) *RegistrationInvitationUpsertOne {
	return u.Update(func(s *RegistrationInvitationUpsert) {
		s.SetDeleteAt(v)
	})
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *RegistrationInvitationUpsertOne) UpdateDeleteAt() *RegistrationInvitationUpsertOne {
	return u.Update(func(s *RegistrationInvitationUpsert) {
		s.UpdateDeleteAt()
	})
}

// SetInviterID sets the "inviter_id" field.
func (u *RegistrationInvitationUpsertOne) SetInviterID(v uuid.UUID) *RegistrationInvitationUpsertOne {
	return u.Update(func(s *RegistrationInvitationUpsert) {
		s.SetInviterID(v)
	})
}

// UpdateInviterID sets the "inviter_id" field to the value that was provided on create.
func (u *RegistrationInvitationUpsertOne) UpdateInviterID() *RegistrationInvitationUpsertOne {
	return u.Update(func(s *RegistrationInvitationUpsert) {
		s.UpdateInviterID()
	})
}

// SetInviteeID sets the "invitee_id" field.
func (u *RegistrationInvitationUpsertOne) SetInviteeID(v uuid.UUID) *RegistrationInvitationUpsertOne {
	return u.Update(func(s *RegistrationInvitationUpsert) {
		s.SetInviteeID(v)
	})
}

// UpdateInviteeID sets the "invitee_id" field to the value that was provided on create.
func (u *RegistrationInvitationUpsertOne) UpdateInviteeID() *RegistrationInvitationUpsertOne {
	return u.Update(func(s *RegistrationInvitationUpsert) {
		s.UpdateInviteeID()
	})
}

// SetAppID sets the "app_id" field.
func (u *RegistrationInvitationUpsertOne) SetAppID(v uuid.UUID) *RegistrationInvitationUpsertOne {
	return u.Update(func(s *RegistrationInvitationUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *RegistrationInvitationUpsertOne) UpdateAppID() *RegistrationInvitationUpsertOne {
	return u.Update(func(s *RegistrationInvitationUpsert) {
		s.UpdateAppID()
	})
}

// Exec executes the query.
func (u *RegistrationInvitationUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RegistrationInvitationCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RegistrationInvitationUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *RegistrationInvitationUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: RegistrationInvitationUpsertOne.ID is not supported by MySQL driver. Use RegistrationInvitationUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *RegistrationInvitationUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// RegistrationInvitationCreateBulk is the builder for creating many RegistrationInvitation entities in bulk.
type RegistrationInvitationCreateBulk struct {
	config
	builders []*RegistrationInvitationCreate
	conflict []sql.ConflictOption
}

// Save creates the RegistrationInvitation entities in the database.
func (ricb *RegistrationInvitationCreateBulk) Save(ctx context.Context) ([]*RegistrationInvitation, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ricb.builders))
	nodes := make([]*RegistrationInvitation, len(ricb.builders))
	mutators := make([]Mutator, len(ricb.builders))
	for i := range ricb.builders {
		func(i int, root context.Context) {
			builder := ricb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RegistrationInvitationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ricb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ricb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ricb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ricb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ricb *RegistrationInvitationCreateBulk) SaveX(ctx context.Context) []*RegistrationInvitation {
	v, err := ricb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ricb *RegistrationInvitationCreateBulk) Exec(ctx context.Context) error {
	_, err := ricb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ricb *RegistrationInvitationCreateBulk) ExecX(ctx context.Context) {
	if err := ricb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.RegistrationInvitation.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RegistrationInvitationUpsert) {
//			SetCreateAt(v+v).
//		}).
//		Exec(ctx)
//
func (ricb *RegistrationInvitationCreateBulk) OnConflict(opts ...sql.ConflictOption) *RegistrationInvitationUpsertBulk {
	ricb.conflict = opts
	return &RegistrationInvitationUpsertBulk{
		create: ricb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.RegistrationInvitation.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (ricb *RegistrationInvitationCreateBulk) OnConflictColumns(columns ...string) *RegistrationInvitationUpsertBulk {
	ricb.conflict = append(ricb.conflict, sql.ConflictColumns(columns...))
	return &RegistrationInvitationUpsertBulk{
		create: ricb,
	}
}

// RegistrationInvitationUpsertBulk is the builder for "upsert"-ing
// a bulk of RegistrationInvitation nodes.
type RegistrationInvitationUpsertBulk struct {
	create *RegistrationInvitationCreateBulk
}

// UpdateNewValues updates the fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.RegistrationInvitation.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(registrationinvitation.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *RegistrationInvitationUpsertBulk) UpdateNewValues() *RegistrationInvitationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(registrationinvitation.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.RegistrationInvitation.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *RegistrationInvitationUpsertBulk) Ignore() *RegistrationInvitationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RegistrationInvitationUpsertBulk) DoNothing() *RegistrationInvitationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RegistrationInvitationCreateBulk.OnConflict
// documentation for more info.
func (u *RegistrationInvitationUpsertBulk) Update(set func(*RegistrationInvitationUpsert)) *RegistrationInvitationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RegistrationInvitationUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreateAt sets the "create_at" field.
func (u *RegistrationInvitationUpsertBulk) SetCreateAt(v uint32) *RegistrationInvitationUpsertBulk {
	return u.Update(func(s *RegistrationInvitationUpsert) {
		s.SetCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *RegistrationInvitationUpsertBulk) UpdateCreateAt() *RegistrationInvitationUpsertBulk {
	return u.Update(func(s *RegistrationInvitationUpsert) {
		s.UpdateCreateAt()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *RegistrationInvitationUpsertBulk) SetUpdateAt(v uint32) *RegistrationInvitationUpsertBulk {
	return u.Update(func(s *RegistrationInvitationUpsert) {
		s.SetUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *RegistrationInvitationUpsertBulk) UpdateUpdateAt() *RegistrationInvitationUpsertBulk {
	return u.Update(func(s *RegistrationInvitationUpsert) {
		s.UpdateUpdateAt()
	})
}

// SetDeleteAt sets the "delete_at" field.
func (u *RegistrationInvitationUpsertBulk) SetDeleteAt(v uint32) *RegistrationInvitationUpsertBulk {
	return u.Update(func(s *RegistrationInvitationUpsert) {
		s.SetDeleteAt(v)
	})
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *RegistrationInvitationUpsertBulk) UpdateDeleteAt() *RegistrationInvitationUpsertBulk {
	return u.Update(func(s *RegistrationInvitationUpsert) {
		s.UpdateDeleteAt()
	})
}

// SetInviterID sets the "inviter_id" field.
func (u *RegistrationInvitationUpsertBulk) SetInviterID(v uuid.UUID) *RegistrationInvitationUpsertBulk {
	return u.Update(func(s *RegistrationInvitationUpsert) {
		s.SetInviterID(v)
	})
}

// UpdateInviterID sets the "inviter_id" field to the value that was provided on create.
func (u *RegistrationInvitationUpsertBulk) UpdateInviterID() *RegistrationInvitationUpsertBulk {
	return u.Update(func(s *RegistrationInvitationUpsert) {
		s.UpdateInviterID()
	})
}

// SetInviteeID sets the "invitee_id" field.
func (u *RegistrationInvitationUpsertBulk) SetInviteeID(v uuid.UUID) *RegistrationInvitationUpsertBulk {
	return u.Update(func(s *RegistrationInvitationUpsert) {
		s.SetInviteeID(v)
	})
}

// UpdateInviteeID sets the "invitee_id" field to the value that was provided on create.
func (u *RegistrationInvitationUpsertBulk) UpdateInviteeID() *RegistrationInvitationUpsertBulk {
	return u.Update(func(s *RegistrationInvitationUpsert) {
		s.UpdateInviteeID()
	})
}

// SetAppID sets the "app_id" field.
func (u *RegistrationInvitationUpsertBulk) SetAppID(v uuid.UUID) *RegistrationInvitationUpsertBulk {
	return u.Update(func(s *RegistrationInvitationUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *RegistrationInvitationUpsertBulk) UpdateAppID() *RegistrationInvitationUpsertBulk {
	return u.Update(func(s *RegistrationInvitationUpsert) {
		s.UpdateAppID()
	})
}

// Exec executes the query.
func (u *RegistrationInvitationUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the RegistrationInvitationCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RegistrationInvitationCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RegistrationInvitationUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
