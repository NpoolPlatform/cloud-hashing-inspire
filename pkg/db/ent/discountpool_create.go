// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/discountpool"
	"github.com/google/uuid"
)

// DiscountPoolCreate is the builder for creating a DiscountPool entity.
type DiscountPoolCreate struct {
	config
	mutation *DiscountPoolMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetAppID sets the "app_id" field.
func (dpc *DiscountPoolCreate) SetAppID(u uuid.UUID) *DiscountPoolCreate {
	dpc.mutation.SetAppID(u)
	return dpc
}

// SetDiscount sets the "discount" field.
func (dpc *DiscountPoolCreate) SetDiscount(u uint32) *DiscountPoolCreate {
	dpc.mutation.SetDiscount(u)
	return dpc
}

// SetReleaseByUserID sets the "release_by_user_id" field.
func (dpc *DiscountPoolCreate) SetReleaseByUserID(u uuid.UUID) *DiscountPoolCreate {
	dpc.mutation.SetReleaseByUserID(u)
	return dpc
}

// SetStart sets the "start" field.
func (dpc *DiscountPoolCreate) SetStart(u uint32) *DiscountPoolCreate {
	dpc.mutation.SetStart(u)
	return dpc
}

// SetDurationDays sets the "duration_days" field.
func (dpc *DiscountPoolCreate) SetDurationDays(i int32) *DiscountPoolCreate {
	dpc.mutation.SetDurationDays(i)
	return dpc
}

// SetMessage sets the "message" field.
func (dpc *DiscountPoolCreate) SetMessage(s string) *DiscountPoolCreate {
	dpc.mutation.SetMessage(s)
	return dpc
}

// SetName sets the "name" field.
func (dpc *DiscountPoolCreate) SetName(s string) *DiscountPoolCreate {
	dpc.mutation.SetName(s)
	return dpc
}

// SetCreateAt sets the "create_at" field.
func (dpc *DiscountPoolCreate) SetCreateAt(u uint32) *DiscountPoolCreate {
	dpc.mutation.SetCreateAt(u)
	return dpc
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (dpc *DiscountPoolCreate) SetNillableCreateAt(u *uint32) *DiscountPoolCreate {
	if u != nil {
		dpc.SetCreateAt(*u)
	}
	return dpc
}

// SetUpdateAt sets the "update_at" field.
func (dpc *DiscountPoolCreate) SetUpdateAt(u uint32) *DiscountPoolCreate {
	dpc.mutation.SetUpdateAt(u)
	return dpc
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (dpc *DiscountPoolCreate) SetNillableUpdateAt(u *uint32) *DiscountPoolCreate {
	if u != nil {
		dpc.SetUpdateAt(*u)
	}
	return dpc
}

// SetDeleteAt sets the "delete_at" field.
func (dpc *DiscountPoolCreate) SetDeleteAt(u uint32) *DiscountPoolCreate {
	dpc.mutation.SetDeleteAt(u)
	return dpc
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (dpc *DiscountPoolCreate) SetNillableDeleteAt(u *uint32) *DiscountPoolCreate {
	if u != nil {
		dpc.SetDeleteAt(*u)
	}
	return dpc
}

// SetID sets the "id" field.
func (dpc *DiscountPoolCreate) SetID(u uuid.UUID) *DiscountPoolCreate {
	dpc.mutation.SetID(u)
	return dpc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (dpc *DiscountPoolCreate) SetNillableID(u *uuid.UUID) *DiscountPoolCreate {
	if u != nil {
		dpc.SetID(*u)
	}
	return dpc
}

// Mutation returns the DiscountPoolMutation object of the builder.
func (dpc *DiscountPoolCreate) Mutation() *DiscountPoolMutation {
	return dpc.mutation
}

// Save creates the DiscountPool in the database.
func (dpc *DiscountPoolCreate) Save(ctx context.Context) (*DiscountPool, error) {
	var (
		err  error
		node *DiscountPool
	)
	dpc.defaults()
	if len(dpc.hooks) == 0 {
		if err = dpc.check(); err != nil {
			return nil, err
		}
		node, err = dpc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DiscountPoolMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dpc.check(); err != nil {
				return nil, err
			}
			dpc.mutation = mutation
			if node, err = dpc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(dpc.hooks) - 1; i >= 0; i-- {
			if dpc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dpc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, dpc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*DiscountPool)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from DiscountPoolMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (dpc *DiscountPoolCreate) SaveX(ctx context.Context) *DiscountPool {
	v, err := dpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dpc *DiscountPoolCreate) Exec(ctx context.Context) error {
	_, err := dpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dpc *DiscountPoolCreate) ExecX(ctx context.Context) {
	if err := dpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dpc *DiscountPoolCreate) defaults() {
	if _, ok := dpc.mutation.CreateAt(); !ok {
		v := discountpool.DefaultCreateAt()
		dpc.mutation.SetCreateAt(v)
	}
	if _, ok := dpc.mutation.UpdateAt(); !ok {
		v := discountpool.DefaultUpdateAt()
		dpc.mutation.SetUpdateAt(v)
	}
	if _, ok := dpc.mutation.DeleteAt(); !ok {
		v := discountpool.DefaultDeleteAt()
		dpc.mutation.SetDeleteAt(v)
	}
	if _, ok := dpc.mutation.ID(); !ok {
		v := discountpool.DefaultID()
		dpc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dpc *DiscountPoolCreate) check() error {
	if _, ok := dpc.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`ent: missing required field "DiscountPool.app_id"`)}
	}
	if _, ok := dpc.mutation.Discount(); !ok {
		return &ValidationError{Name: "discount", err: errors.New(`ent: missing required field "DiscountPool.discount"`)}
	}
	if _, ok := dpc.mutation.ReleaseByUserID(); !ok {
		return &ValidationError{Name: "release_by_user_id", err: errors.New(`ent: missing required field "DiscountPool.release_by_user_id"`)}
	}
	if _, ok := dpc.mutation.Start(); !ok {
		return &ValidationError{Name: "start", err: errors.New(`ent: missing required field "DiscountPool.start"`)}
	}
	if _, ok := dpc.mutation.DurationDays(); !ok {
		return &ValidationError{Name: "duration_days", err: errors.New(`ent: missing required field "DiscountPool.duration_days"`)}
	}
	if _, ok := dpc.mutation.Message(); !ok {
		return &ValidationError{Name: "message", err: errors.New(`ent: missing required field "DiscountPool.message"`)}
	}
	if v, ok := dpc.mutation.Message(); ok {
		if err := discountpool.MessageValidator(v); err != nil {
			return &ValidationError{Name: "message", err: fmt.Errorf(`ent: validator failed for field "DiscountPool.message": %w`, err)}
		}
	}
	if _, ok := dpc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "DiscountPool.name"`)}
	}
	if v, ok := dpc.mutation.Name(); ok {
		if err := discountpool.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "DiscountPool.name": %w`, err)}
		}
	}
	if _, ok := dpc.mutation.CreateAt(); !ok {
		return &ValidationError{Name: "create_at", err: errors.New(`ent: missing required field "DiscountPool.create_at"`)}
	}
	if _, ok := dpc.mutation.UpdateAt(); !ok {
		return &ValidationError{Name: "update_at", err: errors.New(`ent: missing required field "DiscountPool.update_at"`)}
	}
	if _, ok := dpc.mutation.DeleteAt(); !ok {
		return &ValidationError{Name: "delete_at", err: errors.New(`ent: missing required field "DiscountPool.delete_at"`)}
	}
	return nil
}

func (dpc *DiscountPoolCreate) sqlSave(ctx context.Context) (*DiscountPool, error) {
	_node, _spec := dpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (dpc *DiscountPoolCreate) createSpec() (*DiscountPool, *sqlgraph.CreateSpec) {
	var (
		_node = &DiscountPool{config: dpc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: discountpool.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: discountpool.FieldID,
			},
		}
	)
	_spec.OnConflict = dpc.conflict
	if id, ok := dpc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := dpc.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: discountpool.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := dpc.mutation.Discount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: discountpool.FieldDiscount,
		})
		_node.Discount = value
	}
	if value, ok := dpc.mutation.ReleaseByUserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: discountpool.FieldReleaseByUserID,
		})
		_node.ReleaseByUserID = value
	}
	if value, ok := dpc.mutation.Start(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: discountpool.FieldStart,
		})
		_node.Start = value
	}
	if value, ok := dpc.mutation.DurationDays(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: discountpool.FieldDurationDays,
		})
		_node.DurationDays = value
	}
	if value, ok := dpc.mutation.Message(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: discountpool.FieldMessage,
		})
		_node.Message = value
	}
	if value, ok := dpc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: discountpool.FieldName,
		})
		_node.Name = value
	}
	if value, ok := dpc.mutation.CreateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: discountpool.FieldCreateAt,
		})
		_node.CreateAt = value
	}
	if value, ok := dpc.mutation.UpdateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: discountpool.FieldUpdateAt,
		})
		_node.UpdateAt = value
	}
	if value, ok := dpc.mutation.DeleteAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: discountpool.FieldDeleteAt,
		})
		_node.DeleteAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DiscountPool.Create().
//		SetAppID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DiscountPoolUpsert) {
//			SetAppID(v+v).
//		}).
//		Exec(ctx)
//
func (dpc *DiscountPoolCreate) OnConflict(opts ...sql.ConflictOption) *DiscountPoolUpsertOne {
	dpc.conflict = opts
	return &DiscountPoolUpsertOne{
		create: dpc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DiscountPool.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (dpc *DiscountPoolCreate) OnConflictColumns(columns ...string) *DiscountPoolUpsertOne {
	dpc.conflict = append(dpc.conflict, sql.ConflictColumns(columns...))
	return &DiscountPoolUpsertOne{
		create: dpc,
	}
}

type (
	// DiscountPoolUpsertOne is the builder for "upsert"-ing
	//  one DiscountPool node.
	DiscountPoolUpsertOne struct {
		create *DiscountPoolCreate
	}

	// DiscountPoolUpsert is the "OnConflict" setter.
	DiscountPoolUpsert struct {
		*sql.UpdateSet
	}
)

// SetAppID sets the "app_id" field.
func (u *DiscountPoolUpsert) SetAppID(v uuid.UUID) *DiscountPoolUpsert {
	u.Set(discountpool.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *DiscountPoolUpsert) UpdateAppID() *DiscountPoolUpsert {
	u.SetExcluded(discountpool.FieldAppID)
	return u
}

// SetDiscount sets the "discount" field.
func (u *DiscountPoolUpsert) SetDiscount(v uint32) *DiscountPoolUpsert {
	u.Set(discountpool.FieldDiscount, v)
	return u
}

// UpdateDiscount sets the "discount" field to the value that was provided on create.
func (u *DiscountPoolUpsert) UpdateDiscount() *DiscountPoolUpsert {
	u.SetExcluded(discountpool.FieldDiscount)
	return u
}

// AddDiscount adds v to the "discount" field.
func (u *DiscountPoolUpsert) AddDiscount(v uint32) *DiscountPoolUpsert {
	u.Add(discountpool.FieldDiscount, v)
	return u
}

// SetReleaseByUserID sets the "release_by_user_id" field.
func (u *DiscountPoolUpsert) SetReleaseByUserID(v uuid.UUID) *DiscountPoolUpsert {
	u.Set(discountpool.FieldReleaseByUserID, v)
	return u
}

// UpdateReleaseByUserID sets the "release_by_user_id" field to the value that was provided on create.
func (u *DiscountPoolUpsert) UpdateReleaseByUserID() *DiscountPoolUpsert {
	u.SetExcluded(discountpool.FieldReleaseByUserID)
	return u
}

// SetStart sets the "start" field.
func (u *DiscountPoolUpsert) SetStart(v uint32) *DiscountPoolUpsert {
	u.Set(discountpool.FieldStart, v)
	return u
}

// UpdateStart sets the "start" field to the value that was provided on create.
func (u *DiscountPoolUpsert) UpdateStart() *DiscountPoolUpsert {
	u.SetExcluded(discountpool.FieldStart)
	return u
}

// AddStart adds v to the "start" field.
func (u *DiscountPoolUpsert) AddStart(v uint32) *DiscountPoolUpsert {
	u.Add(discountpool.FieldStart, v)
	return u
}

// SetDurationDays sets the "duration_days" field.
func (u *DiscountPoolUpsert) SetDurationDays(v int32) *DiscountPoolUpsert {
	u.Set(discountpool.FieldDurationDays, v)
	return u
}

// UpdateDurationDays sets the "duration_days" field to the value that was provided on create.
func (u *DiscountPoolUpsert) UpdateDurationDays() *DiscountPoolUpsert {
	u.SetExcluded(discountpool.FieldDurationDays)
	return u
}

// AddDurationDays adds v to the "duration_days" field.
func (u *DiscountPoolUpsert) AddDurationDays(v int32) *DiscountPoolUpsert {
	u.Add(discountpool.FieldDurationDays, v)
	return u
}

// SetMessage sets the "message" field.
func (u *DiscountPoolUpsert) SetMessage(v string) *DiscountPoolUpsert {
	u.Set(discountpool.FieldMessage, v)
	return u
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *DiscountPoolUpsert) UpdateMessage() *DiscountPoolUpsert {
	u.SetExcluded(discountpool.FieldMessage)
	return u
}

// SetName sets the "name" field.
func (u *DiscountPoolUpsert) SetName(v string) *DiscountPoolUpsert {
	u.Set(discountpool.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *DiscountPoolUpsert) UpdateName() *DiscountPoolUpsert {
	u.SetExcluded(discountpool.FieldName)
	return u
}

// SetCreateAt sets the "create_at" field.
func (u *DiscountPoolUpsert) SetCreateAt(v uint32) *DiscountPoolUpsert {
	u.Set(discountpool.FieldCreateAt, v)
	return u
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *DiscountPoolUpsert) UpdateCreateAt() *DiscountPoolUpsert {
	u.SetExcluded(discountpool.FieldCreateAt)
	return u
}

// AddCreateAt adds v to the "create_at" field.
func (u *DiscountPoolUpsert) AddCreateAt(v uint32) *DiscountPoolUpsert {
	u.Add(discountpool.FieldCreateAt, v)
	return u
}

// SetUpdateAt sets the "update_at" field.
func (u *DiscountPoolUpsert) SetUpdateAt(v uint32) *DiscountPoolUpsert {
	u.Set(discountpool.FieldUpdateAt, v)
	return u
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *DiscountPoolUpsert) UpdateUpdateAt() *DiscountPoolUpsert {
	u.SetExcluded(discountpool.FieldUpdateAt)
	return u
}

// AddUpdateAt adds v to the "update_at" field.
func (u *DiscountPoolUpsert) AddUpdateAt(v uint32) *DiscountPoolUpsert {
	u.Add(discountpool.FieldUpdateAt, v)
	return u
}

// SetDeleteAt sets the "delete_at" field.
func (u *DiscountPoolUpsert) SetDeleteAt(v uint32) *DiscountPoolUpsert {
	u.Set(discountpool.FieldDeleteAt, v)
	return u
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *DiscountPoolUpsert) UpdateDeleteAt() *DiscountPoolUpsert {
	u.SetExcluded(discountpool.FieldDeleteAt)
	return u
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *DiscountPoolUpsert) AddDeleteAt(v uint32) *DiscountPoolUpsert {
	u.Add(discountpool.FieldDeleteAt, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.DiscountPool.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(discountpool.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *DiscountPoolUpsertOne) UpdateNewValues() *DiscountPoolUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(discountpool.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.DiscountPool.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *DiscountPoolUpsertOne) Ignore() *DiscountPoolUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DiscountPoolUpsertOne) DoNothing() *DiscountPoolUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DiscountPoolCreate.OnConflict
// documentation for more info.
func (u *DiscountPoolUpsertOne) Update(set func(*DiscountPoolUpsert)) *DiscountPoolUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DiscountPoolUpsert{UpdateSet: update})
	}))
	return u
}

// SetAppID sets the "app_id" field.
func (u *DiscountPoolUpsertOne) SetAppID(v uuid.UUID) *DiscountPoolUpsertOne {
	return u.Update(func(s *DiscountPoolUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *DiscountPoolUpsertOne) UpdateAppID() *DiscountPoolUpsertOne {
	return u.Update(func(s *DiscountPoolUpsert) {
		s.UpdateAppID()
	})
}

// SetDiscount sets the "discount" field.
func (u *DiscountPoolUpsertOne) SetDiscount(v uint32) *DiscountPoolUpsertOne {
	return u.Update(func(s *DiscountPoolUpsert) {
		s.SetDiscount(v)
	})
}

// AddDiscount adds v to the "discount" field.
func (u *DiscountPoolUpsertOne) AddDiscount(v uint32) *DiscountPoolUpsertOne {
	return u.Update(func(s *DiscountPoolUpsert) {
		s.AddDiscount(v)
	})
}

// UpdateDiscount sets the "discount" field to the value that was provided on create.
func (u *DiscountPoolUpsertOne) UpdateDiscount() *DiscountPoolUpsertOne {
	return u.Update(func(s *DiscountPoolUpsert) {
		s.UpdateDiscount()
	})
}

// SetReleaseByUserID sets the "release_by_user_id" field.
func (u *DiscountPoolUpsertOne) SetReleaseByUserID(v uuid.UUID) *DiscountPoolUpsertOne {
	return u.Update(func(s *DiscountPoolUpsert) {
		s.SetReleaseByUserID(v)
	})
}

// UpdateReleaseByUserID sets the "release_by_user_id" field to the value that was provided on create.
func (u *DiscountPoolUpsertOne) UpdateReleaseByUserID() *DiscountPoolUpsertOne {
	return u.Update(func(s *DiscountPoolUpsert) {
		s.UpdateReleaseByUserID()
	})
}

// SetStart sets the "start" field.
func (u *DiscountPoolUpsertOne) SetStart(v uint32) *DiscountPoolUpsertOne {
	return u.Update(func(s *DiscountPoolUpsert) {
		s.SetStart(v)
	})
}

// AddStart adds v to the "start" field.
func (u *DiscountPoolUpsertOne) AddStart(v uint32) *DiscountPoolUpsertOne {
	return u.Update(func(s *DiscountPoolUpsert) {
		s.AddStart(v)
	})
}

// UpdateStart sets the "start" field to the value that was provided on create.
func (u *DiscountPoolUpsertOne) UpdateStart() *DiscountPoolUpsertOne {
	return u.Update(func(s *DiscountPoolUpsert) {
		s.UpdateStart()
	})
}

// SetDurationDays sets the "duration_days" field.
func (u *DiscountPoolUpsertOne) SetDurationDays(v int32) *DiscountPoolUpsertOne {
	return u.Update(func(s *DiscountPoolUpsert) {
		s.SetDurationDays(v)
	})
}

// AddDurationDays adds v to the "duration_days" field.
func (u *DiscountPoolUpsertOne) AddDurationDays(v int32) *DiscountPoolUpsertOne {
	return u.Update(func(s *DiscountPoolUpsert) {
		s.AddDurationDays(v)
	})
}

// UpdateDurationDays sets the "duration_days" field to the value that was provided on create.
func (u *DiscountPoolUpsertOne) UpdateDurationDays() *DiscountPoolUpsertOne {
	return u.Update(func(s *DiscountPoolUpsert) {
		s.UpdateDurationDays()
	})
}

// SetMessage sets the "message" field.
func (u *DiscountPoolUpsertOne) SetMessage(v string) *DiscountPoolUpsertOne {
	return u.Update(func(s *DiscountPoolUpsert) {
		s.SetMessage(v)
	})
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *DiscountPoolUpsertOne) UpdateMessage() *DiscountPoolUpsertOne {
	return u.Update(func(s *DiscountPoolUpsert) {
		s.UpdateMessage()
	})
}

// SetName sets the "name" field.
func (u *DiscountPoolUpsertOne) SetName(v string) *DiscountPoolUpsertOne {
	return u.Update(func(s *DiscountPoolUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *DiscountPoolUpsertOne) UpdateName() *DiscountPoolUpsertOne {
	return u.Update(func(s *DiscountPoolUpsert) {
		s.UpdateName()
	})
}

// SetCreateAt sets the "create_at" field.
func (u *DiscountPoolUpsertOne) SetCreateAt(v uint32) *DiscountPoolUpsertOne {
	return u.Update(func(s *DiscountPoolUpsert) {
		s.SetCreateAt(v)
	})
}

// AddCreateAt adds v to the "create_at" field.
func (u *DiscountPoolUpsertOne) AddCreateAt(v uint32) *DiscountPoolUpsertOne {
	return u.Update(func(s *DiscountPoolUpsert) {
		s.AddCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *DiscountPoolUpsertOne) UpdateCreateAt() *DiscountPoolUpsertOne {
	return u.Update(func(s *DiscountPoolUpsert) {
		s.UpdateCreateAt()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *DiscountPoolUpsertOne) SetUpdateAt(v uint32) *DiscountPoolUpsertOne {
	return u.Update(func(s *DiscountPoolUpsert) {
		s.SetUpdateAt(v)
	})
}

// AddUpdateAt adds v to the "update_at" field.
func (u *DiscountPoolUpsertOne) AddUpdateAt(v uint32) *DiscountPoolUpsertOne {
	return u.Update(func(s *DiscountPoolUpsert) {
		s.AddUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *DiscountPoolUpsertOne) UpdateUpdateAt() *DiscountPoolUpsertOne {
	return u.Update(func(s *DiscountPoolUpsert) {
		s.UpdateUpdateAt()
	})
}

// SetDeleteAt sets the "delete_at" field.
func (u *DiscountPoolUpsertOne) SetDeleteAt(v uint32) *DiscountPoolUpsertOne {
	return u.Update(func(s *DiscountPoolUpsert) {
		s.SetDeleteAt(v)
	})
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *DiscountPoolUpsertOne) AddDeleteAt(v uint32) *DiscountPoolUpsertOne {
	return u.Update(func(s *DiscountPoolUpsert) {
		s.AddDeleteAt(v)
	})
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *DiscountPoolUpsertOne) UpdateDeleteAt() *DiscountPoolUpsertOne {
	return u.Update(func(s *DiscountPoolUpsert) {
		s.UpdateDeleteAt()
	})
}

// Exec executes the query.
func (u *DiscountPoolUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DiscountPoolCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DiscountPoolUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *DiscountPoolUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: DiscountPoolUpsertOne.ID is not supported by MySQL driver. Use DiscountPoolUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *DiscountPoolUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// DiscountPoolCreateBulk is the builder for creating many DiscountPool entities in bulk.
type DiscountPoolCreateBulk struct {
	config
	builders []*DiscountPoolCreate
	conflict []sql.ConflictOption
}

// Save creates the DiscountPool entities in the database.
func (dpcb *DiscountPoolCreateBulk) Save(ctx context.Context) ([]*DiscountPool, error) {
	specs := make([]*sqlgraph.CreateSpec, len(dpcb.builders))
	nodes := make([]*DiscountPool, len(dpcb.builders))
	mutators := make([]Mutator, len(dpcb.builders))
	for i := range dpcb.builders {
		func(i int, root context.Context) {
			builder := dpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DiscountPoolMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = dpcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dpcb *DiscountPoolCreateBulk) SaveX(ctx context.Context) []*DiscountPool {
	v, err := dpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dpcb *DiscountPoolCreateBulk) Exec(ctx context.Context) error {
	_, err := dpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dpcb *DiscountPoolCreateBulk) ExecX(ctx context.Context) {
	if err := dpcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DiscountPool.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DiscountPoolUpsert) {
//			SetAppID(v+v).
//		}).
//		Exec(ctx)
//
func (dpcb *DiscountPoolCreateBulk) OnConflict(opts ...sql.ConflictOption) *DiscountPoolUpsertBulk {
	dpcb.conflict = opts
	return &DiscountPoolUpsertBulk{
		create: dpcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DiscountPool.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (dpcb *DiscountPoolCreateBulk) OnConflictColumns(columns ...string) *DiscountPoolUpsertBulk {
	dpcb.conflict = append(dpcb.conflict, sql.ConflictColumns(columns...))
	return &DiscountPoolUpsertBulk{
		create: dpcb,
	}
}

// DiscountPoolUpsertBulk is the builder for "upsert"-ing
// a bulk of DiscountPool nodes.
type DiscountPoolUpsertBulk struct {
	create *DiscountPoolCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.DiscountPool.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(discountpool.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *DiscountPoolUpsertBulk) UpdateNewValues() *DiscountPoolUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(discountpool.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.DiscountPool.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *DiscountPoolUpsertBulk) Ignore() *DiscountPoolUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DiscountPoolUpsertBulk) DoNothing() *DiscountPoolUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DiscountPoolCreateBulk.OnConflict
// documentation for more info.
func (u *DiscountPoolUpsertBulk) Update(set func(*DiscountPoolUpsert)) *DiscountPoolUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DiscountPoolUpsert{UpdateSet: update})
	}))
	return u
}

// SetAppID sets the "app_id" field.
func (u *DiscountPoolUpsertBulk) SetAppID(v uuid.UUID) *DiscountPoolUpsertBulk {
	return u.Update(func(s *DiscountPoolUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *DiscountPoolUpsertBulk) UpdateAppID() *DiscountPoolUpsertBulk {
	return u.Update(func(s *DiscountPoolUpsert) {
		s.UpdateAppID()
	})
}

// SetDiscount sets the "discount" field.
func (u *DiscountPoolUpsertBulk) SetDiscount(v uint32) *DiscountPoolUpsertBulk {
	return u.Update(func(s *DiscountPoolUpsert) {
		s.SetDiscount(v)
	})
}

// AddDiscount adds v to the "discount" field.
func (u *DiscountPoolUpsertBulk) AddDiscount(v uint32) *DiscountPoolUpsertBulk {
	return u.Update(func(s *DiscountPoolUpsert) {
		s.AddDiscount(v)
	})
}

// UpdateDiscount sets the "discount" field to the value that was provided on create.
func (u *DiscountPoolUpsertBulk) UpdateDiscount() *DiscountPoolUpsertBulk {
	return u.Update(func(s *DiscountPoolUpsert) {
		s.UpdateDiscount()
	})
}

// SetReleaseByUserID sets the "release_by_user_id" field.
func (u *DiscountPoolUpsertBulk) SetReleaseByUserID(v uuid.UUID) *DiscountPoolUpsertBulk {
	return u.Update(func(s *DiscountPoolUpsert) {
		s.SetReleaseByUserID(v)
	})
}

// UpdateReleaseByUserID sets the "release_by_user_id" field to the value that was provided on create.
func (u *DiscountPoolUpsertBulk) UpdateReleaseByUserID() *DiscountPoolUpsertBulk {
	return u.Update(func(s *DiscountPoolUpsert) {
		s.UpdateReleaseByUserID()
	})
}

// SetStart sets the "start" field.
func (u *DiscountPoolUpsertBulk) SetStart(v uint32) *DiscountPoolUpsertBulk {
	return u.Update(func(s *DiscountPoolUpsert) {
		s.SetStart(v)
	})
}

// AddStart adds v to the "start" field.
func (u *DiscountPoolUpsertBulk) AddStart(v uint32) *DiscountPoolUpsertBulk {
	return u.Update(func(s *DiscountPoolUpsert) {
		s.AddStart(v)
	})
}

// UpdateStart sets the "start" field to the value that was provided on create.
func (u *DiscountPoolUpsertBulk) UpdateStart() *DiscountPoolUpsertBulk {
	return u.Update(func(s *DiscountPoolUpsert) {
		s.UpdateStart()
	})
}

// SetDurationDays sets the "duration_days" field.
func (u *DiscountPoolUpsertBulk) SetDurationDays(v int32) *DiscountPoolUpsertBulk {
	return u.Update(func(s *DiscountPoolUpsert) {
		s.SetDurationDays(v)
	})
}

// AddDurationDays adds v to the "duration_days" field.
func (u *DiscountPoolUpsertBulk) AddDurationDays(v int32) *DiscountPoolUpsertBulk {
	return u.Update(func(s *DiscountPoolUpsert) {
		s.AddDurationDays(v)
	})
}

// UpdateDurationDays sets the "duration_days" field to the value that was provided on create.
func (u *DiscountPoolUpsertBulk) UpdateDurationDays() *DiscountPoolUpsertBulk {
	return u.Update(func(s *DiscountPoolUpsert) {
		s.UpdateDurationDays()
	})
}

// SetMessage sets the "message" field.
func (u *DiscountPoolUpsertBulk) SetMessage(v string) *DiscountPoolUpsertBulk {
	return u.Update(func(s *DiscountPoolUpsert) {
		s.SetMessage(v)
	})
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *DiscountPoolUpsertBulk) UpdateMessage() *DiscountPoolUpsertBulk {
	return u.Update(func(s *DiscountPoolUpsert) {
		s.UpdateMessage()
	})
}

// SetName sets the "name" field.
func (u *DiscountPoolUpsertBulk) SetName(v string) *DiscountPoolUpsertBulk {
	return u.Update(func(s *DiscountPoolUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *DiscountPoolUpsertBulk) UpdateName() *DiscountPoolUpsertBulk {
	return u.Update(func(s *DiscountPoolUpsert) {
		s.UpdateName()
	})
}

// SetCreateAt sets the "create_at" field.
func (u *DiscountPoolUpsertBulk) SetCreateAt(v uint32) *DiscountPoolUpsertBulk {
	return u.Update(func(s *DiscountPoolUpsert) {
		s.SetCreateAt(v)
	})
}

// AddCreateAt adds v to the "create_at" field.
func (u *DiscountPoolUpsertBulk) AddCreateAt(v uint32) *DiscountPoolUpsertBulk {
	return u.Update(func(s *DiscountPoolUpsert) {
		s.AddCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *DiscountPoolUpsertBulk) UpdateCreateAt() *DiscountPoolUpsertBulk {
	return u.Update(func(s *DiscountPoolUpsert) {
		s.UpdateCreateAt()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *DiscountPoolUpsertBulk) SetUpdateAt(v uint32) *DiscountPoolUpsertBulk {
	return u.Update(func(s *DiscountPoolUpsert) {
		s.SetUpdateAt(v)
	})
}

// AddUpdateAt adds v to the "update_at" field.
func (u *DiscountPoolUpsertBulk) AddUpdateAt(v uint32) *DiscountPoolUpsertBulk {
	return u.Update(func(s *DiscountPoolUpsert) {
		s.AddUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *DiscountPoolUpsertBulk) UpdateUpdateAt() *DiscountPoolUpsertBulk {
	return u.Update(func(s *DiscountPoolUpsert) {
		s.UpdateUpdateAt()
	})
}

// SetDeleteAt sets the "delete_at" field.
func (u *DiscountPoolUpsertBulk) SetDeleteAt(v uint32) *DiscountPoolUpsertBulk {
	return u.Update(func(s *DiscountPoolUpsert) {
		s.SetDeleteAt(v)
	})
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *DiscountPoolUpsertBulk) AddDeleteAt(v uint32) *DiscountPoolUpsertBulk {
	return u.Update(func(s *DiscountPoolUpsert) {
		s.AddDeleteAt(v)
	})
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *DiscountPoolUpsertBulk) UpdateDeleteAt() *DiscountPoolUpsertBulk {
	return u.Update(func(s *DiscountPoolUpsert) {
		s.UpdateDeleteAt()
	})
}

// Exec executes the query.
func (u *DiscountPoolUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the DiscountPoolCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DiscountPoolCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DiscountPoolUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
