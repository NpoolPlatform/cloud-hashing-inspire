// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/defaultkpisetting"
	"github.com/google/uuid"
)

// DefaultKpiSetting is the model entity for the DefaultKpiSetting schema.
type DefaultKpiSetting struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount uint64 `json:"amount,omitempty"`
	// Percent holds the value of the "percent" field.
	Percent int32 `json:"percent,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID uuid.UUID `json:"app_id,omitempty"`
	// GoodID holds the value of the "good_id" field.
	GoodID uuid.UUID `json:"good_id,omitempty"`
	// CreateAt holds the value of the "create_at" field.
	CreateAt uint32 `json:"create_at,omitempty"`
	// UpdateAt holds the value of the "update_at" field.
	UpdateAt uint32 `json:"update_at,omitempty"`
	// DeleteAt holds the value of the "delete_at" field.
	DeleteAt uint32 `json:"delete_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DefaultKpiSetting) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case defaultkpisetting.FieldAmount, defaultkpisetting.FieldPercent, defaultkpisetting.FieldCreateAt, defaultkpisetting.FieldUpdateAt, defaultkpisetting.FieldDeleteAt:
			values[i] = new(sql.NullInt64)
		case defaultkpisetting.FieldID, defaultkpisetting.FieldAppID, defaultkpisetting.FieldGoodID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type DefaultKpiSetting", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DefaultKpiSetting fields.
func (dks *DefaultKpiSetting) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case defaultkpisetting.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				dks.ID = *value
			}
		case defaultkpisetting.FieldAmount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				dks.Amount = uint64(value.Int64)
			}
		case defaultkpisetting.FieldPercent:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field percent", values[i])
			} else if value.Valid {
				dks.Percent = int32(value.Int64)
			}
		case defaultkpisetting.FieldAppID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value != nil {
				dks.AppID = *value
			}
		case defaultkpisetting.FieldGoodID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field good_id", values[i])
			} else if value != nil {
				dks.GoodID = *value
			}
		case defaultkpisetting.FieldCreateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				dks.CreateAt = uint32(value.Int64)
			}
		case defaultkpisetting.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				dks.UpdateAt = uint32(value.Int64)
			}
		case defaultkpisetting.FieldDeleteAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete_at", values[i])
			} else if value.Valid {
				dks.DeleteAt = uint32(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this DefaultKpiSetting.
// Note that you need to call DefaultKpiSetting.Unwrap() before calling this method if this DefaultKpiSetting
// was returned from a transaction, and the transaction was committed or rolled back.
func (dks *DefaultKpiSetting) Update() *DefaultKpiSettingUpdateOne {
	return (&DefaultKpiSettingClient{config: dks.config}).UpdateOne(dks)
}

// Unwrap unwraps the DefaultKpiSetting entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (dks *DefaultKpiSetting) Unwrap() *DefaultKpiSetting {
	_tx, ok := dks.config.driver.(*txDriver)
	if !ok {
		panic("ent: DefaultKpiSetting is not a transactional entity")
	}
	dks.config.driver = _tx.drv
	return dks
}

// String implements the fmt.Stringer.
func (dks *DefaultKpiSetting) String() string {
	var builder strings.Builder
	builder.WriteString("DefaultKpiSetting(")
	builder.WriteString(fmt.Sprintf("id=%v, ", dks.ID))
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", dks.Amount))
	builder.WriteString(", ")
	builder.WriteString("percent=")
	builder.WriteString(fmt.Sprintf("%v", dks.Percent))
	builder.WriteString(", ")
	builder.WriteString("app_id=")
	builder.WriteString(fmt.Sprintf("%v", dks.AppID))
	builder.WriteString(", ")
	builder.WriteString("good_id=")
	builder.WriteString(fmt.Sprintf("%v", dks.GoodID))
	builder.WriteString(", ")
	builder.WriteString("create_at=")
	builder.WriteString(fmt.Sprintf("%v", dks.CreateAt))
	builder.WriteString(", ")
	builder.WriteString("update_at=")
	builder.WriteString(fmt.Sprintf("%v", dks.UpdateAt))
	builder.WriteString(", ")
	builder.WriteString("delete_at=")
	builder.WriteString(fmt.Sprintf("%v", dks.DeleteAt))
	builder.WriteByte(')')
	return builder.String()
}

// DefaultKpiSettings is a parsable slice of DefaultKpiSetting.
type DefaultKpiSettings []*DefaultKpiSetting

func (dks DefaultKpiSettings) config(cfg config) {
	for _i := range dks {
		dks[_i].config = cfg
	}
}
