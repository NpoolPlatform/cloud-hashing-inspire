// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/appcommissionsetting"
	"github.com/google/uuid"
)

// AppCommissionSettingCreate is the builder for creating a AppCommissionSetting entity.
type AppCommissionSettingCreate struct {
	config
	mutation *AppCommissionSettingMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetAppID sets the "app_id" field.
func (acsc *AppCommissionSettingCreate) SetAppID(u uuid.UUID) *AppCommissionSettingCreate {
	acsc.mutation.SetAppID(u)
	return acsc
}

// SetType sets the "type" field.
func (acsc *AppCommissionSettingCreate) SetType(s string) *AppCommissionSettingCreate {
	acsc.mutation.SetType(s)
	return acsc
}

// SetLevel sets the "level" field.
func (acsc *AppCommissionSettingCreate) SetLevel(u uint32) *AppCommissionSettingCreate {
	acsc.mutation.SetLevel(u)
	return acsc
}

// SetInvitationDiscount sets the "invitation_discount" field.
func (acsc *AppCommissionSettingCreate) SetInvitationDiscount(b bool) *AppCommissionSettingCreate {
	acsc.mutation.SetInvitationDiscount(b)
	return acsc
}

// SetUniqueSetting sets the "unique_setting" field.
func (acsc *AppCommissionSettingCreate) SetUniqueSetting(b bool) *AppCommissionSettingCreate {
	acsc.mutation.SetUniqueSetting(b)
	return acsc
}

// SetKpiSetting sets the "kpi_setting" field.
func (acsc *AppCommissionSettingCreate) SetKpiSetting(b bool) *AppCommissionSettingCreate {
	acsc.mutation.SetKpiSetting(b)
	return acsc
}

// SetCreateAt sets the "create_at" field.
func (acsc *AppCommissionSettingCreate) SetCreateAt(u uint32) *AppCommissionSettingCreate {
	acsc.mutation.SetCreateAt(u)
	return acsc
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (acsc *AppCommissionSettingCreate) SetNillableCreateAt(u *uint32) *AppCommissionSettingCreate {
	if u != nil {
		acsc.SetCreateAt(*u)
	}
	return acsc
}

// SetUpdateAt sets the "update_at" field.
func (acsc *AppCommissionSettingCreate) SetUpdateAt(u uint32) *AppCommissionSettingCreate {
	acsc.mutation.SetUpdateAt(u)
	return acsc
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (acsc *AppCommissionSettingCreate) SetNillableUpdateAt(u *uint32) *AppCommissionSettingCreate {
	if u != nil {
		acsc.SetUpdateAt(*u)
	}
	return acsc
}

// SetDeleteAt sets the "delete_at" field.
func (acsc *AppCommissionSettingCreate) SetDeleteAt(u uint32) *AppCommissionSettingCreate {
	acsc.mutation.SetDeleteAt(u)
	return acsc
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (acsc *AppCommissionSettingCreate) SetNillableDeleteAt(u *uint32) *AppCommissionSettingCreate {
	if u != nil {
		acsc.SetDeleteAt(*u)
	}
	return acsc
}

// SetID sets the "id" field.
func (acsc *AppCommissionSettingCreate) SetID(u uuid.UUID) *AppCommissionSettingCreate {
	acsc.mutation.SetID(u)
	return acsc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (acsc *AppCommissionSettingCreate) SetNillableID(u *uuid.UUID) *AppCommissionSettingCreate {
	if u != nil {
		acsc.SetID(*u)
	}
	return acsc
}

// Mutation returns the AppCommissionSettingMutation object of the builder.
func (acsc *AppCommissionSettingCreate) Mutation() *AppCommissionSettingMutation {
	return acsc.mutation
}

// Save creates the AppCommissionSetting in the database.
func (acsc *AppCommissionSettingCreate) Save(ctx context.Context) (*AppCommissionSetting, error) {
	var (
		err  error
		node *AppCommissionSetting
	)
	acsc.defaults()
	if len(acsc.hooks) == 0 {
		if err = acsc.check(); err != nil {
			return nil, err
		}
		node, err = acsc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppCommissionSettingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = acsc.check(); err != nil {
				return nil, err
			}
			acsc.mutation = mutation
			if node, err = acsc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(acsc.hooks) - 1; i >= 0; i-- {
			if acsc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = acsc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, acsc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*AppCommissionSetting)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from AppCommissionSettingMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (acsc *AppCommissionSettingCreate) SaveX(ctx context.Context) *AppCommissionSetting {
	v, err := acsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acsc *AppCommissionSettingCreate) Exec(ctx context.Context) error {
	_, err := acsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acsc *AppCommissionSettingCreate) ExecX(ctx context.Context) {
	if err := acsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (acsc *AppCommissionSettingCreate) defaults() {
	if _, ok := acsc.mutation.CreateAt(); !ok {
		v := appcommissionsetting.DefaultCreateAt()
		acsc.mutation.SetCreateAt(v)
	}
	if _, ok := acsc.mutation.UpdateAt(); !ok {
		v := appcommissionsetting.DefaultUpdateAt()
		acsc.mutation.SetUpdateAt(v)
	}
	if _, ok := acsc.mutation.DeleteAt(); !ok {
		v := appcommissionsetting.DefaultDeleteAt()
		acsc.mutation.SetDeleteAt(v)
	}
	if _, ok := acsc.mutation.ID(); !ok {
		v := appcommissionsetting.DefaultID()
		acsc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (acsc *AppCommissionSettingCreate) check() error {
	if _, ok := acsc.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`ent: missing required field "AppCommissionSetting.app_id"`)}
	}
	if _, ok := acsc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "AppCommissionSetting.type"`)}
	}
	if _, ok := acsc.mutation.Level(); !ok {
		return &ValidationError{Name: "level", err: errors.New(`ent: missing required field "AppCommissionSetting.level"`)}
	}
	if _, ok := acsc.mutation.InvitationDiscount(); !ok {
		return &ValidationError{Name: "invitation_discount", err: errors.New(`ent: missing required field "AppCommissionSetting.invitation_discount"`)}
	}
	if _, ok := acsc.mutation.UniqueSetting(); !ok {
		return &ValidationError{Name: "unique_setting", err: errors.New(`ent: missing required field "AppCommissionSetting.unique_setting"`)}
	}
	if _, ok := acsc.mutation.KpiSetting(); !ok {
		return &ValidationError{Name: "kpi_setting", err: errors.New(`ent: missing required field "AppCommissionSetting.kpi_setting"`)}
	}
	if _, ok := acsc.mutation.CreateAt(); !ok {
		return &ValidationError{Name: "create_at", err: errors.New(`ent: missing required field "AppCommissionSetting.create_at"`)}
	}
	if _, ok := acsc.mutation.UpdateAt(); !ok {
		return &ValidationError{Name: "update_at", err: errors.New(`ent: missing required field "AppCommissionSetting.update_at"`)}
	}
	if _, ok := acsc.mutation.DeleteAt(); !ok {
		return &ValidationError{Name: "delete_at", err: errors.New(`ent: missing required field "AppCommissionSetting.delete_at"`)}
	}
	return nil
}

func (acsc *AppCommissionSettingCreate) sqlSave(ctx context.Context) (*AppCommissionSetting, error) {
	_node, _spec := acsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, acsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (acsc *AppCommissionSettingCreate) createSpec() (*AppCommissionSetting, *sqlgraph.CreateSpec) {
	var (
		_node = &AppCommissionSetting{config: acsc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: appcommissionsetting.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: appcommissionsetting.FieldID,
			},
		}
	)
	_spec.OnConflict = acsc.conflict
	if id, ok := acsc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := acsc.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appcommissionsetting.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := acsc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appcommissionsetting.FieldType,
		})
		_node.Type = value
	}
	if value, ok := acsc.mutation.Level(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appcommissionsetting.FieldLevel,
		})
		_node.Level = value
	}
	if value, ok := acsc.mutation.InvitationDiscount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: appcommissionsetting.FieldInvitationDiscount,
		})
		_node.InvitationDiscount = value
	}
	if value, ok := acsc.mutation.UniqueSetting(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: appcommissionsetting.FieldUniqueSetting,
		})
		_node.UniqueSetting = value
	}
	if value, ok := acsc.mutation.KpiSetting(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: appcommissionsetting.FieldKpiSetting,
		})
		_node.KpiSetting = value
	}
	if value, ok := acsc.mutation.CreateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appcommissionsetting.FieldCreateAt,
		})
		_node.CreateAt = value
	}
	if value, ok := acsc.mutation.UpdateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appcommissionsetting.FieldUpdateAt,
		})
		_node.UpdateAt = value
	}
	if value, ok := acsc.mutation.DeleteAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appcommissionsetting.FieldDeleteAt,
		})
		_node.DeleteAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppCommissionSetting.Create().
//		SetAppID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppCommissionSettingUpsert) {
//			SetAppID(v+v).
//		}).
//		Exec(ctx)
//
func (acsc *AppCommissionSettingCreate) OnConflict(opts ...sql.ConflictOption) *AppCommissionSettingUpsertOne {
	acsc.conflict = opts
	return &AppCommissionSettingUpsertOne{
		create: acsc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppCommissionSetting.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (acsc *AppCommissionSettingCreate) OnConflictColumns(columns ...string) *AppCommissionSettingUpsertOne {
	acsc.conflict = append(acsc.conflict, sql.ConflictColumns(columns...))
	return &AppCommissionSettingUpsertOne{
		create: acsc,
	}
}

type (
	// AppCommissionSettingUpsertOne is the builder for "upsert"-ing
	//  one AppCommissionSetting node.
	AppCommissionSettingUpsertOne struct {
		create *AppCommissionSettingCreate
	}

	// AppCommissionSettingUpsert is the "OnConflict" setter.
	AppCommissionSettingUpsert struct {
		*sql.UpdateSet
	}
)

// SetAppID sets the "app_id" field.
func (u *AppCommissionSettingUpsert) SetAppID(v uuid.UUID) *AppCommissionSettingUpsert {
	u.Set(appcommissionsetting.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppCommissionSettingUpsert) UpdateAppID() *AppCommissionSettingUpsert {
	u.SetExcluded(appcommissionsetting.FieldAppID)
	return u
}

// SetType sets the "type" field.
func (u *AppCommissionSettingUpsert) SetType(v string) *AppCommissionSettingUpsert {
	u.Set(appcommissionsetting.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *AppCommissionSettingUpsert) UpdateType() *AppCommissionSettingUpsert {
	u.SetExcluded(appcommissionsetting.FieldType)
	return u
}

// SetLevel sets the "level" field.
func (u *AppCommissionSettingUpsert) SetLevel(v uint32) *AppCommissionSettingUpsert {
	u.Set(appcommissionsetting.FieldLevel, v)
	return u
}

// UpdateLevel sets the "level" field to the value that was provided on create.
func (u *AppCommissionSettingUpsert) UpdateLevel() *AppCommissionSettingUpsert {
	u.SetExcluded(appcommissionsetting.FieldLevel)
	return u
}

// AddLevel adds v to the "level" field.
func (u *AppCommissionSettingUpsert) AddLevel(v uint32) *AppCommissionSettingUpsert {
	u.Add(appcommissionsetting.FieldLevel, v)
	return u
}

// SetInvitationDiscount sets the "invitation_discount" field.
func (u *AppCommissionSettingUpsert) SetInvitationDiscount(v bool) *AppCommissionSettingUpsert {
	u.Set(appcommissionsetting.FieldInvitationDiscount, v)
	return u
}

// UpdateInvitationDiscount sets the "invitation_discount" field to the value that was provided on create.
func (u *AppCommissionSettingUpsert) UpdateInvitationDiscount() *AppCommissionSettingUpsert {
	u.SetExcluded(appcommissionsetting.FieldInvitationDiscount)
	return u
}

// SetUniqueSetting sets the "unique_setting" field.
func (u *AppCommissionSettingUpsert) SetUniqueSetting(v bool) *AppCommissionSettingUpsert {
	u.Set(appcommissionsetting.FieldUniqueSetting, v)
	return u
}

// UpdateUniqueSetting sets the "unique_setting" field to the value that was provided on create.
func (u *AppCommissionSettingUpsert) UpdateUniqueSetting() *AppCommissionSettingUpsert {
	u.SetExcluded(appcommissionsetting.FieldUniqueSetting)
	return u
}

// SetKpiSetting sets the "kpi_setting" field.
func (u *AppCommissionSettingUpsert) SetKpiSetting(v bool) *AppCommissionSettingUpsert {
	u.Set(appcommissionsetting.FieldKpiSetting, v)
	return u
}

// UpdateKpiSetting sets the "kpi_setting" field to the value that was provided on create.
func (u *AppCommissionSettingUpsert) UpdateKpiSetting() *AppCommissionSettingUpsert {
	u.SetExcluded(appcommissionsetting.FieldKpiSetting)
	return u
}

// SetCreateAt sets the "create_at" field.
func (u *AppCommissionSettingUpsert) SetCreateAt(v uint32) *AppCommissionSettingUpsert {
	u.Set(appcommissionsetting.FieldCreateAt, v)
	return u
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *AppCommissionSettingUpsert) UpdateCreateAt() *AppCommissionSettingUpsert {
	u.SetExcluded(appcommissionsetting.FieldCreateAt)
	return u
}

// AddCreateAt adds v to the "create_at" field.
func (u *AppCommissionSettingUpsert) AddCreateAt(v uint32) *AppCommissionSettingUpsert {
	u.Add(appcommissionsetting.FieldCreateAt, v)
	return u
}

// SetUpdateAt sets the "update_at" field.
func (u *AppCommissionSettingUpsert) SetUpdateAt(v uint32) *AppCommissionSettingUpsert {
	u.Set(appcommissionsetting.FieldUpdateAt, v)
	return u
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *AppCommissionSettingUpsert) UpdateUpdateAt() *AppCommissionSettingUpsert {
	u.SetExcluded(appcommissionsetting.FieldUpdateAt)
	return u
}

// AddUpdateAt adds v to the "update_at" field.
func (u *AppCommissionSettingUpsert) AddUpdateAt(v uint32) *AppCommissionSettingUpsert {
	u.Add(appcommissionsetting.FieldUpdateAt, v)
	return u
}

// SetDeleteAt sets the "delete_at" field.
func (u *AppCommissionSettingUpsert) SetDeleteAt(v uint32) *AppCommissionSettingUpsert {
	u.Set(appcommissionsetting.FieldDeleteAt, v)
	return u
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *AppCommissionSettingUpsert) UpdateDeleteAt() *AppCommissionSettingUpsert {
	u.SetExcluded(appcommissionsetting.FieldDeleteAt)
	return u
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *AppCommissionSettingUpsert) AddDeleteAt(v uint32) *AppCommissionSettingUpsert {
	u.Add(appcommissionsetting.FieldDeleteAt, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.AppCommissionSetting.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(appcommissionsetting.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *AppCommissionSettingUpsertOne) UpdateNewValues() *AppCommissionSettingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(appcommissionsetting.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.AppCommissionSetting.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *AppCommissionSettingUpsertOne) Ignore() *AppCommissionSettingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppCommissionSettingUpsertOne) DoNothing() *AppCommissionSettingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppCommissionSettingCreate.OnConflict
// documentation for more info.
func (u *AppCommissionSettingUpsertOne) Update(set func(*AppCommissionSettingUpsert)) *AppCommissionSettingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppCommissionSettingUpsert{UpdateSet: update})
	}))
	return u
}

// SetAppID sets the "app_id" field.
func (u *AppCommissionSettingUpsertOne) SetAppID(v uuid.UUID) *AppCommissionSettingUpsertOne {
	return u.Update(func(s *AppCommissionSettingUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppCommissionSettingUpsertOne) UpdateAppID() *AppCommissionSettingUpsertOne {
	return u.Update(func(s *AppCommissionSettingUpsert) {
		s.UpdateAppID()
	})
}

// SetType sets the "type" field.
func (u *AppCommissionSettingUpsertOne) SetType(v string) *AppCommissionSettingUpsertOne {
	return u.Update(func(s *AppCommissionSettingUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *AppCommissionSettingUpsertOne) UpdateType() *AppCommissionSettingUpsertOne {
	return u.Update(func(s *AppCommissionSettingUpsert) {
		s.UpdateType()
	})
}

// SetLevel sets the "level" field.
func (u *AppCommissionSettingUpsertOne) SetLevel(v uint32) *AppCommissionSettingUpsertOne {
	return u.Update(func(s *AppCommissionSettingUpsert) {
		s.SetLevel(v)
	})
}

// AddLevel adds v to the "level" field.
func (u *AppCommissionSettingUpsertOne) AddLevel(v uint32) *AppCommissionSettingUpsertOne {
	return u.Update(func(s *AppCommissionSettingUpsert) {
		s.AddLevel(v)
	})
}

// UpdateLevel sets the "level" field to the value that was provided on create.
func (u *AppCommissionSettingUpsertOne) UpdateLevel() *AppCommissionSettingUpsertOne {
	return u.Update(func(s *AppCommissionSettingUpsert) {
		s.UpdateLevel()
	})
}

// SetInvitationDiscount sets the "invitation_discount" field.
func (u *AppCommissionSettingUpsertOne) SetInvitationDiscount(v bool) *AppCommissionSettingUpsertOne {
	return u.Update(func(s *AppCommissionSettingUpsert) {
		s.SetInvitationDiscount(v)
	})
}

// UpdateInvitationDiscount sets the "invitation_discount" field to the value that was provided on create.
func (u *AppCommissionSettingUpsertOne) UpdateInvitationDiscount() *AppCommissionSettingUpsertOne {
	return u.Update(func(s *AppCommissionSettingUpsert) {
		s.UpdateInvitationDiscount()
	})
}

// SetUniqueSetting sets the "unique_setting" field.
func (u *AppCommissionSettingUpsertOne) SetUniqueSetting(v bool) *AppCommissionSettingUpsertOne {
	return u.Update(func(s *AppCommissionSettingUpsert) {
		s.SetUniqueSetting(v)
	})
}

// UpdateUniqueSetting sets the "unique_setting" field to the value that was provided on create.
func (u *AppCommissionSettingUpsertOne) UpdateUniqueSetting() *AppCommissionSettingUpsertOne {
	return u.Update(func(s *AppCommissionSettingUpsert) {
		s.UpdateUniqueSetting()
	})
}

// SetKpiSetting sets the "kpi_setting" field.
func (u *AppCommissionSettingUpsertOne) SetKpiSetting(v bool) *AppCommissionSettingUpsertOne {
	return u.Update(func(s *AppCommissionSettingUpsert) {
		s.SetKpiSetting(v)
	})
}

// UpdateKpiSetting sets the "kpi_setting" field to the value that was provided on create.
func (u *AppCommissionSettingUpsertOne) UpdateKpiSetting() *AppCommissionSettingUpsertOne {
	return u.Update(func(s *AppCommissionSettingUpsert) {
		s.UpdateKpiSetting()
	})
}

// SetCreateAt sets the "create_at" field.
func (u *AppCommissionSettingUpsertOne) SetCreateAt(v uint32) *AppCommissionSettingUpsertOne {
	return u.Update(func(s *AppCommissionSettingUpsert) {
		s.SetCreateAt(v)
	})
}

// AddCreateAt adds v to the "create_at" field.
func (u *AppCommissionSettingUpsertOne) AddCreateAt(v uint32) *AppCommissionSettingUpsertOne {
	return u.Update(func(s *AppCommissionSettingUpsert) {
		s.AddCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *AppCommissionSettingUpsertOne) UpdateCreateAt() *AppCommissionSettingUpsertOne {
	return u.Update(func(s *AppCommissionSettingUpsert) {
		s.UpdateCreateAt()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *AppCommissionSettingUpsertOne) SetUpdateAt(v uint32) *AppCommissionSettingUpsertOne {
	return u.Update(func(s *AppCommissionSettingUpsert) {
		s.SetUpdateAt(v)
	})
}

// AddUpdateAt adds v to the "update_at" field.
func (u *AppCommissionSettingUpsertOne) AddUpdateAt(v uint32) *AppCommissionSettingUpsertOne {
	return u.Update(func(s *AppCommissionSettingUpsert) {
		s.AddUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *AppCommissionSettingUpsertOne) UpdateUpdateAt() *AppCommissionSettingUpsertOne {
	return u.Update(func(s *AppCommissionSettingUpsert) {
		s.UpdateUpdateAt()
	})
}

// SetDeleteAt sets the "delete_at" field.
func (u *AppCommissionSettingUpsertOne) SetDeleteAt(v uint32) *AppCommissionSettingUpsertOne {
	return u.Update(func(s *AppCommissionSettingUpsert) {
		s.SetDeleteAt(v)
	})
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *AppCommissionSettingUpsertOne) AddDeleteAt(v uint32) *AppCommissionSettingUpsertOne {
	return u.Update(func(s *AppCommissionSettingUpsert) {
		s.AddDeleteAt(v)
	})
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *AppCommissionSettingUpsertOne) UpdateDeleteAt() *AppCommissionSettingUpsertOne {
	return u.Update(func(s *AppCommissionSettingUpsert) {
		s.UpdateDeleteAt()
	})
}

// Exec executes the query.
func (u *AppCommissionSettingUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AppCommissionSettingCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppCommissionSettingUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AppCommissionSettingUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: AppCommissionSettingUpsertOne.ID is not supported by MySQL driver. Use AppCommissionSettingUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AppCommissionSettingUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AppCommissionSettingCreateBulk is the builder for creating many AppCommissionSetting entities in bulk.
type AppCommissionSettingCreateBulk struct {
	config
	builders []*AppCommissionSettingCreate
	conflict []sql.ConflictOption
}

// Save creates the AppCommissionSetting entities in the database.
func (acscb *AppCommissionSettingCreateBulk) Save(ctx context.Context) ([]*AppCommissionSetting, error) {
	specs := make([]*sqlgraph.CreateSpec, len(acscb.builders))
	nodes := make([]*AppCommissionSetting, len(acscb.builders))
	mutators := make([]Mutator, len(acscb.builders))
	for i := range acscb.builders {
		func(i int, root context.Context) {
			builder := acscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AppCommissionSettingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = acscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acscb *AppCommissionSettingCreateBulk) SaveX(ctx context.Context) []*AppCommissionSetting {
	v, err := acscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acscb *AppCommissionSettingCreateBulk) Exec(ctx context.Context) error {
	_, err := acscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acscb *AppCommissionSettingCreateBulk) ExecX(ctx context.Context) {
	if err := acscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppCommissionSetting.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppCommissionSettingUpsert) {
//			SetAppID(v+v).
//		}).
//		Exec(ctx)
//
func (acscb *AppCommissionSettingCreateBulk) OnConflict(opts ...sql.ConflictOption) *AppCommissionSettingUpsertBulk {
	acscb.conflict = opts
	return &AppCommissionSettingUpsertBulk{
		create: acscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppCommissionSetting.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (acscb *AppCommissionSettingCreateBulk) OnConflictColumns(columns ...string) *AppCommissionSettingUpsertBulk {
	acscb.conflict = append(acscb.conflict, sql.ConflictColumns(columns...))
	return &AppCommissionSettingUpsertBulk{
		create: acscb,
	}
}

// AppCommissionSettingUpsertBulk is the builder for "upsert"-ing
// a bulk of AppCommissionSetting nodes.
type AppCommissionSettingUpsertBulk struct {
	create *AppCommissionSettingCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AppCommissionSetting.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(appcommissionsetting.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *AppCommissionSettingUpsertBulk) UpdateNewValues() *AppCommissionSettingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(appcommissionsetting.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppCommissionSetting.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *AppCommissionSettingUpsertBulk) Ignore() *AppCommissionSettingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppCommissionSettingUpsertBulk) DoNothing() *AppCommissionSettingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppCommissionSettingCreateBulk.OnConflict
// documentation for more info.
func (u *AppCommissionSettingUpsertBulk) Update(set func(*AppCommissionSettingUpsert)) *AppCommissionSettingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppCommissionSettingUpsert{UpdateSet: update})
	}))
	return u
}

// SetAppID sets the "app_id" field.
func (u *AppCommissionSettingUpsertBulk) SetAppID(v uuid.UUID) *AppCommissionSettingUpsertBulk {
	return u.Update(func(s *AppCommissionSettingUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppCommissionSettingUpsertBulk) UpdateAppID() *AppCommissionSettingUpsertBulk {
	return u.Update(func(s *AppCommissionSettingUpsert) {
		s.UpdateAppID()
	})
}

// SetType sets the "type" field.
func (u *AppCommissionSettingUpsertBulk) SetType(v string) *AppCommissionSettingUpsertBulk {
	return u.Update(func(s *AppCommissionSettingUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *AppCommissionSettingUpsertBulk) UpdateType() *AppCommissionSettingUpsertBulk {
	return u.Update(func(s *AppCommissionSettingUpsert) {
		s.UpdateType()
	})
}

// SetLevel sets the "level" field.
func (u *AppCommissionSettingUpsertBulk) SetLevel(v uint32) *AppCommissionSettingUpsertBulk {
	return u.Update(func(s *AppCommissionSettingUpsert) {
		s.SetLevel(v)
	})
}

// AddLevel adds v to the "level" field.
func (u *AppCommissionSettingUpsertBulk) AddLevel(v uint32) *AppCommissionSettingUpsertBulk {
	return u.Update(func(s *AppCommissionSettingUpsert) {
		s.AddLevel(v)
	})
}

// UpdateLevel sets the "level" field to the value that was provided on create.
func (u *AppCommissionSettingUpsertBulk) UpdateLevel() *AppCommissionSettingUpsertBulk {
	return u.Update(func(s *AppCommissionSettingUpsert) {
		s.UpdateLevel()
	})
}

// SetInvitationDiscount sets the "invitation_discount" field.
func (u *AppCommissionSettingUpsertBulk) SetInvitationDiscount(v bool) *AppCommissionSettingUpsertBulk {
	return u.Update(func(s *AppCommissionSettingUpsert) {
		s.SetInvitationDiscount(v)
	})
}

// UpdateInvitationDiscount sets the "invitation_discount" field to the value that was provided on create.
func (u *AppCommissionSettingUpsertBulk) UpdateInvitationDiscount() *AppCommissionSettingUpsertBulk {
	return u.Update(func(s *AppCommissionSettingUpsert) {
		s.UpdateInvitationDiscount()
	})
}

// SetUniqueSetting sets the "unique_setting" field.
func (u *AppCommissionSettingUpsertBulk) SetUniqueSetting(v bool) *AppCommissionSettingUpsertBulk {
	return u.Update(func(s *AppCommissionSettingUpsert) {
		s.SetUniqueSetting(v)
	})
}

// UpdateUniqueSetting sets the "unique_setting" field to the value that was provided on create.
func (u *AppCommissionSettingUpsertBulk) UpdateUniqueSetting() *AppCommissionSettingUpsertBulk {
	return u.Update(func(s *AppCommissionSettingUpsert) {
		s.UpdateUniqueSetting()
	})
}

// SetKpiSetting sets the "kpi_setting" field.
func (u *AppCommissionSettingUpsertBulk) SetKpiSetting(v bool) *AppCommissionSettingUpsertBulk {
	return u.Update(func(s *AppCommissionSettingUpsert) {
		s.SetKpiSetting(v)
	})
}

// UpdateKpiSetting sets the "kpi_setting" field to the value that was provided on create.
func (u *AppCommissionSettingUpsertBulk) UpdateKpiSetting() *AppCommissionSettingUpsertBulk {
	return u.Update(func(s *AppCommissionSettingUpsert) {
		s.UpdateKpiSetting()
	})
}

// SetCreateAt sets the "create_at" field.
func (u *AppCommissionSettingUpsertBulk) SetCreateAt(v uint32) *AppCommissionSettingUpsertBulk {
	return u.Update(func(s *AppCommissionSettingUpsert) {
		s.SetCreateAt(v)
	})
}

// AddCreateAt adds v to the "create_at" field.
func (u *AppCommissionSettingUpsertBulk) AddCreateAt(v uint32) *AppCommissionSettingUpsertBulk {
	return u.Update(func(s *AppCommissionSettingUpsert) {
		s.AddCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *AppCommissionSettingUpsertBulk) UpdateCreateAt() *AppCommissionSettingUpsertBulk {
	return u.Update(func(s *AppCommissionSettingUpsert) {
		s.UpdateCreateAt()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *AppCommissionSettingUpsertBulk) SetUpdateAt(v uint32) *AppCommissionSettingUpsertBulk {
	return u.Update(func(s *AppCommissionSettingUpsert) {
		s.SetUpdateAt(v)
	})
}

// AddUpdateAt adds v to the "update_at" field.
func (u *AppCommissionSettingUpsertBulk) AddUpdateAt(v uint32) *AppCommissionSettingUpsertBulk {
	return u.Update(func(s *AppCommissionSettingUpsert) {
		s.AddUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *AppCommissionSettingUpsertBulk) UpdateUpdateAt() *AppCommissionSettingUpsertBulk {
	return u.Update(func(s *AppCommissionSettingUpsert) {
		s.UpdateUpdateAt()
	})
}

// SetDeleteAt sets the "delete_at" field.
func (u *AppCommissionSettingUpsertBulk) SetDeleteAt(v uint32) *AppCommissionSettingUpsertBulk {
	return u.Update(func(s *AppCommissionSettingUpsert) {
		s.SetDeleteAt(v)
	})
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *AppCommissionSettingUpsertBulk) AddDeleteAt(v uint32) *AppCommissionSettingUpsertBulk {
	return u.Update(func(s *AppCommissionSettingUpsert) {
		s.AddDeleteAt(v)
	})
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *AppCommissionSettingUpsertBulk) UpdateDeleteAt() *AppCommissionSettingUpsertBulk {
	return u.Update(func(s *AppCommissionSettingUpsert) {
		s.UpdateDeleteAt()
	})
}

// Exec executes the query.
func (u *AppCommissionSettingUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AppCommissionSettingCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AppCommissionSettingCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppCommissionSettingUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
