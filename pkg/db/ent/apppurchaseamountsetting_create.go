// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/apppurchaseamountsetting"
	"github.com/google/uuid"
)

// AppPurchaseAmountSettingCreate is the builder for creating a AppPurchaseAmountSetting entity.
type AppPurchaseAmountSettingCreate struct {
	config
	mutation *AppPurchaseAmountSettingMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetAppID sets the "app_id" field.
func (apasc *AppPurchaseAmountSettingCreate) SetAppID(u uuid.UUID) *AppPurchaseAmountSettingCreate {
	apasc.mutation.SetAppID(u)
	return apasc
}

// SetTitle sets the "title" field.
func (apasc *AppPurchaseAmountSettingCreate) SetTitle(s string) *AppPurchaseAmountSettingCreate {
	apasc.mutation.SetTitle(s)
	return apasc
}

// SetBadgeLarge sets the "badge_large" field.
func (apasc *AppPurchaseAmountSettingCreate) SetBadgeLarge(s string) *AppPurchaseAmountSettingCreate {
	apasc.mutation.SetBadgeLarge(s)
	return apasc
}

// SetBadgeSmall sets the "badge_small" field.
func (apasc *AppPurchaseAmountSettingCreate) SetBadgeSmall(s string) *AppPurchaseAmountSettingCreate {
	apasc.mutation.SetBadgeSmall(s)
	return apasc
}

// SetAmount sets the "amount" field.
func (apasc *AppPurchaseAmountSettingCreate) SetAmount(u uint64) *AppPurchaseAmountSettingCreate {
	apasc.mutation.SetAmount(u)
	return apasc
}

// SetPercent sets the "percent" field.
func (apasc *AppPurchaseAmountSettingCreate) SetPercent(u uint32) *AppPurchaseAmountSettingCreate {
	apasc.mutation.SetPercent(u)
	return apasc
}

// SetCreateAt sets the "create_at" field.
func (apasc *AppPurchaseAmountSettingCreate) SetCreateAt(u uint32) *AppPurchaseAmountSettingCreate {
	apasc.mutation.SetCreateAt(u)
	return apasc
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (apasc *AppPurchaseAmountSettingCreate) SetNillableCreateAt(u *uint32) *AppPurchaseAmountSettingCreate {
	if u != nil {
		apasc.SetCreateAt(*u)
	}
	return apasc
}

// SetUpdateAt sets the "update_at" field.
func (apasc *AppPurchaseAmountSettingCreate) SetUpdateAt(u uint32) *AppPurchaseAmountSettingCreate {
	apasc.mutation.SetUpdateAt(u)
	return apasc
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (apasc *AppPurchaseAmountSettingCreate) SetNillableUpdateAt(u *uint32) *AppPurchaseAmountSettingCreate {
	if u != nil {
		apasc.SetUpdateAt(*u)
	}
	return apasc
}

// SetDeleteAt sets the "delete_at" field.
func (apasc *AppPurchaseAmountSettingCreate) SetDeleteAt(u uint32) *AppPurchaseAmountSettingCreate {
	apasc.mutation.SetDeleteAt(u)
	return apasc
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (apasc *AppPurchaseAmountSettingCreate) SetNillableDeleteAt(u *uint32) *AppPurchaseAmountSettingCreate {
	if u != nil {
		apasc.SetDeleteAt(*u)
	}
	return apasc
}

// SetID sets the "id" field.
func (apasc *AppPurchaseAmountSettingCreate) SetID(u uuid.UUID) *AppPurchaseAmountSettingCreate {
	apasc.mutation.SetID(u)
	return apasc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (apasc *AppPurchaseAmountSettingCreate) SetNillableID(u *uuid.UUID) *AppPurchaseAmountSettingCreate {
	if u != nil {
		apasc.SetID(*u)
	}
	return apasc
}

// Mutation returns the AppPurchaseAmountSettingMutation object of the builder.
func (apasc *AppPurchaseAmountSettingCreate) Mutation() *AppPurchaseAmountSettingMutation {
	return apasc.mutation
}

// Save creates the AppPurchaseAmountSetting in the database.
func (apasc *AppPurchaseAmountSettingCreate) Save(ctx context.Context) (*AppPurchaseAmountSetting, error) {
	var (
		err  error
		node *AppPurchaseAmountSetting
	)
	apasc.defaults()
	if len(apasc.hooks) == 0 {
		if err = apasc.check(); err != nil {
			return nil, err
		}
		node, err = apasc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppPurchaseAmountSettingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = apasc.check(); err != nil {
				return nil, err
			}
			apasc.mutation = mutation
			if node, err = apasc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(apasc.hooks) - 1; i >= 0; i-- {
			if apasc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = apasc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, apasc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (apasc *AppPurchaseAmountSettingCreate) SaveX(ctx context.Context) *AppPurchaseAmountSetting {
	v, err := apasc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (apasc *AppPurchaseAmountSettingCreate) Exec(ctx context.Context) error {
	_, err := apasc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (apasc *AppPurchaseAmountSettingCreate) ExecX(ctx context.Context) {
	if err := apasc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (apasc *AppPurchaseAmountSettingCreate) defaults() {
	if _, ok := apasc.mutation.CreateAt(); !ok {
		v := apppurchaseamountsetting.DefaultCreateAt()
		apasc.mutation.SetCreateAt(v)
	}
	if _, ok := apasc.mutation.UpdateAt(); !ok {
		v := apppurchaseamountsetting.DefaultUpdateAt()
		apasc.mutation.SetUpdateAt(v)
	}
	if _, ok := apasc.mutation.DeleteAt(); !ok {
		v := apppurchaseamountsetting.DefaultDeleteAt()
		apasc.mutation.SetDeleteAt(v)
	}
	if _, ok := apasc.mutation.ID(); !ok {
		v := apppurchaseamountsetting.DefaultID()
		apasc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (apasc *AppPurchaseAmountSettingCreate) check() error {
	if _, ok := apasc.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`ent: missing required field "AppPurchaseAmountSetting.app_id"`)}
	}
	if _, ok := apasc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "AppPurchaseAmountSetting.title"`)}
	}
	if _, ok := apasc.mutation.BadgeLarge(); !ok {
		return &ValidationError{Name: "badge_large", err: errors.New(`ent: missing required field "AppPurchaseAmountSetting.badge_large"`)}
	}
	if _, ok := apasc.mutation.BadgeSmall(); !ok {
		return &ValidationError{Name: "badge_small", err: errors.New(`ent: missing required field "AppPurchaseAmountSetting.badge_small"`)}
	}
	if _, ok := apasc.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`ent: missing required field "AppPurchaseAmountSetting.amount"`)}
	}
	if _, ok := apasc.mutation.Percent(); !ok {
		return &ValidationError{Name: "percent", err: errors.New(`ent: missing required field "AppPurchaseAmountSetting.percent"`)}
	}
	if _, ok := apasc.mutation.CreateAt(); !ok {
		return &ValidationError{Name: "create_at", err: errors.New(`ent: missing required field "AppPurchaseAmountSetting.create_at"`)}
	}
	if _, ok := apasc.mutation.UpdateAt(); !ok {
		return &ValidationError{Name: "update_at", err: errors.New(`ent: missing required field "AppPurchaseAmountSetting.update_at"`)}
	}
	if _, ok := apasc.mutation.DeleteAt(); !ok {
		return &ValidationError{Name: "delete_at", err: errors.New(`ent: missing required field "AppPurchaseAmountSetting.delete_at"`)}
	}
	return nil
}

func (apasc *AppPurchaseAmountSettingCreate) sqlSave(ctx context.Context) (*AppPurchaseAmountSetting, error) {
	_node, _spec := apasc.createSpec()
	if err := sqlgraph.CreateNode(ctx, apasc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (apasc *AppPurchaseAmountSettingCreate) createSpec() (*AppPurchaseAmountSetting, *sqlgraph.CreateSpec) {
	var (
		_node = &AppPurchaseAmountSetting{config: apasc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: apppurchaseamountsetting.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: apppurchaseamountsetting.FieldID,
			},
		}
	)
	_spec.OnConflict = apasc.conflict
	if id, ok := apasc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := apasc.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: apppurchaseamountsetting.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := apasc.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: apppurchaseamountsetting.FieldTitle,
		})
		_node.Title = value
	}
	if value, ok := apasc.mutation.BadgeLarge(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: apppurchaseamountsetting.FieldBadgeLarge,
		})
		_node.BadgeLarge = value
	}
	if value, ok := apasc.mutation.BadgeSmall(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: apppurchaseamountsetting.FieldBadgeSmall,
		})
		_node.BadgeSmall = value
	}
	if value, ok := apasc.mutation.Amount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: apppurchaseamountsetting.FieldAmount,
		})
		_node.Amount = value
	}
	if value, ok := apasc.mutation.Percent(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: apppurchaseamountsetting.FieldPercent,
		})
		_node.Percent = value
	}
	if value, ok := apasc.mutation.CreateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: apppurchaseamountsetting.FieldCreateAt,
		})
		_node.CreateAt = value
	}
	if value, ok := apasc.mutation.UpdateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: apppurchaseamountsetting.FieldUpdateAt,
		})
		_node.UpdateAt = value
	}
	if value, ok := apasc.mutation.DeleteAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: apppurchaseamountsetting.FieldDeleteAt,
		})
		_node.DeleteAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppPurchaseAmountSetting.Create().
//		SetAppID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppPurchaseAmountSettingUpsert) {
//			SetAppID(v+v).
//		}).
//		Exec(ctx)
//
func (apasc *AppPurchaseAmountSettingCreate) OnConflict(opts ...sql.ConflictOption) *AppPurchaseAmountSettingUpsertOne {
	apasc.conflict = opts
	return &AppPurchaseAmountSettingUpsertOne{
		create: apasc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppPurchaseAmountSetting.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (apasc *AppPurchaseAmountSettingCreate) OnConflictColumns(columns ...string) *AppPurchaseAmountSettingUpsertOne {
	apasc.conflict = append(apasc.conflict, sql.ConflictColumns(columns...))
	return &AppPurchaseAmountSettingUpsertOne{
		create: apasc,
	}
}

type (
	// AppPurchaseAmountSettingUpsertOne is the builder for "upsert"-ing
	//  one AppPurchaseAmountSetting node.
	AppPurchaseAmountSettingUpsertOne struct {
		create *AppPurchaseAmountSettingCreate
	}

	// AppPurchaseAmountSettingUpsert is the "OnConflict" setter.
	AppPurchaseAmountSettingUpsert struct {
		*sql.UpdateSet
	}
)

// SetAppID sets the "app_id" field.
func (u *AppPurchaseAmountSettingUpsert) SetAppID(v uuid.UUID) *AppPurchaseAmountSettingUpsert {
	u.Set(apppurchaseamountsetting.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppPurchaseAmountSettingUpsert) UpdateAppID() *AppPurchaseAmountSettingUpsert {
	u.SetExcluded(apppurchaseamountsetting.FieldAppID)
	return u
}

// SetTitle sets the "title" field.
func (u *AppPurchaseAmountSettingUpsert) SetTitle(v string) *AppPurchaseAmountSettingUpsert {
	u.Set(apppurchaseamountsetting.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *AppPurchaseAmountSettingUpsert) UpdateTitle() *AppPurchaseAmountSettingUpsert {
	u.SetExcluded(apppurchaseamountsetting.FieldTitle)
	return u
}

// SetBadgeLarge sets the "badge_large" field.
func (u *AppPurchaseAmountSettingUpsert) SetBadgeLarge(v string) *AppPurchaseAmountSettingUpsert {
	u.Set(apppurchaseamountsetting.FieldBadgeLarge, v)
	return u
}

// UpdateBadgeLarge sets the "badge_large" field to the value that was provided on create.
func (u *AppPurchaseAmountSettingUpsert) UpdateBadgeLarge() *AppPurchaseAmountSettingUpsert {
	u.SetExcluded(apppurchaseamountsetting.FieldBadgeLarge)
	return u
}

// SetBadgeSmall sets the "badge_small" field.
func (u *AppPurchaseAmountSettingUpsert) SetBadgeSmall(v string) *AppPurchaseAmountSettingUpsert {
	u.Set(apppurchaseamountsetting.FieldBadgeSmall, v)
	return u
}

// UpdateBadgeSmall sets the "badge_small" field to the value that was provided on create.
func (u *AppPurchaseAmountSettingUpsert) UpdateBadgeSmall() *AppPurchaseAmountSettingUpsert {
	u.SetExcluded(apppurchaseamountsetting.FieldBadgeSmall)
	return u
}

// SetAmount sets the "amount" field.
func (u *AppPurchaseAmountSettingUpsert) SetAmount(v uint64) *AppPurchaseAmountSettingUpsert {
	u.Set(apppurchaseamountsetting.FieldAmount, v)
	return u
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *AppPurchaseAmountSettingUpsert) UpdateAmount() *AppPurchaseAmountSettingUpsert {
	u.SetExcluded(apppurchaseamountsetting.FieldAmount)
	return u
}

// AddAmount adds v to the "amount" field.
func (u *AppPurchaseAmountSettingUpsert) AddAmount(v uint64) *AppPurchaseAmountSettingUpsert {
	u.Add(apppurchaseamountsetting.FieldAmount, v)
	return u
}

// SetPercent sets the "percent" field.
func (u *AppPurchaseAmountSettingUpsert) SetPercent(v uint32) *AppPurchaseAmountSettingUpsert {
	u.Set(apppurchaseamountsetting.FieldPercent, v)
	return u
}

// UpdatePercent sets the "percent" field to the value that was provided on create.
func (u *AppPurchaseAmountSettingUpsert) UpdatePercent() *AppPurchaseAmountSettingUpsert {
	u.SetExcluded(apppurchaseamountsetting.FieldPercent)
	return u
}

// AddPercent adds v to the "percent" field.
func (u *AppPurchaseAmountSettingUpsert) AddPercent(v uint32) *AppPurchaseAmountSettingUpsert {
	u.Add(apppurchaseamountsetting.FieldPercent, v)
	return u
}

// SetCreateAt sets the "create_at" field.
func (u *AppPurchaseAmountSettingUpsert) SetCreateAt(v uint32) *AppPurchaseAmountSettingUpsert {
	u.Set(apppurchaseamountsetting.FieldCreateAt, v)
	return u
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *AppPurchaseAmountSettingUpsert) UpdateCreateAt() *AppPurchaseAmountSettingUpsert {
	u.SetExcluded(apppurchaseamountsetting.FieldCreateAt)
	return u
}

// AddCreateAt adds v to the "create_at" field.
func (u *AppPurchaseAmountSettingUpsert) AddCreateAt(v uint32) *AppPurchaseAmountSettingUpsert {
	u.Add(apppurchaseamountsetting.FieldCreateAt, v)
	return u
}

// SetUpdateAt sets the "update_at" field.
func (u *AppPurchaseAmountSettingUpsert) SetUpdateAt(v uint32) *AppPurchaseAmountSettingUpsert {
	u.Set(apppurchaseamountsetting.FieldUpdateAt, v)
	return u
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *AppPurchaseAmountSettingUpsert) UpdateUpdateAt() *AppPurchaseAmountSettingUpsert {
	u.SetExcluded(apppurchaseamountsetting.FieldUpdateAt)
	return u
}

// AddUpdateAt adds v to the "update_at" field.
func (u *AppPurchaseAmountSettingUpsert) AddUpdateAt(v uint32) *AppPurchaseAmountSettingUpsert {
	u.Add(apppurchaseamountsetting.FieldUpdateAt, v)
	return u
}

// SetDeleteAt sets the "delete_at" field.
func (u *AppPurchaseAmountSettingUpsert) SetDeleteAt(v uint32) *AppPurchaseAmountSettingUpsert {
	u.Set(apppurchaseamountsetting.FieldDeleteAt, v)
	return u
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *AppPurchaseAmountSettingUpsert) UpdateDeleteAt() *AppPurchaseAmountSettingUpsert {
	u.SetExcluded(apppurchaseamountsetting.FieldDeleteAt)
	return u
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *AppPurchaseAmountSettingUpsert) AddDeleteAt(v uint32) *AppPurchaseAmountSettingUpsert {
	u.Add(apppurchaseamountsetting.FieldDeleteAt, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.AppPurchaseAmountSetting.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(apppurchaseamountsetting.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *AppPurchaseAmountSettingUpsertOne) UpdateNewValues() *AppPurchaseAmountSettingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(apppurchaseamountsetting.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.AppPurchaseAmountSetting.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *AppPurchaseAmountSettingUpsertOne) Ignore() *AppPurchaseAmountSettingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppPurchaseAmountSettingUpsertOne) DoNothing() *AppPurchaseAmountSettingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppPurchaseAmountSettingCreate.OnConflict
// documentation for more info.
func (u *AppPurchaseAmountSettingUpsertOne) Update(set func(*AppPurchaseAmountSettingUpsert)) *AppPurchaseAmountSettingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppPurchaseAmountSettingUpsert{UpdateSet: update})
	}))
	return u
}

// SetAppID sets the "app_id" field.
func (u *AppPurchaseAmountSettingUpsertOne) SetAppID(v uuid.UUID) *AppPurchaseAmountSettingUpsertOne {
	return u.Update(func(s *AppPurchaseAmountSettingUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppPurchaseAmountSettingUpsertOne) UpdateAppID() *AppPurchaseAmountSettingUpsertOne {
	return u.Update(func(s *AppPurchaseAmountSettingUpsert) {
		s.UpdateAppID()
	})
}

// SetTitle sets the "title" field.
func (u *AppPurchaseAmountSettingUpsertOne) SetTitle(v string) *AppPurchaseAmountSettingUpsertOne {
	return u.Update(func(s *AppPurchaseAmountSettingUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *AppPurchaseAmountSettingUpsertOne) UpdateTitle() *AppPurchaseAmountSettingUpsertOne {
	return u.Update(func(s *AppPurchaseAmountSettingUpsert) {
		s.UpdateTitle()
	})
}

// SetBadgeLarge sets the "badge_large" field.
func (u *AppPurchaseAmountSettingUpsertOne) SetBadgeLarge(v string) *AppPurchaseAmountSettingUpsertOne {
	return u.Update(func(s *AppPurchaseAmountSettingUpsert) {
		s.SetBadgeLarge(v)
	})
}

// UpdateBadgeLarge sets the "badge_large" field to the value that was provided on create.
func (u *AppPurchaseAmountSettingUpsertOne) UpdateBadgeLarge() *AppPurchaseAmountSettingUpsertOne {
	return u.Update(func(s *AppPurchaseAmountSettingUpsert) {
		s.UpdateBadgeLarge()
	})
}

// SetBadgeSmall sets the "badge_small" field.
func (u *AppPurchaseAmountSettingUpsertOne) SetBadgeSmall(v string) *AppPurchaseAmountSettingUpsertOne {
	return u.Update(func(s *AppPurchaseAmountSettingUpsert) {
		s.SetBadgeSmall(v)
	})
}

// UpdateBadgeSmall sets the "badge_small" field to the value that was provided on create.
func (u *AppPurchaseAmountSettingUpsertOne) UpdateBadgeSmall() *AppPurchaseAmountSettingUpsertOne {
	return u.Update(func(s *AppPurchaseAmountSettingUpsert) {
		s.UpdateBadgeSmall()
	})
}

// SetAmount sets the "amount" field.
func (u *AppPurchaseAmountSettingUpsertOne) SetAmount(v uint64) *AppPurchaseAmountSettingUpsertOne {
	return u.Update(func(s *AppPurchaseAmountSettingUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *AppPurchaseAmountSettingUpsertOne) AddAmount(v uint64) *AppPurchaseAmountSettingUpsertOne {
	return u.Update(func(s *AppPurchaseAmountSettingUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *AppPurchaseAmountSettingUpsertOne) UpdateAmount() *AppPurchaseAmountSettingUpsertOne {
	return u.Update(func(s *AppPurchaseAmountSettingUpsert) {
		s.UpdateAmount()
	})
}

// SetPercent sets the "percent" field.
func (u *AppPurchaseAmountSettingUpsertOne) SetPercent(v uint32) *AppPurchaseAmountSettingUpsertOne {
	return u.Update(func(s *AppPurchaseAmountSettingUpsert) {
		s.SetPercent(v)
	})
}

// AddPercent adds v to the "percent" field.
func (u *AppPurchaseAmountSettingUpsertOne) AddPercent(v uint32) *AppPurchaseAmountSettingUpsertOne {
	return u.Update(func(s *AppPurchaseAmountSettingUpsert) {
		s.AddPercent(v)
	})
}

// UpdatePercent sets the "percent" field to the value that was provided on create.
func (u *AppPurchaseAmountSettingUpsertOne) UpdatePercent() *AppPurchaseAmountSettingUpsertOne {
	return u.Update(func(s *AppPurchaseAmountSettingUpsert) {
		s.UpdatePercent()
	})
}

// SetCreateAt sets the "create_at" field.
func (u *AppPurchaseAmountSettingUpsertOne) SetCreateAt(v uint32) *AppPurchaseAmountSettingUpsertOne {
	return u.Update(func(s *AppPurchaseAmountSettingUpsert) {
		s.SetCreateAt(v)
	})
}

// AddCreateAt adds v to the "create_at" field.
func (u *AppPurchaseAmountSettingUpsertOne) AddCreateAt(v uint32) *AppPurchaseAmountSettingUpsertOne {
	return u.Update(func(s *AppPurchaseAmountSettingUpsert) {
		s.AddCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *AppPurchaseAmountSettingUpsertOne) UpdateCreateAt() *AppPurchaseAmountSettingUpsertOne {
	return u.Update(func(s *AppPurchaseAmountSettingUpsert) {
		s.UpdateCreateAt()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *AppPurchaseAmountSettingUpsertOne) SetUpdateAt(v uint32) *AppPurchaseAmountSettingUpsertOne {
	return u.Update(func(s *AppPurchaseAmountSettingUpsert) {
		s.SetUpdateAt(v)
	})
}

// AddUpdateAt adds v to the "update_at" field.
func (u *AppPurchaseAmountSettingUpsertOne) AddUpdateAt(v uint32) *AppPurchaseAmountSettingUpsertOne {
	return u.Update(func(s *AppPurchaseAmountSettingUpsert) {
		s.AddUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *AppPurchaseAmountSettingUpsertOne) UpdateUpdateAt() *AppPurchaseAmountSettingUpsertOne {
	return u.Update(func(s *AppPurchaseAmountSettingUpsert) {
		s.UpdateUpdateAt()
	})
}

// SetDeleteAt sets the "delete_at" field.
func (u *AppPurchaseAmountSettingUpsertOne) SetDeleteAt(v uint32) *AppPurchaseAmountSettingUpsertOne {
	return u.Update(func(s *AppPurchaseAmountSettingUpsert) {
		s.SetDeleteAt(v)
	})
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *AppPurchaseAmountSettingUpsertOne) AddDeleteAt(v uint32) *AppPurchaseAmountSettingUpsertOne {
	return u.Update(func(s *AppPurchaseAmountSettingUpsert) {
		s.AddDeleteAt(v)
	})
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *AppPurchaseAmountSettingUpsertOne) UpdateDeleteAt() *AppPurchaseAmountSettingUpsertOne {
	return u.Update(func(s *AppPurchaseAmountSettingUpsert) {
		s.UpdateDeleteAt()
	})
}

// Exec executes the query.
func (u *AppPurchaseAmountSettingUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AppPurchaseAmountSettingCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppPurchaseAmountSettingUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AppPurchaseAmountSettingUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: AppPurchaseAmountSettingUpsertOne.ID is not supported by MySQL driver. Use AppPurchaseAmountSettingUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AppPurchaseAmountSettingUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AppPurchaseAmountSettingCreateBulk is the builder for creating many AppPurchaseAmountSetting entities in bulk.
type AppPurchaseAmountSettingCreateBulk struct {
	config
	builders []*AppPurchaseAmountSettingCreate
	conflict []sql.ConflictOption
}

// Save creates the AppPurchaseAmountSetting entities in the database.
func (apascb *AppPurchaseAmountSettingCreateBulk) Save(ctx context.Context) ([]*AppPurchaseAmountSetting, error) {
	specs := make([]*sqlgraph.CreateSpec, len(apascb.builders))
	nodes := make([]*AppPurchaseAmountSetting, len(apascb.builders))
	mutators := make([]Mutator, len(apascb.builders))
	for i := range apascb.builders {
		func(i int, root context.Context) {
			builder := apascb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AppPurchaseAmountSettingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, apascb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = apascb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, apascb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, apascb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (apascb *AppPurchaseAmountSettingCreateBulk) SaveX(ctx context.Context) []*AppPurchaseAmountSetting {
	v, err := apascb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (apascb *AppPurchaseAmountSettingCreateBulk) Exec(ctx context.Context) error {
	_, err := apascb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (apascb *AppPurchaseAmountSettingCreateBulk) ExecX(ctx context.Context) {
	if err := apascb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppPurchaseAmountSetting.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppPurchaseAmountSettingUpsert) {
//			SetAppID(v+v).
//		}).
//		Exec(ctx)
//
func (apascb *AppPurchaseAmountSettingCreateBulk) OnConflict(opts ...sql.ConflictOption) *AppPurchaseAmountSettingUpsertBulk {
	apascb.conflict = opts
	return &AppPurchaseAmountSettingUpsertBulk{
		create: apascb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppPurchaseAmountSetting.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (apascb *AppPurchaseAmountSettingCreateBulk) OnConflictColumns(columns ...string) *AppPurchaseAmountSettingUpsertBulk {
	apascb.conflict = append(apascb.conflict, sql.ConflictColumns(columns...))
	return &AppPurchaseAmountSettingUpsertBulk{
		create: apascb,
	}
}

// AppPurchaseAmountSettingUpsertBulk is the builder for "upsert"-ing
// a bulk of AppPurchaseAmountSetting nodes.
type AppPurchaseAmountSettingUpsertBulk struct {
	create *AppPurchaseAmountSettingCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AppPurchaseAmountSetting.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(apppurchaseamountsetting.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *AppPurchaseAmountSettingUpsertBulk) UpdateNewValues() *AppPurchaseAmountSettingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(apppurchaseamountsetting.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppPurchaseAmountSetting.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *AppPurchaseAmountSettingUpsertBulk) Ignore() *AppPurchaseAmountSettingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppPurchaseAmountSettingUpsertBulk) DoNothing() *AppPurchaseAmountSettingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppPurchaseAmountSettingCreateBulk.OnConflict
// documentation for more info.
func (u *AppPurchaseAmountSettingUpsertBulk) Update(set func(*AppPurchaseAmountSettingUpsert)) *AppPurchaseAmountSettingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppPurchaseAmountSettingUpsert{UpdateSet: update})
	}))
	return u
}

// SetAppID sets the "app_id" field.
func (u *AppPurchaseAmountSettingUpsertBulk) SetAppID(v uuid.UUID) *AppPurchaseAmountSettingUpsertBulk {
	return u.Update(func(s *AppPurchaseAmountSettingUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppPurchaseAmountSettingUpsertBulk) UpdateAppID() *AppPurchaseAmountSettingUpsertBulk {
	return u.Update(func(s *AppPurchaseAmountSettingUpsert) {
		s.UpdateAppID()
	})
}

// SetTitle sets the "title" field.
func (u *AppPurchaseAmountSettingUpsertBulk) SetTitle(v string) *AppPurchaseAmountSettingUpsertBulk {
	return u.Update(func(s *AppPurchaseAmountSettingUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *AppPurchaseAmountSettingUpsertBulk) UpdateTitle() *AppPurchaseAmountSettingUpsertBulk {
	return u.Update(func(s *AppPurchaseAmountSettingUpsert) {
		s.UpdateTitle()
	})
}

// SetBadgeLarge sets the "badge_large" field.
func (u *AppPurchaseAmountSettingUpsertBulk) SetBadgeLarge(v string) *AppPurchaseAmountSettingUpsertBulk {
	return u.Update(func(s *AppPurchaseAmountSettingUpsert) {
		s.SetBadgeLarge(v)
	})
}

// UpdateBadgeLarge sets the "badge_large" field to the value that was provided on create.
func (u *AppPurchaseAmountSettingUpsertBulk) UpdateBadgeLarge() *AppPurchaseAmountSettingUpsertBulk {
	return u.Update(func(s *AppPurchaseAmountSettingUpsert) {
		s.UpdateBadgeLarge()
	})
}

// SetBadgeSmall sets the "badge_small" field.
func (u *AppPurchaseAmountSettingUpsertBulk) SetBadgeSmall(v string) *AppPurchaseAmountSettingUpsertBulk {
	return u.Update(func(s *AppPurchaseAmountSettingUpsert) {
		s.SetBadgeSmall(v)
	})
}

// UpdateBadgeSmall sets the "badge_small" field to the value that was provided on create.
func (u *AppPurchaseAmountSettingUpsertBulk) UpdateBadgeSmall() *AppPurchaseAmountSettingUpsertBulk {
	return u.Update(func(s *AppPurchaseAmountSettingUpsert) {
		s.UpdateBadgeSmall()
	})
}

// SetAmount sets the "amount" field.
func (u *AppPurchaseAmountSettingUpsertBulk) SetAmount(v uint64) *AppPurchaseAmountSettingUpsertBulk {
	return u.Update(func(s *AppPurchaseAmountSettingUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *AppPurchaseAmountSettingUpsertBulk) AddAmount(v uint64) *AppPurchaseAmountSettingUpsertBulk {
	return u.Update(func(s *AppPurchaseAmountSettingUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *AppPurchaseAmountSettingUpsertBulk) UpdateAmount() *AppPurchaseAmountSettingUpsertBulk {
	return u.Update(func(s *AppPurchaseAmountSettingUpsert) {
		s.UpdateAmount()
	})
}

// SetPercent sets the "percent" field.
func (u *AppPurchaseAmountSettingUpsertBulk) SetPercent(v uint32) *AppPurchaseAmountSettingUpsertBulk {
	return u.Update(func(s *AppPurchaseAmountSettingUpsert) {
		s.SetPercent(v)
	})
}

// AddPercent adds v to the "percent" field.
func (u *AppPurchaseAmountSettingUpsertBulk) AddPercent(v uint32) *AppPurchaseAmountSettingUpsertBulk {
	return u.Update(func(s *AppPurchaseAmountSettingUpsert) {
		s.AddPercent(v)
	})
}

// UpdatePercent sets the "percent" field to the value that was provided on create.
func (u *AppPurchaseAmountSettingUpsertBulk) UpdatePercent() *AppPurchaseAmountSettingUpsertBulk {
	return u.Update(func(s *AppPurchaseAmountSettingUpsert) {
		s.UpdatePercent()
	})
}

// SetCreateAt sets the "create_at" field.
func (u *AppPurchaseAmountSettingUpsertBulk) SetCreateAt(v uint32) *AppPurchaseAmountSettingUpsertBulk {
	return u.Update(func(s *AppPurchaseAmountSettingUpsert) {
		s.SetCreateAt(v)
	})
}

// AddCreateAt adds v to the "create_at" field.
func (u *AppPurchaseAmountSettingUpsertBulk) AddCreateAt(v uint32) *AppPurchaseAmountSettingUpsertBulk {
	return u.Update(func(s *AppPurchaseAmountSettingUpsert) {
		s.AddCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *AppPurchaseAmountSettingUpsertBulk) UpdateCreateAt() *AppPurchaseAmountSettingUpsertBulk {
	return u.Update(func(s *AppPurchaseAmountSettingUpsert) {
		s.UpdateCreateAt()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *AppPurchaseAmountSettingUpsertBulk) SetUpdateAt(v uint32) *AppPurchaseAmountSettingUpsertBulk {
	return u.Update(func(s *AppPurchaseAmountSettingUpsert) {
		s.SetUpdateAt(v)
	})
}

// AddUpdateAt adds v to the "update_at" field.
func (u *AppPurchaseAmountSettingUpsertBulk) AddUpdateAt(v uint32) *AppPurchaseAmountSettingUpsertBulk {
	return u.Update(func(s *AppPurchaseAmountSettingUpsert) {
		s.AddUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *AppPurchaseAmountSettingUpsertBulk) UpdateUpdateAt() *AppPurchaseAmountSettingUpsertBulk {
	return u.Update(func(s *AppPurchaseAmountSettingUpsert) {
		s.UpdateUpdateAt()
	})
}

// SetDeleteAt sets the "delete_at" field.
func (u *AppPurchaseAmountSettingUpsertBulk) SetDeleteAt(v uint32) *AppPurchaseAmountSettingUpsertBulk {
	return u.Update(func(s *AppPurchaseAmountSettingUpsert) {
		s.SetDeleteAt(v)
	})
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *AppPurchaseAmountSettingUpsertBulk) AddDeleteAt(v uint32) *AppPurchaseAmountSettingUpsertBulk {
	return u.Update(func(s *AppPurchaseAmountSettingUpsert) {
		s.AddDeleteAt(v)
	})
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *AppPurchaseAmountSettingUpsertBulk) UpdateDeleteAt() *AppPurchaseAmountSettingUpsertBulk {
	return u.Update(func(s *AppPurchaseAmountSettingUpsert) {
		s.UpdateDeleteAt()
	})
}

// Exec executes the query.
func (u *AppPurchaseAmountSettingUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AppPurchaseAmountSettingCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AppPurchaseAmountSettingCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppPurchaseAmountSettingUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
