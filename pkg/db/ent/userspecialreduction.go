// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/userspecialreduction"
	"github.com/google/uuid"
)

// UserSpecialReduction is the model entity for the UserSpecialReduction schema.
type UserSpecialReduction struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID uuid.UUID `json:"app_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount uint64 `json:"amount,omitempty"`
	// ReleaseByUserID holds the value of the "release_by_user_id" field.
	ReleaseByUserID uuid.UUID `json:"release_by_user_id,omitempty"`
	// Start holds the value of the "start" field.
	Start uint32 `json:"start,omitempty"`
	// DurationDays holds the value of the "duration_days" field.
	DurationDays int32 `json:"duration_days,omitempty"`
	// Message holds the value of the "message" field.
	Message string `json:"message,omitempty"`
	// CreateAt holds the value of the "create_at" field.
	CreateAt uint32 `json:"create_at,omitempty"`
	// UpdateAt holds the value of the "update_at" field.
	UpdateAt uint32 `json:"update_at,omitempty"`
	// DeleteAt holds the value of the "delete_at" field.
	DeleteAt uint32 `json:"delete_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserSpecialReduction) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case userspecialreduction.FieldAmount, userspecialreduction.FieldStart, userspecialreduction.FieldDurationDays, userspecialreduction.FieldCreateAt, userspecialreduction.FieldUpdateAt, userspecialreduction.FieldDeleteAt:
			values[i] = new(sql.NullInt64)
		case userspecialreduction.FieldMessage:
			values[i] = new(sql.NullString)
		case userspecialreduction.FieldID, userspecialreduction.FieldAppID, userspecialreduction.FieldUserID, userspecialreduction.FieldReleaseByUserID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type UserSpecialReduction", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserSpecialReduction fields.
func (usr *UserSpecialReduction) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userspecialreduction.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				usr.ID = *value
			}
		case userspecialreduction.FieldAppID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value != nil {
				usr.AppID = *value
			}
		case userspecialreduction.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				usr.UserID = *value
			}
		case userspecialreduction.FieldAmount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				usr.Amount = uint64(value.Int64)
			}
		case userspecialreduction.FieldReleaseByUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field release_by_user_id", values[i])
			} else if value != nil {
				usr.ReleaseByUserID = *value
			}
		case userspecialreduction.FieldStart:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field start", values[i])
			} else if value.Valid {
				usr.Start = uint32(value.Int64)
			}
		case userspecialreduction.FieldDurationDays:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field duration_days", values[i])
			} else if value.Valid {
				usr.DurationDays = int32(value.Int64)
			}
		case userspecialreduction.FieldMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field message", values[i])
			} else if value.Valid {
				usr.Message = value.String
			}
		case userspecialreduction.FieldCreateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				usr.CreateAt = uint32(value.Int64)
			}
		case userspecialreduction.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				usr.UpdateAt = uint32(value.Int64)
			}
		case userspecialreduction.FieldDeleteAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete_at", values[i])
			} else if value.Valid {
				usr.DeleteAt = uint32(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this UserSpecialReduction.
// Note that you need to call UserSpecialReduction.Unwrap() before calling this method if this UserSpecialReduction
// was returned from a transaction, and the transaction was committed or rolled back.
func (usr *UserSpecialReduction) Update() *UserSpecialReductionUpdateOne {
	return (&UserSpecialReductionClient{config: usr.config}).UpdateOne(usr)
}

// Unwrap unwraps the UserSpecialReduction entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (usr *UserSpecialReduction) Unwrap() *UserSpecialReduction {
	_tx, ok := usr.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserSpecialReduction is not a transactional entity")
	}
	usr.config.driver = _tx.drv
	return usr
}

// String implements the fmt.Stringer.
func (usr *UserSpecialReduction) String() string {
	var builder strings.Builder
	builder.WriteString("UserSpecialReduction(")
	builder.WriteString(fmt.Sprintf("id=%v, ", usr.ID))
	builder.WriteString("app_id=")
	builder.WriteString(fmt.Sprintf("%v", usr.AppID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", usr.UserID))
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", usr.Amount))
	builder.WriteString(", ")
	builder.WriteString("release_by_user_id=")
	builder.WriteString(fmt.Sprintf("%v", usr.ReleaseByUserID))
	builder.WriteString(", ")
	builder.WriteString("start=")
	builder.WriteString(fmt.Sprintf("%v", usr.Start))
	builder.WriteString(", ")
	builder.WriteString("duration_days=")
	builder.WriteString(fmt.Sprintf("%v", usr.DurationDays))
	builder.WriteString(", ")
	builder.WriteString("message=")
	builder.WriteString(usr.Message)
	builder.WriteString(", ")
	builder.WriteString("create_at=")
	builder.WriteString(fmt.Sprintf("%v", usr.CreateAt))
	builder.WriteString(", ")
	builder.WriteString("update_at=")
	builder.WriteString(fmt.Sprintf("%v", usr.UpdateAt))
	builder.WriteString(", ")
	builder.WriteString("delete_at=")
	builder.WriteString(fmt.Sprintf("%v", usr.DeleteAt))
	builder.WriteByte(')')
	return builder.String()
}

// UserSpecialReductions is a parsable slice of UserSpecialReduction.
type UserSpecialReductions []*UserSpecialReduction

func (usr UserSpecialReductions) config(cfg config) {
	for _i := range usr {
		usr[_i].config = cfg
	}
}
