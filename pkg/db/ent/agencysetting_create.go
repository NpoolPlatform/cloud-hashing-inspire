// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/agencysetting"
	"github.com/google/uuid"
)

// AgencySettingCreate is the builder for creating a AgencySetting entity.
type AgencySettingCreate struct {
	config
	mutation *AgencySettingMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetAppID sets the "app_id" field.
func (asc *AgencySettingCreate) SetAppID(u uuid.UUID) *AgencySettingCreate {
	asc.mutation.SetAppID(u)
	return asc
}

// SetRegistrationRewardThreshold sets the "registration_reward_threshold" field.
func (asc *AgencySettingCreate) SetRegistrationRewardThreshold(i int32) *AgencySettingCreate {
	asc.mutation.SetRegistrationRewardThreshold(i)
	return asc
}

// SetRegistrationCouponID sets the "registration_coupon_id" field.
func (asc *AgencySettingCreate) SetRegistrationCouponID(u uuid.UUID) *AgencySettingCreate {
	asc.mutation.SetRegistrationCouponID(u)
	return asc
}

// SetKycRewardThreshold sets the "kyc_reward_threshold" field.
func (asc *AgencySettingCreate) SetKycRewardThreshold(i int32) *AgencySettingCreate {
	asc.mutation.SetKycRewardThreshold(i)
	return asc
}

// SetKycCouponID sets the "kyc_coupon_id" field.
func (asc *AgencySettingCreate) SetKycCouponID(u uuid.UUID) *AgencySettingCreate {
	asc.mutation.SetKycCouponID(u)
	return asc
}

// SetTotalPurchaseRewardPercent sets the "total_purchase_reward_percent" field.
func (asc *AgencySettingCreate) SetTotalPurchaseRewardPercent(i int32) *AgencySettingCreate {
	asc.mutation.SetTotalPurchaseRewardPercent(i)
	return asc
}

// SetPurchaseRewardChainLevels sets the "purchase_reward_chain_levels" field.
func (asc *AgencySettingCreate) SetPurchaseRewardChainLevels(i int32) *AgencySettingCreate {
	asc.mutation.SetPurchaseRewardChainLevels(i)
	return asc
}

// SetLevelPurchaseRewardPercent sets the "level_purchase_reward_percent" field.
func (asc *AgencySettingCreate) SetLevelPurchaseRewardPercent(i int32) *AgencySettingCreate {
	asc.mutation.SetLevelPurchaseRewardPercent(i)
	return asc
}

// SetCreateAt sets the "create_at" field.
func (asc *AgencySettingCreate) SetCreateAt(u uint32) *AgencySettingCreate {
	asc.mutation.SetCreateAt(u)
	return asc
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (asc *AgencySettingCreate) SetNillableCreateAt(u *uint32) *AgencySettingCreate {
	if u != nil {
		asc.SetCreateAt(*u)
	}
	return asc
}

// SetUpdateAt sets the "update_at" field.
func (asc *AgencySettingCreate) SetUpdateAt(u uint32) *AgencySettingCreate {
	asc.mutation.SetUpdateAt(u)
	return asc
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (asc *AgencySettingCreate) SetNillableUpdateAt(u *uint32) *AgencySettingCreate {
	if u != nil {
		asc.SetUpdateAt(*u)
	}
	return asc
}

// SetDeleteAt sets the "delete_at" field.
func (asc *AgencySettingCreate) SetDeleteAt(u uint32) *AgencySettingCreate {
	asc.mutation.SetDeleteAt(u)
	return asc
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (asc *AgencySettingCreate) SetNillableDeleteAt(u *uint32) *AgencySettingCreate {
	if u != nil {
		asc.SetDeleteAt(*u)
	}
	return asc
}

// SetID sets the "id" field.
func (asc *AgencySettingCreate) SetID(u uuid.UUID) *AgencySettingCreate {
	asc.mutation.SetID(u)
	return asc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (asc *AgencySettingCreate) SetNillableID(u *uuid.UUID) *AgencySettingCreate {
	if u != nil {
		asc.SetID(*u)
	}
	return asc
}

// Mutation returns the AgencySettingMutation object of the builder.
func (asc *AgencySettingCreate) Mutation() *AgencySettingMutation {
	return asc.mutation
}

// Save creates the AgencySetting in the database.
func (asc *AgencySettingCreate) Save(ctx context.Context) (*AgencySetting, error) {
	var (
		err  error
		node *AgencySetting
	)
	asc.defaults()
	if len(asc.hooks) == 0 {
		if err = asc.check(); err != nil {
			return nil, err
		}
		node, err = asc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AgencySettingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = asc.check(); err != nil {
				return nil, err
			}
			asc.mutation = mutation
			if node, err = asc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(asc.hooks) - 1; i >= 0; i-- {
			if asc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = asc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, asc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (asc *AgencySettingCreate) SaveX(ctx context.Context) *AgencySetting {
	v, err := asc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (asc *AgencySettingCreate) Exec(ctx context.Context) error {
	_, err := asc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asc *AgencySettingCreate) ExecX(ctx context.Context) {
	if err := asc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (asc *AgencySettingCreate) defaults() {
	if _, ok := asc.mutation.CreateAt(); !ok {
		v := agencysetting.DefaultCreateAt()
		asc.mutation.SetCreateAt(v)
	}
	if _, ok := asc.mutation.UpdateAt(); !ok {
		v := agencysetting.DefaultUpdateAt()
		asc.mutation.SetUpdateAt(v)
	}
	if _, ok := asc.mutation.DeleteAt(); !ok {
		v := agencysetting.DefaultDeleteAt()
		asc.mutation.SetDeleteAt(v)
	}
	if _, ok := asc.mutation.ID(); !ok {
		v := agencysetting.DefaultID()
		asc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (asc *AgencySettingCreate) check() error {
	if _, ok := asc.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`ent: missing required field "AgencySetting.app_id"`)}
	}
	if _, ok := asc.mutation.RegistrationRewardThreshold(); !ok {
		return &ValidationError{Name: "registration_reward_threshold", err: errors.New(`ent: missing required field "AgencySetting.registration_reward_threshold"`)}
	}
	if _, ok := asc.mutation.RegistrationCouponID(); !ok {
		return &ValidationError{Name: "registration_coupon_id", err: errors.New(`ent: missing required field "AgencySetting.registration_coupon_id"`)}
	}
	if _, ok := asc.mutation.KycRewardThreshold(); !ok {
		return &ValidationError{Name: "kyc_reward_threshold", err: errors.New(`ent: missing required field "AgencySetting.kyc_reward_threshold"`)}
	}
	if _, ok := asc.mutation.KycCouponID(); !ok {
		return &ValidationError{Name: "kyc_coupon_id", err: errors.New(`ent: missing required field "AgencySetting.kyc_coupon_id"`)}
	}
	if _, ok := asc.mutation.TotalPurchaseRewardPercent(); !ok {
		return &ValidationError{Name: "total_purchase_reward_percent", err: errors.New(`ent: missing required field "AgencySetting.total_purchase_reward_percent"`)}
	}
	if _, ok := asc.mutation.PurchaseRewardChainLevels(); !ok {
		return &ValidationError{Name: "purchase_reward_chain_levels", err: errors.New(`ent: missing required field "AgencySetting.purchase_reward_chain_levels"`)}
	}
	if _, ok := asc.mutation.LevelPurchaseRewardPercent(); !ok {
		return &ValidationError{Name: "level_purchase_reward_percent", err: errors.New(`ent: missing required field "AgencySetting.level_purchase_reward_percent"`)}
	}
	if _, ok := asc.mutation.CreateAt(); !ok {
		return &ValidationError{Name: "create_at", err: errors.New(`ent: missing required field "AgencySetting.create_at"`)}
	}
	if _, ok := asc.mutation.UpdateAt(); !ok {
		return &ValidationError{Name: "update_at", err: errors.New(`ent: missing required field "AgencySetting.update_at"`)}
	}
	if _, ok := asc.mutation.DeleteAt(); !ok {
		return &ValidationError{Name: "delete_at", err: errors.New(`ent: missing required field "AgencySetting.delete_at"`)}
	}
	return nil
}

func (asc *AgencySettingCreate) sqlSave(ctx context.Context) (*AgencySetting, error) {
	_node, _spec := asc.createSpec()
	if err := sqlgraph.CreateNode(ctx, asc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (asc *AgencySettingCreate) createSpec() (*AgencySetting, *sqlgraph.CreateSpec) {
	var (
		_node = &AgencySetting{config: asc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: agencysetting.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: agencysetting.FieldID,
			},
		}
	)
	_spec.OnConflict = asc.conflict
	if id, ok := asc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := asc.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: agencysetting.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := asc.mutation.RegistrationRewardThreshold(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: agencysetting.FieldRegistrationRewardThreshold,
		})
		_node.RegistrationRewardThreshold = value
	}
	if value, ok := asc.mutation.RegistrationCouponID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: agencysetting.FieldRegistrationCouponID,
		})
		_node.RegistrationCouponID = value
	}
	if value, ok := asc.mutation.KycRewardThreshold(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: agencysetting.FieldKycRewardThreshold,
		})
		_node.KycRewardThreshold = value
	}
	if value, ok := asc.mutation.KycCouponID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: agencysetting.FieldKycCouponID,
		})
		_node.KycCouponID = value
	}
	if value, ok := asc.mutation.TotalPurchaseRewardPercent(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: agencysetting.FieldTotalPurchaseRewardPercent,
		})
		_node.TotalPurchaseRewardPercent = value
	}
	if value, ok := asc.mutation.PurchaseRewardChainLevels(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: agencysetting.FieldPurchaseRewardChainLevels,
		})
		_node.PurchaseRewardChainLevels = value
	}
	if value, ok := asc.mutation.LevelPurchaseRewardPercent(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: agencysetting.FieldLevelPurchaseRewardPercent,
		})
		_node.LevelPurchaseRewardPercent = value
	}
	if value, ok := asc.mutation.CreateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: agencysetting.FieldCreateAt,
		})
		_node.CreateAt = value
	}
	if value, ok := asc.mutation.UpdateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: agencysetting.FieldUpdateAt,
		})
		_node.UpdateAt = value
	}
	if value, ok := asc.mutation.DeleteAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: agencysetting.FieldDeleteAt,
		})
		_node.DeleteAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AgencySetting.Create().
//		SetAppID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AgencySettingUpsert) {
//			SetAppID(v+v).
//		}).
//		Exec(ctx)
//
func (asc *AgencySettingCreate) OnConflict(opts ...sql.ConflictOption) *AgencySettingUpsertOne {
	asc.conflict = opts
	return &AgencySettingUpsertOne{
		create: asc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AgencySetting.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (asc *AgencySettingCreate) OnConflictColumns(columns ...string) *AgencySettingUpsertOne {
	asc.conflict = append(asc.conflict, sql.ConflictColumns(columns...))
	return &AgencySettingUpsertOne{
		create: asc,
	}
}

type (
	// AgencySettingUpsertOne is the builder for "upsert"-ing
	//  one AgencySetting node.
	AgencySettingUpsertOne struct {
		create *AgencySettingCreate
	}

	// AgencySettingUpsert is the "OnConflict" setter.
	AgencySettingUpsert struct {
		*sql.UpdateSet
	}
)

// SetAppID sets the "app_id" field.
func (u *AgencySettingUpsert) SetAppID(v uuid.UUID) *AgencySettingUpsert {
	u.Set(agencysetting.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AgencySettingUpsert) UpdateAppID() *AgencySettingUpsert {
	u.SetExcluded(agencysetting.FieldAppID)
	return u
}

// SetRegistrationRewardThreshold sets the "registration_reward_threshold" field.
func (u *AgencySettingUpsert) SetRegistrationRewardThreshold(v int32) *AgencySettingUpsert {
	u.Set(agencysetting.FieldRegistrationRewardThreshold, v)
	return u
}

// UpdateRegistrationRewardThreshold sets the "registration_reward_threshold" field to the value that was provided on create.
func (u *AgencySettingUpsert) UpdateRegistrationRewardThreshold() *AgencySettingUpsert {
	u.SetExcluded(agencysetting.FieldRegistrationRewardThreshold)
	return u
}

// AddRegistrationRewardThreshold adds v to the "registration_reward_threshold" field.
func (u *AgencySettingUpsert) AddRegistrationRewardThreshold(v int32) *AgencySettingUpsert {
	u.Add(agencysetting.FieldRegistrationRewardThreshold, v)
	return u
}

// SetRegistrationCouponID sets the "registration_coupon_id" field.
func (u *AgencySettingUpsert) SetRegistrationCouponID(v uuid.UUID) *AgencySettingUpsert {
	u.Set(agencysetting.FieldRegistrationCouponID, v)
	return u
}

// UpdateRegistrationCouponID sets the "registration_coupon_id" field to the value that was provided on create.
func (u *AgencySettingUpsert) UpdateRegistrationCouponID() *AgencySettingUpsert {
	u.SetExcluded(agencysetting.FieldRegistrationCouponID)
	return u
}

// SetKycRewardThreshold sets the "kyc_reward_threshold" field.
func (u *AgencySettingUpsert) SetKycRewardThreshold(v int32) *AgencySettingUpsert {
	u.Set(agencysetting.FieldKycRewardThreshold, v)
	return u
}

// UpdateKycRewardThreshold sets the "kyc_reward_threshold" field to the value that was provided on create.
func (u *AgencySettingUpsert) UpdateKycRewardThreshold() *AgencySettingUpsert {
	u.SetExcluded(agencysetting.FieldKycRewardThreshold)
	return u
}

// AddKycRewardThreshold adds v to the "kyc_reward_threshold" field.
func (u *AgencySettingUpsert) AddKycRewardThreshold(v int32) *AgencySettingUpsert {
	u.Add(agencysetting.FieldKycRewardThreshold, v)
	return u
}

// SetKycCouponID sets the "kyc_coupon_id" field.
func (u *AgencySettingUpsert) SetKycCouponID(v uuid.UUID) *AgencySettingUpsert {
	u.Set(agencysetting.FieldKycCouponID, v)
	return u
}

// UpdateKycCouponID sets the "kyc_coupon_id" field to the value that was provided on create.
func (u *AgencySettingUpsert) UpdateKycCouponID() *AgencySettingUpsert {
	u.SetExcluded(agencysetting.FieldKycCouponID)
	return u
}

// SetTotalPurchaseRewardPercent sets the "total_purchase_reward_percent" field.
func (u *AgencySettingUpsert) SetTotalPurchaseRewardPercent(v int32) *AgencySettingUpsert {
	u.Set(agencysetting.FieldTotalPurchaseRewardPercent, v)
	return u
}

// UpdateTotalPurchaseRewardPercent sets the "total_purchase_reward_percent" field to the value that was provided on create.
func (u *AgencySettingUpsert) UpdateTotalPurchaseRewardPercent() *AgencySettingUpsert {
	u.SetExcluded(agencysetting.FieldTotalPurchaseRewardPercent)
	return u
}

// AddTotalPurchaseRewardPercent adds v to the "total_purchase_reward_percent" field.
func (u *AgencySettingUpsert) AddTotalPurchaseRewardPercent(v int32) *AgencySettingUpsert {
	u.Add(agencysetting.FieldTotalPurchaseRewardPercent, v)
	return u
}

// SetPurchaseRewardChainLevels sets the "purchase_reward_chain_levels" field.
func (u *AgencySettingUpsert) SetPurchaseRewardChainLevels(v int32) *AgencySettingUpsert {
	u.Set(agencysetting.FieldPurchaseRewardChainLevels, v)
	return u
}

// UpdatePurchaseRewardChainLevels sets the "purchase_reward_chain_levels" field to the value that was provided on create.
func (u *AgencySettingUpsert) UpdatePurchaseRewardChainLevels() *AgencySettingUpsert {
	u.SetExcluded(agencysetting.FieldPurchaseRewardChainLevels)
	return u
}

// AddPurchaseRewardChainLevels adds v to the "purchase_reward_chain_levels" field.
func (u *AgencySettingUpsert) AddPurchaseRewardChainLevels(v int32) *AgencySettingUpsert {
	u.Add(agencysetting.FieldPurchaseRewardChainLevels, v)
	return u
}

// SetLevelPurchaseRewardPercent sets the "level_purchase_reward_percent" field.
func (u *AgencySettingUpsert) SetLevelPurchaseRewardPercent(v int32) *AgencySettingUpsert {
	u.Set(agencysetting.FieldLevelPurchaseRewardPercent, v)
	return u
}

// UpdateLevelPurchaseRewardPercent sets the "level_purchase_reward_percent" field to the value that was provided on create.
func (u *AgencySettingUpsert) UpdateLevelPurchaseRewardPercent() *AgencySettingUpsert {
	u.SetExcluded(agencysetting.FieldLevelPurchaseRewardPercent)
	return u
}

// AddLevelPurchaseRewardPercent adds v to the "level_purchase_reward_percent" field.
func (u *AgencySettingUpsert) AddLevelPurchaseRewardPercent(v int32) *AgencySettingUpsert {
	u.Add(agencysetting.FieldLevelPurchaseRewardPercent, v)
	return u
}

// SetCreateAt sets the "create_at" field.
func (u *AgencySettingUpsert) SetCreateAt(v uint32) *AgencySettingUpsert {
	u.Set(agencysetting.FieldCreateAt, v)
	return u
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *AgencySettingUpsert) UpdateCreateAt() *AgencySettingUpsert {
	u.SetExcluded(agencysetting.FieldCreateAt)
	return u
}

// AddCreateAt adds v to the "create_at" field.
func (u *AgencySettingUpsert) AddCreateAt(v uint32) *AgencySettingUpsert {
	u.Add(agencysetting.FieldCreateAt, v)
	return u
}

// SetUpdateAt sets the "update_at" field.
func (u *AgencySettingUpsert) SetUpdateAt(v uint32) *AgencySettingUpsert {
	u.Set(agencysetting.FieldUpdateAt, v)
	return u
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *AgencySettingUpsert) UpdateUpdateAt() *AgencySettingUpsert {
	u.SetExcluded(agencysetting.FieldUpdateAt)
	return u
}

// AddUpdateAt adds v to the "update_at" field.
func (u *AgencySettingUpsert) AddUpdateAt(v uint32) *AgencySettingUpsert {
	u.Add(agencysetting.FieldUpdateAt, v)
	return u
}

// SetDeleteAt sets the "delete_at" field.
func (u *AgencySettingUpsert) SetDeleteAt(v uint32) *AgencySettingUpsert {
	u.Set(agencysetting.FieldDeleteAt, v)
	return u
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *AgencySettingUpsert) UpdateDeleteAt() *AgencySettingUpsert {
	u.SetExcluded(agencysetting.FieldDeleteAt)
	return u
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *AgencySettingUpsert) AddDeleteAt(v uint32) *AgencySettingUpsert {
	u.Add(agencysetting.FieldDeleteAt, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.AgencySetting.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(agencysetting.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *AgencySettingUpsertOne) UpdateNewValues() *AgencySettingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(agencysetting.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.AgencySetting.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *AgencySettingUpsertOne) Ignore() *AgencySettingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AgencySettingUpsertOne) DoNothing() *AgencySettingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AgencySettingCreate.OnConflict
// documentation for more info.
func (u *AgencySettingUpsertOne) Update(set func(*AgencySettingUpsert)) *AgencySettingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AgencySettingUpsert{UpdateSet: update})
	}))
	return u
}

// SetAppID sets the "app_id" field.
func (u *AgencySettingUpsertOne) SetAppID(v uuid.UUID) *AgencySettingUpsertOne {
	return u.Update(func(s *AgencySettingUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AgencySettingUpsertOne) UpdateAppID() *AgencySettingUpsertOne {
	return u.Update(func(s *AgencySettingUpsert) {
		s.UpdateAppID()
	})
}

// SetRegistrationRewardThreshold sets the "registration_reward_threshold" field.
func (u *AgencySettingUpsertOne) SetRegistrationRewardThreshold(v int32) *AgencySettingUpsertOne {
	return u.Update(func(s *AgencySettingUpsert) {
		s.SetRegistrationRewardThreshold(v)
	})
}

// AddRegistrationRewardThreshold adds v to the "registration_reward_threshold" field.
func (u *AgencySettingUpsertOne) AddRegistrationRewardThreshold(v int32) *AgencySettingUpsertOne {
	return u.Update(func(s *AgencySettingUpsert) {
		s.AddRegistrationRewardThreshold(v)
	})
}

// UpdateRegistrationRewardThreshold sets the "registration_reward_threshold" field to the value that was provided on create.
func (u *AgencySettingUpsertOne) UpdateRegistrationRewardThreshold() *AgencySettingUpsertOne {
	return u.Update(func(s *AgencySettingUpsert) {
		s.UpdateRegistrationRewardThreshold()
	})
}

// SetRegistrationCouponID sets the "registration_coupon_id" field.
func (u *AgencySettingUpsertOne) SetRegistrationCouponID(v uuid.UUID) *AgencySettingUpsertOne {
	return u.Update(func(s *AgencySettingUpsert) {
		s.SetRegistrationCouponID(v)
	})
}

// UpdateRegistrationCouponID sets the "registration_coupon_id" field to the value that was provided on create.
func (u *AgencySettingUpsertOne) UpdateRegistrationCouponID() *AgencySettingUpsertOne {
	return u.Update(func(s *AgencySettingUpsert) {
		s.UpdateRegistrationCouponID()
	})
}

// SetKycRewardThreshold sets the "kyc_reward_threshold" field.
func (u *AgencySettingUpsertOne) SetKycRewardThreshold(v int32) *AgencySettingUpsertOne {
	return u.Update(func(s *AgencySettingUpsert) {
		s.SetKycRewardThreshold(v)
	})
}

// AddKycRewardThreshold adds v to the "kyc_reward_threshold" field.
func (u *AgencySettingUpsertOne) AddKycRewardThreshold(v int32) *AgencySettingUpsertOne {
	return u.Update(func(s *AgencySettingUpsert) {
		s.AddKycRewardThreshold(v)
	})
}

// UpdateKycRewardThreshold sets the "kyc_reward_threshold" field to the value that was provided on create.
func (u *AgencySettingUpsertOne) UpdateKycRewardThreshold() *AgencySettingUpsertOne {
	return u.Update(func(s *AgencySettingUpsert) {
		s.UpdateKycRewardThreshold()
	})
}

// SetKycCouponID sets the "kyc_coupon_id" field.
func (u *AgencySettingUpsertOne) SetKycCouponID(v uuid.UUID) *AgencySettingUpsertOne {
	return u.Update(func(s *AgencySettingUpsert) {
		s.SetKycCouponID(v)
	})
}

// UpdateKycCouponID sets the "kyc_coupon_id" field to the value that was provided on create.
func (u *AgencySettingUpsertOne) UpdateKycCouponID() *AgencySettingUpsertOne {
	return u.Update(func(s *AgencySettingUpsert) {
		s.UpdateKycCouponID()
	})
}

// SetTotalPurchaseRewardPercent sets the "total_purchase_reward_percent" field.
func (u *AgencySettingUpsertOne) SetTotalPurchaseRewardPercent(v int32) *AgencySettingUpsertOne {
	return u.Update(func(s *AgencySettingUpsert) {
		s.SetTotalPurchaseRewardPercent(v)
	})
}

// AddTotalPurchaseRewardPercent adds v to the "total_purchase_reward_percent" field.
func (u *AgencySettingUpsertOne) AddTotalPurchaseRewardPercent(v int32) *AgencySettingUpsertOne {
	return u.Update(func(s *AgencySettingUpsert) {
		s.AddTotalPurchaseRewardPercent(v)
	})
}

// UpdateTotalPurchaseRewardPercent sets the "total_purchase_reward_percent" field to the value that was provided on create.
func (u *AgencySettingUpsertOne) UpdateTotalPurchaseRewardPercent() *AgencySettingUpsertOne {
	return u.Update(func(s *AgencySettingUpsert) {
		s.UpdateTotalPurchaseRewardPercent()
	})
}

// SetPurchaseRewardChainLevels sets the "purchase_reward_chain_levels" field.
func (u *AgencySettingUpsertOne) SetPurchaseRewardChainLevels(v int32) *AgencySettingUpsertOne {
	return u.Update(func(s *AgencySettingUpsert) {
		s.SetPurchaseRewardChainLevels(v)
	})
}

// AddPurchaseRewardChainLevels adds v to the "purchase_reward_chain_levels" field.
func (u *AgencySettingUpsertOne) AddPurchaseRewardChainLevels(v int32) *AgencySettingUpsertOne {
	return u.Update(func(s *AgencySettingUpsert) {
		s.AddPurchaseRewardChainLevels(v)
	})
}

// UpdatePurchaseRewardChainLevels sets the "purchase_reward_chain_levels" field to the value that was provided on create.
func (u *AgencySettingUpsertOne) UpdatePurchaseRewardChainLevels() *AgencySettingUpsertOne {
	return u.Update(func(s *AgencySettingUpsert) {
		s.UpdatePurchaseRewardChainLevels()
	})
}

// SetLevelPurchaseRewardPercent sets the "level_purchase_reward_percent" field.
func (u *AgencySettingUpsertOne) SetLevelPurchaseRewardPercent(v int32) *AgencySettingUpsertOne {
	return u.Update(func(s *AgencySettingUpsert) {
		s.SetLevelPurchaseRewardPercent(v)
	})
}

// AddLevelPurchaseRewardPercent adds v to the "level_purchase_reward_percent" field.
func (u *AgencySettingUpsertOne) AddLevelPurchaseRewardPercent(v int32) *AgencySettingUpsertOne {
	return u.Update(func(s *AgencySettingUpsert) {
		s.AddLevelPurchaseRewardPercent(v)
	})
}

// UpdateLevelPurchaseRewardPercent sets the "level_purchase_reward_percent" field to the value that was provided on create.
func (u *AgencySettingUpsertOne) UpdateLevelPurchaseRewardPercent() *AgencySettingUpsertOne {
	return u.Update(func(s *AgencySettingUpsert) {
		s.UpdateLevelPurchaseRewardPercent()
	})
}

// SetCreateAt sets the "create_at" field.
func (u *AgencySettingUpsertOne) SetCreateAt(v uint32) *AgencySettingUpsertOne {
	return u.Update(func(s *AgencySettingUpsert) {
		s.SetCreateAt(v)
	})
}

// AddCreateAt adds v to the "create_at" field.
func (u *AgencySettingUpsertOne) AddCreateAt(v uint32) *AgencySettingUpsertOne {
	return u.Update(func(s *AgencySettingUpsert) {
		s.AddCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *AgencySettingUpsertOne) UpdateCreateAt() *AgencySettingUpsertOne {
	return u.Update(func(s *AgencySettingUpsert) {
		s.UpdateCreateAt()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *AgencySettingUpsertOne) SetUpdateAt(v uint32) *AgencySettingUpsertOne {
	return u.Update(func(s *AgencySettingUpsert) {
		s.SetUpdateAt(v)
	})
}

// AddUpdateAt adds v to the "update_at" field.
func (u *AgencySettingUpsertOne) AddUpdateAt(v uint32) *AgencySettingUpsertOne {
	return u.Update(func(s *AgencySettingUpsert) {
		s.AddUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *AgencySettingUpsertOne) UpdateUpdateAt() *AgencySettingUpsertOne {
	return u.Update(func(s *AgencySettingUpsert) {
		s.UpdateUpdateAt()
	})
}

// SetDeleteAt sets the "delete_at" field.
func (u *AgencySettingUpsertOne) SetDeleteAt(v uint32) *AgencySettingUpsertOne {
	return u.Update(func(s *AgencySettingUpsert) {
		s.SetDeleteAt(v)
	})
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *AgencySettingUpsertOne) AddDeleteAt(v uint32) *AgencySettingUpsertOne {
	return u.Update(func(s *AgencySettingUpsert) {
		s.AddDeleteAt(v)
	})
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *AgencySettingUpsertOne) UpdateDeleteAt() *AgencySettingUpsertOne {
	return u.Update(func(s *AgencySettingUpsert) {
		s.UpdateDeleteAt()
	})
}

// Exec executes the query.
func (u *AgencySettingUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AgencySettingCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AgencySettingUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AgencySettingUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: AgencySettingUpsertOne.ID is not supported by MySQL driver. Use AgencySettingUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AgencySettingUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AgencySettingCreateBulk is the builder for creating many AgencySetting entities in bulk.
type AgencySettingCreateBulk struct {
	config
	builders []*AgencySettingCreate
	conflict []sql.ConflictOption
}

// Save creates the AgencySetting entities in the database.
func (ascb *AgencySettingCreateBulk) Save(ctx context.Context) ([]*AgencySetting, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ascb.builders))
	nodes := make([]*AgencySetting, len(ascb.builders))
	mutators := make([]Mutator, len(ascb.builders))
	for i := range ascb.builders {
		func(i int, root context.Context) {
			builder := ascb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AgencySettingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ascb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ascb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ascb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ascb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ascb *AgencySettingCreateBulk) SaveX(ctx context.Context) []*AgencySetting {
	v, err := ascb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ascb *AgencySettingCreateBulk) Exec(ctx context.Context) error {
	_, err := ascb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ascb *AgencySettingCreateBulk) ExecX(ctx context.Context) {
	if err := ascb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AgencySetting.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AgencySettingUpsert) {
//			SetAppID(v+v).
//		}).
//		Exec(ctx)
//
func (ascb *AgencySettingCreateBulk) OnConflict(opts ...sql.ConflictOption) *AgencySettingUpsertBulk {
	ascb.conflict = opts
	return &AgencySettingUpsertBulk{
		create: ascb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AgencySetting.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (ascb *AgencySettingCreateBulk) OnConflictColumns(columns ...string) *AgencySettingUpsertBulk {
	ascb.conflict = append(ascb.conflict, sql.ConflictColumns(columns...))
	return &AgencySettingUpsertBulk{
		create: ascb,
	}
}

// AgencySettingUpsertBulk is the builder for "upsert"-ing
// a bulk of AgencySetting nodes.
type AgencySettingUpsertBulk struct {
	create *AgencySettingCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AgencySetting.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(agencysetting.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *AgencySettingUpsertBulk) UpdateNewValues() *AgencySettingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(agencysetting.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AgencySetting.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *AgencySettingUpsertBulk) Ignore() *AgencySettingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AgencySettingUpsertBulk) DoNothing() *AgencySettingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AgencySettingCreateBulk.OnConflict
// documentation for more info.
func (u *AgencySettingUpsertBulk) Update(set func(*AgencySettingUpsert)) *AgencySettingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AgencySettingUpsert{UpdateSet: update})
	}))
	return u
}

// SetAppID sets the "app_id" field.
func (u *AgencySettingUpsertBulk) SetAppID(v uuid.UUID) *AgencySettingUpsertBulk {
	return u.Update(func(s *AgencySettingUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AgencySettingUpsertBulk) UpdateAppID() *AgencySettingUpsertBulk {
	return u.Update(func(s *AgencySettingUpsert) {
		s.UpdateAppID()
	})
}

// SetRegistrationRewardThreshold sets the "registration_reward_threshold" field.
func (u *AgencySettingUpsertBulk) SetRegistrationRewardThreshold(v int32) *AgencySettingUpsertBulk {
	return u.Update(func(s *AgencySettingUpsert) {
		s.SetRegistrationRewardThreshold(v)
	})
}

// AddRegistrationRewardThreshold adds v to the "registration_reward_threshold" field.
func (u *AgencySettingUpsertBulk) AddRegistrationRewardThreshold(v int32) *AgencySettingUpsertBulk {
	return u.Update(func(s *AgencySettingUpsert) {
		s.AddRegistrationRewardThreshold(v)
	})
}

// UpdateRegistrationRewardThreshold sets the "registration_reward_threshold" field to the value that was provided on create.
func (u *AgencySettingUpsertBulk) UpdateRegistrationRewardThreshold() *AgencySettingUpsertBulk {
	return u.Update(func(s *AgencySettingUpsert) {
		s.UpdateRegistrationRewardThreshold()
	})
}

// SetRegistrationCouponID sets the "registration_coupon_id" field.
func (u *AgencySettingUpsertBulk) SetRegistrationCouponID(v uuid.UUID) *AgencySettingUpsertBulk {
	return u.Update(func(s *AgencySettingUpsert) {
		s.SetRegistrationCouponID(v)
	})
}

// UpdateRegistrationCouponID sets the "registration_coupon_id" field to the value that was provided on create.
func (u *AgencySettingUpsertBulk) UpdateRegistrationCouponID() *AgencySettingUpsertBulk {
	return u.Update(func(s *AgencySettingUpsert) {
		s.UpdateRegistrationCouponID()
	})
}

// SetKycRewardThreshold sets the "kyc_reward_threshold" field.
func (u *AgencySettingUpsertBulk) SetKycRewardThreshold(v int32) *AgencySettingUpsertBulk {
	return u.Update(func(s *AgencySettingUpsert) {
		s.SetKycRewardThreshold(v)
	})
}

// AddKycRewardThreshold adds v to the "kyc_reward_threshold" field.
func (u *AgencySettingUpsertBulk) AddKycRewardThreshold(v int32) *AgencySettingUpsertBulk {
	return u.Update(func(s *AgencySettingUpsert) {
		s.AddKycRewardThreshold(v)
	})
}

// UpdateKycRewardThreshold sets the "kyc_reward_threshold" field to the value that was provided on create.
func (u *AgencySettingUpsertBulk) UpdateKycRewardThreshold() *AgencySettingUpsertBulk {
	return u.Update(func(s *AgencySettingUpsert) {
		s.UpdateKycRewardThreshold()
	})
}

// SetKycCouponID sets the "kyc_coupon_id" field.
func (u *AgencySettingUpsertBulk) SetKycCouponID(v uuid.UUID) *AgencySettingUpsertBulk {
	return u.Update(func(s *AgencySettingUpsert) {
		s.SetKycCouponID(v)
	})
}

// UpdateKycCouponID sets the "kyc_coupon_id" field to the value that was provided on create.
func (u *AgencySettingUpsertBulk) UpdateKycCouponID() *AgencySettingUpsertBulk {
	return u.Update(func(s *AgencySettingUpsert) {
		s.UpdateKycCouponID()
	})
}

// SetTotalPurchaseRewardPercent sets the "total_purchase_reward_percent" field.
func (u *AgencySettingUpsertBulk) SetTotalPurchaseRewardPercent(v int32) *AgencySettingUpsertBulk {
	return u.Update(func(s *AgencySettingUpsert) {
		s.SetTotalPurchaseRewardPercent(v)
	})
}

// AddTotalPurchaseRewardPercent adds v to the "total_purchase_reward_percent" field.
func (u *AgencySettingUpsertBulk) AddTotalPurchaseRewardPercent(v int32) *AgencySettingUpsertBulk {
	return u.Update(func(s *AgencySettingUpsert) {
		s.AddTotalPurchaseRewardPercent(v)
	})
}

// UpdateTotalPurchaseRewardPercent sets the "total_purchase_reward_percent" field to the value that was provided on create.
func (u *AgencySettingUpsertBulk) UpdateTotalPurchaseRewardPercent() *AgencySettingUpsertBulk {
	return u.Update(func(s *AgencySettingUpsert) {
		s.UpdateTotalPurchaseRewardPercent()
	})
}

// SetPurchaseRewardChainLevels sets the "purchase_reward_chain_levels" field.
func (u *AgencySettingUpsertBulk) SetPurchaseRewardChainLevels(v int32) *AgencySettingUpsertBulk {
	return u.Update(func(s *AgencySettingUpsert) {
		s.SetPurchaseRewardChainLevels(v)
	})
}

// AddPurchaseRewardChainLevels adds v to the "purchase_reward_chain_levels" field.
func (u *AgencySettingUpsertBulk) AddPurchaseRewardChainLevels(v int32) *AgencySettingUpsertBulk {
	return u.Update(func(s *AgencySettingUpsert) {
		s.AddPurchaseRewardChainLevels(v)
	})
}

// UpdatePurchaseRewardChainLevels sets the "purchase_reward_chain_levels" field to the value that was provided on create.
func (u *AgencySettingUpsertBulk) UpdatePurchaseRewardChainLevels() *AgencySettingUpsertBulk {
	return u.Update(func(s *AgencySettingUpsert) {
		s.UpdatePurchaseRewardChainLevels()
	})
}

// SetLevelPurchaseRewardPercent sets the "level_purchase_reward_percent" field.
func (u *AgencySettingUpsertBulk) SetLevelPurchaseRewardPercent(v int32) *AgencySettingUpsertBulk {
	return u.Update(func(s *AgencySettingUpsert) {
		s.SetLevelPurchaseRewardPercent(v)
	})
}

// AddLevelPurchaseRewardPercent adds v to the "level_purchase_reward_percent" field.
func (u *AgencySettingUpsertBulk) AddLevelPurchaseRewardPercent(v int32) *AgencySettingUpsertBulk {
	return u.Update(func(s *AgencySettingUpsert) {
		s.AddLevelPurchaseRewardPercent(v)
	})
}

// UpdateLevelPurchaseRewardPercent sets the "level_purchase_reward_percent" field to the value that was provided on create.
func (u *AgencySettingUpsertBulk) UpdateLevelPurchaseRewardPercent() *AgencySettingUpsertBulk {
	return u.Update(func(s *AgencySettingUpsert) {
		s.UpdateLevelPurchaseRewardPercent()
	})
}

// SetCreateAt sets the "create_at" field.
func (u *AgencySettingUpsertBulk) SetCreateAt(v uint32) *AgencySettingUpsertBulk {
	return u.Update(func(s *AgencySettingUpsert) {
		s.SetCreateAt(v)
	})
}

// AddCreateAt adds v to the "create_at" field.
func (u *AgencySettingUpsertBulk) AddCreateAt(v uint32) *AgencySettingUpsertBulk {
	return u.Update(func(s *AgencySettingUpsert) {
		s.AddCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *AgencySettingUpsertBulk) UpdateCreateAt() *AgencySettingUpsertBulk {
	return u.Update(func(s *AgencySettingUpsert) {
		s.UpdateCreateAt()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *AgencySettingUpsertBulk) SetUpdateAt(v uint32) *AgencySettingUpsertBulk {
	return u.Update(func(s *AgencySettingUpsert) {
		s.SetUpdateAt(v)
	})
}

// AddUpdateAt adds v to the "update_at" field.
func (u *AgencySettingUpsertBulk) AddUpdateAt(v uint32) *AgencySettingUpsertBulk {
	return u.Update(func(s *AgencySettingUpsert) {
		s.AddUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *AgencySettingUpsertBulk) UpdateUpdateAt() *AgencySettingUpsertBulk {
	return u.Update(func(s *AgencySettingUpsert) {
		s.UpdateUpdateAt()
	})
}

// SetDeleteAt sets the "delete_at" field.
func (u *AgencySettingUpsertBulk) SetDeleteAt(v uint32) *AgencySettingUpsertBulk {
	return u.Update(func(s *AgencySettingUpsert) {
		s.SetDeleteAt(v)
	})
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *AgencySettingUpsertBulk) AddDeleteAt(v uint32) *AgencySettingUpsertBulk {
	return u.Update(func(s *AgencySettingUpsert) {
		s.AddDeleteAt(v)
	})
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *AgencySettingUpsertBulk) UpdateDeleteAt() *AgencySettingUpsertBulk {
	return u.Update(func(s *AgencySettingUpsert) {
		s.UpdateDeleteAt()
	})
}

// Exec executes the query.
func (u *AgencySettingUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AgencySettingCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AgencySettingCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AgencySettingUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
