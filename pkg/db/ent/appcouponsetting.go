// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/appcouponsetting"
	"github.com/google/uuid"
)

// AppCouponSetting is the model entity for the AppCouponSetting schema.
type AppCouponSetting struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID uuid.UUID `json:"app_id,omitempty"`
	// DominationLimit holds the value of the "domination_limit" field.
	DominationLimit uint64 `json:"domination_limit,omitempty"`
	// TotalLimit holds the value of the "total_limit" field.
	TotalLimit int32 `json:"total_limit,omitempty"`
	// CreateAt holds the value of the "create_at" field.
	CreateAt uint32 `json:"create_at,omitempty"`
	// UpdateAt holds the value of the "update_at" field.
	UpdateAt uint32 `json:"update_at,omitempty"`
	// DeleteAt holds the value of the "delete_at" field.
	DeleteAt uint32 `json:"delete_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AppCouponSetting) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case appcouponsetting.FieldDominationLimit, appcouponsetting.FieldTotalLimit, appcouponsetting.FieldCreateAt, appcouponsetting.FieldUpdateAt, appcouponsetting.FieldDeleteAt:
			values[i] = new(sql.NullInt64)
		case appcouponsetting.FieldID, appcouponsetting.FieldAppID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AppCouponSetting", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AppCouponSetting fields.
func (acs *AppCouponSetting) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case appcouponsetting.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				acs.ID = *value
			}
		case appcouponsetting.FieldAppID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value != nil {
				acs.AppID = *value
			}
		case appcouponsetting.FieldDominationLimit:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field domination_limit", values[i])
			} else if value.Valid {
				acs.DominationLimit = uint64(value.Int64)
			}
		case appcouponsetting.FieldTotalLimit:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field total_limit", values[i])
			} else if value.Valid {
				acs.TotalLimit = int32(value.Int64)
			}
		case appcouponsetting.FieldCreateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				acs.CreateAt = uint32(value.Int64)
			}
		case appcouponsetting.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				acs.UpdateAt = uint32(value.Int64)
			}
		case appcouponsetting.FieldDeleteAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete_at", values[i])
			} else if value.Valid {
				acs.DeleteAt = uint32(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this AppCouponSetting.
// Note that you need to call AppCouponSetting.Unwrap() before calling this method if this AppCouponSetting
// was returned from a transaction, and the transaction was committed or rolled back.
func (acs *AppCouponSetting) Update() *AppCouponSettingUpdateOne {
	return (&AppCouponSettingClient{config: acs.config}).UpdateOne(acs)
}

// Unwrap unwraps the AppCouponSetting entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (acs *AppCouponSetting) Unwrap() *AppCouponSetting {
	_tx, ok := acs.config.driver.(*txDriver)
	if !ok {
		panic("ent: AppCouponSetting is not a transactional entity")
	}
	acs.config.driver = _tx.drv
	return acs
}

// String implements the fmt.Stringer.
func (acs *AppCouponSetting) String() string {
	var builder strings.Builder
	builder.WriteString("AppCouponSetting(")
	builder.WriteString(fmt.Sprintf("id=%v, ", acs.ID))
	builder.WriteString("app_id=")
	builder.WriteString(fmt.Sprintf("%v", acs.AppID))
	builder.WriteString(", ")
	builder.WriteString("domination_limit=")
	builder.WriteString(fmt.Sprintf("%v", acs.DominationLimit))
	builder.WriteString(", ")
	builder.WriteString("total_limit=")
	builder.WriteString(fmt.Sprintf("%v", acs.TotalLimit))
	builder.WriteString(", ")
	builder.WriteString("create_at=")
	builder.WriteString(fmt.Sprintf("%v", acs.CreateAt))
	builder.WriteString(", ")
	builder.WriteString("update_at=")
	builder.WriteString(fmt.Sprintf("%v", acs.UpdateAt))
	builder.WriteString(", ")
	builder.WriteString("delete_at=")
	builder.WriteString(fmt.Sprintf("%v", acs.DeleteAt))
	builder.WriteByte(')')
	return builder.String()
}

// AppCouponSettings is a parsable slice of AppCouponSetting.
type AppCouponSettings []*AppCouponSetting

func (acs AppCouponSettings) config(cfg config) {
	for _i := range acs {
		acs[_i].config = cfg
	}
}
