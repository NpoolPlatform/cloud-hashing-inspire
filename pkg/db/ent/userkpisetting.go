// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/userkpisetting"
	"github.com/google/uuid"
)

// UserKpiSetting is the model entity for the UserKpiSetting schema.
type UserKpiSetting struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount uint64 `json:"amount,omitempty"`
	// Percent holds the value of the "percent" field.
	Percent int32 `json:"percent,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID uuid.UUID `json:"app_id,omitempty"`
	// GoodID holds the value of the "good_id" field.
	GoodID uuid.UUID `json:"good_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// CreateAt holds the value of the "create_at" field.
	CreateAt uint32 `json:"create_at,omitempty"`
	// UpdateAt holds the value of the "update_at" field.
	UpdateAt uint32 `json:"update_at,omitempty"`
	// DeleteAt holds the value of the "delete_at" field.
	DeleteAt uint32 `json:"delete_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserKpiSetting) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case userkpisetting.FieldAmount, userkpisetting.FieldPercent, userkpisetting.FieldCreateAt, userkpisetting.FieldUpdateAt, userkpisetting.FieldDeleteAt:
			values[i] = new(sql.NullInt64)
		case userkpisetting.FieldID, userkpisetting.FieldAppID, userkpisetting.FieldGoodID, userkpisetting.FieldUserID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type UserKpiSetting", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserKpiSetting fields.
func (uks *UserKpiSetting) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userkpisetting.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				uks.ID = *value
			}
		case userkpisetting.FieldAmount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				uks.Amount = uint64(value.Int64)
			}
		case userkpisetting.FieldPercent:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field percent", values[i])
			} else if value.Valid {
				uks.Percent = int32(value.Int64)
			}
		case userkpisetting.FieldAppID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value != nil {
				uks.AppID = *value
			}
		case userkpisetting.FieldGoodID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field good_id", values[i])
			} else if value != nil {
				uks.GoodID = *value
			}
		case userkpisetting.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				uks.UserID = *value
			}
		case userkpisetting.FieldCreateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				uks.CreateAt = uint32(value.Int64)
			}
		case userkpisetting.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				uks.UpdateAt = uint32(value.Int64)
			}
		case userkpisetting.FieldDeleteAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete_at", values[i])
			} else if value.Valid {
				uks.DeleteAt = uint32(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this UserKpiSetting.
// Note that you need to call UserKpiSetting.Unwrap() before calling this method if this UserKpiSetting
// was returned from a transaction, and the transaction was committed or rolled back.
func (uks *UserKpiSetting) Update() *UserKpiSettingUpdateOne {
	return (&UserKpiSettingClient{config: uks.config}).UpdateOne(uks)
}

// Unwrap unwraps the UserKpiSetting entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (uks *UserKpiSetting) Unwrap() *UserKpiSetting {
	_tx, ok := uks.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserKpiSetting is not a transactional entity")
	}
	uks.config.driver = _tx.drv
	return uks
}

// String implements the fmt.Stringer.
func (uks *UserKpiSetting) String() string {
	var builder strings.Builder
	builder.WriteString("UserKpiSetting(")
	builder.WriteString(fmt.Sprintf("id=%v, ", uks.ID))
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", uks.Amount))
	builder.WriteString(", ")
	builder.WriteString("percent=")
	builder.WriteString(fmt.Sprintf("%v", uks.Percent))
	builder.WriteString(", ")
	builder.WriteString("app_id=")
	builder.WriteString(fmt.Sprintf("%v", uks.AppID))
	builder.WriteString(", ")
	builder.WriteString("good_id=")
	builder.WriteString(fmt.Sprintf("%v", uks.GoodID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", uks.UserID))
	builder.WriteString(", ")
	builder.WriteString("create_at=")
	builder.WriteString(fmt.Sprintf("%v", uks.CreateAt))
	builder.WriteString(", ")
	builder.WriteString("update_at=")
	builder.WriteString(fmt.Sprintf("%v", uks.UpdateAt))
	builder.WriteString(", ")
	builder.WriteString("delete_at=")
	builder.WriteString(fmt.Sprintf("%v", uks.DeleteAt))
	builder.WriteByte(')')
	return builder.String()
}

// UserKpiSettings is a parsable slice of UserKpiSetting.
type UserKpiSettings []*UserKpiSetting

func (uks UserKpiSettings) config(cfg config) {
	for _i := range uks {
		uks[_i].config = cfg
	}
}
