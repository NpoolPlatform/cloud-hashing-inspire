// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/discountpool"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// DiscountPoolUpdate is the builder for updating DiscountPool entities.
type DiscountPoolUpdate struct {
	config
	hooks    []Hook
	mutation *DiscountPoolMutation
}

// Where appends a list predicates to the DiscountPoolUpdate builder.
func (dpu *DiscountPoolUpdate) Where(ps ...predicate.DiscountPool) *DiscountPoolUpdate {
	dpu.mutation.Where(ps...)
	return dpu
}

// SetAppID sets the "app_id" field.
func (dpu *DiscountPoolUpdate) SetAppID(u uuid.UUID) *DiscountPoolUpdate {
	dpu.mutation.SetAppID(u)
	return dpu
}

// SetDiscount sets the "discount" field.
func (dpu *DiscountPoolUpdate) SetDiscount(u uint32) *DiscountPoolUpdate {
	dpu.mutation.ResetDiscount()
	dpu.mutation.SetDiscount(u)
	return dpu
}

// AddDiscount adds u to the "discount" field.
func (dpu *DiscountPoolUpdate) AddDiscount(u int32) *DiscountPoolUpdate {
	dpu.mutation.AddDiscount(u)
	return dpu
}

// SetReleaseByUserID sets the "release_by_user_id" field.
func (dpu *DiscountPoolUpdate) SetReleaseByUserID(u uuid.UUID) *DiscountPoolUpdate {
	dpu.mutation.SetReleaseByUserID(u)
	return dpu
}

// SetStart sets the "start" field.
func (dpu *DiscountPoolUpdate) SetStart(u uint32) *DiscountPoolUpdate {
	dpu.mutation.ResetStart()
	dpu.mutation.SetStart(u)
	return dpu
}

// AddStart adds u to the "start" field.
func (dpu *DiscountPoolUpdate) AddStart(u int32) *DiscountPoolUpdate {
	dpu.mutation.AddStart(u)
	return dpu
}

// SetDurationDays sets the "duration_days" field.
func (dpu *DiscountPoolUpdate) SetDurationDays(i int32) *DiscountPoolUpdate {
	dpu.mutation.ResetDurationDays()
	dpu.mutation.SetDurationDays(i)
	return dpu
}

// AddDurationDays adds i to the "duration_days" field.
func (dpu *DiscountPoolUpdate) AddDurationDays(i int32) *DiscountPoolUpdate {
	dpu.mutation.AddDurationDays(i)
	return dpu
}

// SetMessage sets the "message" field.
func (dpu *DiscountPoolUpdate) SetMessage(s string) *DiscountPoolUpdate {
	dpu.mutation.SetMessage(s)
	return dpu
}

// SetName sets the "name" field.
func (dpu *DiscountPoolUpdate) SetName(s string) *DiscountPoolUpdate {
	dpu.mutation.SetName(s)
	return dpu
}

// SetCreateAt sets the "create_at" field.
func (dpu *DiscountPoolUpdate) SetCreateAt(u uint32) *DiscountPoolUpdate {
	dpu.mutation.ResetCreateAt()
	dpu.mutation.SetCreateAt(u)
	return dpu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (dpu *DiscountPoolUpdate) SetNillableCreateAt(u *uint32) *DiscountPoolUpdate {
	if u != nil {
		dpu.SetCreateAt(*u)
	}
	return dpu
}

// AddCreateAt adds u to the "create_at" field.
func (dpu *DiscountPoolUpdate) AddCreateAt(u int32) *DiscountPoolUpdate {
	dpu.mutation.AddCreateAt(u)
	return dpu
}

// SetUpdateAt sets the "update_at" field.
func (dpu *DiscountPoolUpdate) SetUpdateAt(u uint32) *DiscountPoolUpdate {
	dpu.mutation.ResetUpdateAt()
	dpu.mutation.SetUpdateAt(u)
	return dpu
}

// AddUpdateAt adds u to the "update_at" field.
func (dpu *DiscountPoolUpdate) AddUpdateAt(u int32) *DiscountPoolUpdate {
	dpu.mutation.AddUpdateAt(u)
	return dpu
}

// SetDeleteAt sets the "delete_at" field.
func (dpu *DiscountPoolUpdate) SetDeleteAt(u uint32) *DiscountPoolUpdate {
	dpu.mutation.ResetDeleteAt()
	dpu.mutation.SetDeleteAt(u)
	return dpu
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (dpu *DiscountPoolUpdate) SetNillableDeleteAt(u *uint32) *DiscountPoolUpdate {
	if u != nil {
		dpu.SetDeleteAt(*u)
	}
	return dpu
}

// AddDeleteAt adds u to the "delete_at" field.
func (dpu *DiscountPoolUpdate) AddDeleteAt(u int32) *DiscountPoolUpdate {
	dpu.mutation.AddDeleteAt(u)
	return dpu
}

// Mutation returns the DiscountPoolMutation object of the builder.
func (dpu *DiscountPoolUpdate) Mutation() *DiscountPoolMutation {
	return dpu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dpu *DiscountPoolUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	dpu.defaults()
	if len(dpu.hooks) == 0 {
		if err = dpu.check(); err != nil {
			return 0, err
		}
		affected, err = dpu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DiscountPoolMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dpu.check(); err != nil {
				return 0, err
			}
			dpu.mutation = mutation
			affected, err = dpu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(dpu.hooks) - 1; i >= 0; i-- {
			if dpu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dpu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dpu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (dpu *DiscountPoolUpdate) SaveX(ctx context.Context) int {
	affected, err := dpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dpu *DiscountPoolUpdate) Exec(ctx context.Context) error {
	_, err := dpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dpu *DiscountPoolUpdate) ExecX(ctx context.Context) {
	if err := dpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dpu *DiscountPoolUpdate) defaults() {
	if _, ok := dpu.mutation.UpdateAt(); !ok {
		v := discountpool.UpdateDefaultUpdateAt()
		dpu.mutation.SetUpdateAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dpu *DiscountPoolUpdate) check() error {
	if v, ok := dpu.mutation.Message(); ok {
		if err := discountpool.MessageValidator(v); err != nil {
			return &ValidationError{Name: "message", err: fmt.Errorf(`ent: validator failed for field "DiscountPool.message": %w`, err)}
		}
	}
	if v, ok := dpu.mutation.Name(); ok {
		if err := discountpool.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "DiscountPool.name": %w`, err)}
		}
	}
	return nil
}

func (dpu *DiscountPoolUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   discountpool.Table,
			Columns: discountpool.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: discountpool.FieldID,
			},
		},
	}
	if ps := dpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dpu.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: discountpool.FieldAppID,
		})
	}
	if value, ok := dpu.mutation.Discount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: discountpool.FieldDiscount,
		})
	}
	if value, ok := dpu.mutation.AddedDiscount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: discountpool.FieldDiscount,
		})
	}
	if value, ok := dpu.mutation.ReleaseByUserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: discountpool.FieldReleaseByUserID,
		})
	}
	if value, ok := dpu.mutation.Start(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: discountpool.FieldStart,
		})
	}
	if value, ok := dpu.mutation.AddedStart(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: discountpool.FieldStart,
		})
	}
	if value, ok := dpu.mutation.DurationDays(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: discountpool.FieldDurationDays,
		})
	}
	if value, ok := dpu.mutation.AddedDurationDays(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: discountpool.FieldDurationDays,
		})
	}
	if value, ok := dpu.mutation.Message(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: discountpool.FieldMessage,
		})
	}
	if value, ok := dpu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: discountpool.FieldName,
		})
	}
	if value, ok := dpu.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: discountpool.FieldCreateAt,
		})
	}
	if value, ok := dpu.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: discountpool.FieldCreateAt,
		})
	}
	if value, ok := dpu.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: discountpool.FieldUpdateAt,
		})
	}
	if value, ok := dpu.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: discountpool.FieldUpdateAt,
		})
	}
	if value, ok := dpu.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: discountpool.FieldDeleteAt,
		})
	}
	if value, ok := dpu.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: discountpool.FieldDeleteAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{discountpool.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// DiscountPoolUpdateOne is the builder for updating a single DiscountPool entity.
type DiscountPoolUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DiscountPoolMutation
}

// SetAppID sets the "app_id" field.
func (dpuo *DiscountPoolUpdateOne) SetAppID(u uuid.UUID) *DiscountPoolUpdateOne {
	dpuo.mutation.SetAppID(u)
	return dpuo
}

// SetDiscount sets the "discount" field.
func (dpuo *DiscountPoolUpdateOne) SetDiscount(u uint32) *DiscountPoolUpdateOne {
	dpuo.mutation.ResetDiscount()
	dpuo.mutation.SetDiscount(u)
	return dpuo
}

// AddDiscount adds u to the "discount" field.
func (dpuo *DiscountPoolUpdateOne) AddDiscount(u int32) *DiscountPoolUpdateOne {
	dpuo.mutation.AddDiscount(u)
	return dpuo
}

// SetReleaseByUserID sets the "release_by_user_id" field.
func (dpuo *DiscountPoolUpdateOne) SetReleaseByUserID(u uuid.UUID) *DiscountPoolUpdateOne {
	dpuo.mutation.SetReleaseByUserID(u)
	return dpuo
}

// SetStart sets the "start" field.
func (dpuo *DiscountPoolUpdateOne) SetStart(u uint32) *DiscountPoolUpdateOne {
	dpuo.mutation.ResetStart()
	dpuo.mutation.SetStart(u)
	return dpuo
}

// AddStart adds u to the "start" field.
func (dpuo *DiscountPoolUpdateOne) AddStart(u int32) *DiscountPoolUpdateOne {
	dpuo.mutation.AddStart(u)
	return dpuo
}

// SetDurationDays sets the "duration_days" field.
func (dpuo *DiscountPoolUpdateOne) SetDurationDays(i int32) *DiscountPoolUpdateOne {
	dpuo.mutation.ResetDurationDays()
	dpuo.mutation.SetDurationDays(i)
	return dpuo
}

// AddDurationDays adds i to the "duration_days" field.
func (dpuo *DiscountPoolUpdateOne) AddDurationDays(i int32) *DiscountPoolUpdateOne {
	dpuo.mutation.AddDurationDays(i)
	return dpuo
}

// SetMessage sets the "message" field.
func (dpuo *DiscountPoolUpdateOne) SetMessage(s string) *DiscountPoolUpdateOne {
	dpuo.mutation.SetMessage(s)
	return dpuo
}

// SetName sets the "name" field.
func (dpuo *DiscountPoolUpdateOne) SetName(s string) *DiscountPoolUpdateOne {
	dpuo.mutation.SetName(s)
	return dpuo
}

// SetCreateAt sets the "create_at" field.
func (dpuo *DiscountPoolUpdateOne) SetCreateAt(u uint32) *DiscountPoolUpdateOne {
	dpuo.mutation.ResetCreateAt()
	dpuo.mutation.SetCreateAt(u)
	return dpuo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (dpuo *DiscountPoolUpdateOne) SetNillableCreateAt(u *uint32) *DiscountPoolUpdateOne {
	if u != nil {
		dpuo.SetCreateAt(*u)
	}
	return dpuo
}

// AddCreateAt adds u to the "create_at" field.
func (dpuo *DiscountPoolUpdateOne) AddCreateAt(u int32) *DiscountPoolUpdateOne {
	dpuo.mutation.AddCreateAt(u)
	return dpuo
}

// SetUpdateAt sets the "update_at" field.
func (dpuo *DiscountPoolUpdateOne) SetUpdateAt(u uint32) *DiscountPoolUpdateOne {
	dpuo.mutation.ResetUpdateAt()
	dpuo.mutation.SetUpdateAt(u)
	return dpuo
}

// AddUpdateAt adds u to the "update_at" field.
func (dpuo *DiscountPoolUpdateOne) AddUpdateAt(u int32) *DiscountPoolUpdateOne {
	dpuo.mutation.AddUpdateAt(u)
	return dpuo
}

// SetDeleteAt sets the "delete_at" field.
func (dpuo *DiscountPoolUpdateOne) SetDeleteAt(u uint32) *DiscountPoolUpdateOne {
	dpuo.mutation.ResetDeleteAt()
	dpuo.mutation.SetDeleteAt(u)
	return dpuo
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (dpuo *DiscountPoolUpdateOne) SetNillableDeleteAt(u *uint32) *DiscountPoolUpdateOne {
	if u != nil {
		dpuo.SetDeleteAt(*u)
	}
	return dpuo
}

// AddDeleteAt adds u to the "delete_at" field.
func (dpuo *DiscountPoolUpdateOne) AddDeleteAt(u int32) *DiscountPoolUpdateOne {
	dpuo.mutation.AddDeleteAt(u)
	return dpuo
}

// Mutation returns the DiscountPoolMutation object of the builder.
func (dpuo *DiscountPoolUpdateOne) Mutation() *DiscountPoolMutation {
	return dpuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dpuo *DiscountPoolUpdateOne) Select(field string, fields ...string) *DiscountPoolUpdateOne {
	dpuo.fields = append([]string{field}, fields...)
	return dpuo
}

// Save executes the query and returns the updated DiscountPool entity.
func (dpuo *DiscountPoolUpdateOne) Save(ctx context.Context) (*DiscountPool, error) {
	var (
		err  error
		node *DiscountPool
	)
	dpuo.defaults()
	if len(dpuo.hooks) == 0 {
		if err = dpuo.check(); err != nil {
			return nil, err
		}
		node, err = dpuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DiscountPoolMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dpuo.check(); err != nil {
				return nil, err
			}
			dpuo.mutation = mutation
			node, err = dpuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(dpuo.hooks) - 1; i >= 0; i-- {
			if dpuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dpuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, dpuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*DiscountPool)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from DiscountPoolMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (dpuo *DiscountPoolUpdateOne) SaveX(ctx context.Context) *DiscountPool {
	node, err := dpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dpuo *DiscountPoolUpdateOne) Exec(ctx context.Context) error {
	_, err := dpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dpuo *DiscountPoolUpdateOne) ExecX(ctx context.Context) {
	if err := dpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dpuo *DiscountPoolUpdateOne) defaults() {
	if _, ok := dpuo.mutation.UpdateAt(); !ok {
		v := discountpool.UpdateDefaultUpdateAt()
		dpuo.mutation.SetUpdateAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dpuo *DiscountPoolUpdateOne) check() error {
	if v, ok := dpuo.mutation.Message(); ok {
		if err := discountpool.MessageValidator(v); err != nil {
			return &ValidationError{Name: "message", err: fmt.Errorf(`ent: validator failed for field "DiscountPool.message": %w`, err)}
		}
	}
	if v, ok := dpuo.mutation.Name(); ok {
		if err := discountpool.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "DiscountPool.name": %w`, err)}
		}
	}
	return nil
}

func (dpuo *DiscountPoolUpdateOne) sqlSave(ctx context.Context) (_node *DiscountPool, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   discountpool.Table,
			Columns: discountpool.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: discountpool.FieldID,
			},
		},
	}
	id, ok := dpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DiscountPool.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, discountpool.FieldID)
		for _, f := range fields {
			if !discountpool.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != discountpool.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dpuo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: discountpool.FieldAppID,
		})
	}
	if value, ok := dpuo.mutation.Discount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: discountpool.FieldDiscount,
		})
	}
	if value, ok := dpuo.mutation.AddedDiscount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: discountpool.FieldDiscount,
		})
	}
	if value, ok := dpuo.mutation.ReleaseByUserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: discountpool.FieldReleaseByUserID,
		})
	}
	if value, ok := dpuo.mutation.Start(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: discountpool.FieldStart,
		})
	}
	if value, ok := dpuo.mutation.AddedStart(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: discountpool.FieldStart,
		})
	}
	if value, ok := dpuo.mutation.DurationDays(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: discountpool.FieldDurationDays,
		})
	}
	if value, ok := dpuo.mutation.AddedDurationDays(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: discountpool.FieldDurationDays,
		})
	}
	if value, ok := dpuo.mutation.Message(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: discountpool.FieldMessage,
		})
	}
	if value, ok := dpuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: discountpool.FieldName,
		})
	}
	if value, ok := dpuo.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: discountpool.FieldCreateAt,
		})
	}
	if value, ok := dpuo.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: discountpool.FieldCreateAt,
		})
	}
	if value, ok := dpuo.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: discountpool.FieldUpdateAt,
		})
	}
	if value, ok := dpuo.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: discountpool.FieldUpdateAt,
		})
	}
	if value, ok := dpuo.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: discountpool.FieldDeleteAt,
		})
	}
	if value, ok := dpuo.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: discountpool.FieldDeleteAt,
		})
	}
	_node = &DiscountPool{config: dpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{discountpool.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
