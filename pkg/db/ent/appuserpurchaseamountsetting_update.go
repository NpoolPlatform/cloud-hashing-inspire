// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/appuserpurchaseamountsetting"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// AppUserPurchaseAmountSettingUpdate is the builder for updating AppUserPurchaseAmountSetting entities.
type AppUserPurchaseAmountSettingUpdate struct {
	config
	hooks    []Hook
	mutation *AppUserPurchaseAmountSettingMutation
}

// Where appends a list predicates to the AppUserPurchaseAmountSettingUpdate builder.
func (aupasu *AppUserPurchaseAmountSettingUpdate) Where(ps ...predicate.AppUserPurchaseAmountSetting) *AppUserPurchaseAmountSettingUpdate {
	aupasu.mutation.Where(ps...)
	return aupasu
}

// SetAppID sets the "app_id" field.
func (aupasu *AppUserPurchaseAmountSettingUpdate) SetAppID(u uuid.UUID) *AppUserPurchaseAmountSettingUpdate {
	aupasu.mutation.SetAppID(u)
	return aupasu
}

// SetUserID sets the "user_id" field.
func (aupasu *AppUserPurchaseAmountSettingUpdate) SetUserID(u uuid.UUID) *AppUserPurchaseAmountSettingUpdate {
	aupasu.mutation.SetUserID(u)
	return aupasu
}

// SetTitle sets the "title" field.
func (aupasu *AppUserPurchaseAmountSettingUpdate) SetTitle(s string) *AppUserPurchaseAmountSettingUpdate {
	aupasu.mutation.SetTitle(s)
	return aupasu
}

// SetAmount sets the "amount" field.
func (aupasu *AppUserPurchaseAmountSettingUpdate) SetAmount(u uint64) *AppUserPurchaseAmountSettingUpdate {
	aupasu.mutation.ResetAmount()
	aupasu.mutation.SetAmount(u)
	return aupasu
}

// AddAmount adds u to the "amount" field.
func (aupasu *AppUserPurchaseAmountSettingUpdate) AddAmount(u int64) *AppUserPurchaseAmountSettingUpdate {
	aupasu.mutation.AddAmount(u)
	return aupasu
}

// SetPercent sets the "percent" field.
func (aupasu *AppUserPurchaseAmountSettingUpdate) SetPercent(u uint32) *AppUserPurchaseAmountSettingUpdate {
	aupasu.mutation.ResetPercent()
	aupasu.mutation.SetPercent(u)
	return aupasu
}

// AddPercent adds u to the "percent" field.
func (aupasu *AppUserPurchaseAmountSettingUpdate) AddPercent(u int32) *AppUserPurchaseAmountSettingUpdate {
	aupasu.mutation.AddPercent(u)
	return aupasu
}

// SetStart sets the "start" field.
func (aupasu *AppUserPurchaseAmountSettingUpdate) SetStart(u uint32) *AppUserPurchaseAmountSettingUpdate {
	aupasu.mutation.ResetStart()
	aupasu.mutation.SetStart(u)
	return aupasu
}

// AddStart adds u to the "start" field.
func (aupasu *AppUserPurchaseAmountSettingUpdate) AddStart(u int32) *AppUserPurchaseAmountSettingUpdate {
	aupasu.mutation.AddStart(u)
	return aupasu
}

// SetEnd sets the "end" field.
func (aupasu *AppUserPurchaseAmountSettingUpdate) SetEnd(u uint32) *AppUserPurchaseAmountSettingUpdate {
	aupasu.mutation.ResetEnd()
	aupasu.mutation.SetEnd(u)
	return aupasu
}

// AddEnd adds u to the "end" field.
func (aupasu *AppUserPurchaseAmountSettingUpdate) AddEnd(u int32) *AppUserPurchaseAmountSettingUpdate {
	aupasu.mutation.AddEnd(u)
	return aupasu
}

// SetBadgeLarge sets the "badge_large" field.
func (aupasu *AppUserPurchaseAmountSettingUpdate) SetBadgeLarge(s string) *AppUserPurchaseAmountSettingUpdate {
	aupasu.mutation.SetBadgeLarge(s)
	return aupasu
}

// SetBadgeSmall sets the "badge_small" field.
func (aupasu *AppUserPurchaseAmountSettingUpdate) SetBadgeSmall(s string) *AppUserPurchaseAmountSettingUpdate {
	aupasu.mutation.SetBadgeSmall(s)
	return aupasu
}

// SetCreateAt sets the "create_at" field.
func (aupasu *AppUserPurchaseAmountSettingUpdate) SetCreateAt(u uint32) *AppUserPurchaseAmountSettingUpdate {
	aupasu.mutation.ResetCreateAt()
	aupasu.mutation.SetCreateAt(u)
	return aupasu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (aupasu *AppUserPurchaseAmountSettingUpdate) SetNillableCreateAt(u *uint32) *AppUserPurchaseAmountSettingUpdate {
	if u != nil {
		aupasu.SetCreateAt(*u)
	}
	return aupasu
}

// AddCreateAt adds u to the "create_at" field.
func (aupasu *AppUserPurchaseAmountSettingUpdate) AddCreateAt(u int32) *AppUserPurchaseAmountSettingUpdate {
	aupasu.mutation.AddCreateAt(u)
	return aupasu
}

// SetUpdateAt sets the "update_at" field.
func (aupasu *AppUserPurchaseAmountSettingUpdate) SetUpdateAt(u uint32) *AppUserPurchaseAmountSettingUpdate {
	aupasu.mutation.ResetUpdateAt()
	aupasu.mutation.SetUpdateAt(u)
	return aupasu
}

// AddUpdateAt adds u to the "update_at" field.
func (aupasu *AppUserPurchaseAmountSettingUpdate) AddUpdateAt(u int32) *AppUserPurchaseAmountSettingUpdate {
	aupasu.mutation.AddUpdateAt(u)
	return aupasu
}

// SetDeleteAt sets the "delete_at" field.
func (aupasu *AppUserPurchaseAmountSettingUpdate) SetDeleteAt(u uint32) *AppUserPurchaseAmountSettingUpdate {
	aupasu.mutation.ResetDeleteAt()
	aupasu.mutation.SetDeleteAt(u)
	return aupasu
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (aupasu *AppUserPurchaseAmountSettingUpdate) SetNillableDeleteAt(u *uint32) *AppUserPurchaseAmountSettingUpdate {
	if u != nil {
		aupasu.SetDeleteAt(*u)
	}
	return aupasu
}

// AddDeleteAt adds u to the "delete_at" field.
func (aupasu *AppUserPurchaseAmountSettingUpdate) AddDeleteAt(u int32) *AppUserPurchaseAmountSettingUpdate {
	aupasu.mutation.AddDeleteAt(u)
	return aupasu
}

// Mutation returns the AppUserPurchaseAmountSettingMutation object of the builder.
func (aupasu *AppUserPurchaseAmountSettingUpdate) Mutation() *AppUserPurchaseAmountSettingMutation {
	return aupasu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aupasu *AppUserPurchaseAmountSettingUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	aupasu.defaults()
	if len(aupasu.hooks) == 0 {
		affected, err = aupasu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppUserPurchaseAmountSettingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			aupasu.mutation = mutation
			affected, err = aupasu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(aupasu.hooks) - 1; i >= 0; i-- {
			if aupasu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = aupasu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aupasu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (aupasu *AppUserPurchaseAmountSettingUpdate) SaveX(ctx context.Context) int {
	affected, err := aupasu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aupasu *AppUserPurchaseAmountSettingUpdate) Exec(ctx context.Context) error {
	_, err := aupasu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aupasu *AppUserPurchaseAmountSettingUpdate) ExecX(ctx context.Context) {
	if err := aupasu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aupasu *AppUserPurchaseAmountSettingUpdate) defaults() {
	if _, ok := aupasu.mutation.UpdateAt(); !ok {
		v := appuserpurchaseamountsetting.UpdateDefaultUpdateAt()
		aupasu.mutation.SetUpdateAt(v)
	}
}

func (aupasu *AppUserPurchaseAmountSettingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   appuserpurchaseamountsetting.Table,
			Columns: appuserpurchaseamountsetting.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: appuserpurchaseamountsetting.FieldID,
			},
		},
	}
	if ps := aupasu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aupasu.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appuserpurchaseamountsetting.FieldAppID,
		})
	}
	if value, ok := aupasu.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appuserpurchaseamountsetting.FieldUserID,
		})
	}
	if value, ok := aupasu.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appuserpurchaseamountsetting.FieldTitle,
		})
	}
	if value, ok := aupasu.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: appuserpurchaseamountsetting.FieldAmount,
		})
	}
	if value, ok := aupasu.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: appuserpurchaseamountsetting.FieldAmount,
		})
	}
	if value, ok := aupasu.mutation.Percent(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appuserpurchaseamountsetting.FieldPercent,
		})
	}
	if value, ok := aupasu.mutation.AddedPercent(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appuserpurchaseamountsetting.FieldPercent,
		})
	}
	if value, ok := aupasu.mutation.Start(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appuserpurchaseamountsetting.FieldStart,
		})
	}
	if value, ok := aupasu.mutation.AddedStart(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appuserpurchaseamountsetting.FieldStart,
		})
	}
	if value, ok := aupasu.mutation.End(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appuserpurchaseamountsetting.FieldEnd,
		})
	}
	if value, ok := aupasu.mutation.AddedEnd(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appuserpurchaseamountsetting.FieldEnd,
		})
	}
	if value, ok := aupasu.mutation.BadgeLarge(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appuserpurchaseamountsetting.FieldBadgeLarge,
		})
	}
	if value, ok := aupasu.mutation.BadgeSmall(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appuserpurchaseamountsetting.FieldBadgeSmall,
		})
	}
	if value, ok := aupasu.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appuserpurchaseamountsetting.FieldCreateAt,
		})
	}
	if value, ok := aupasu.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appuserpurchaseamountsetting.FieldCreateAt,
		})
	}
	if value, ok := aupasu.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appuserpurchaseamountsetting.FieldUpdateAt,
		})
	}
	if value, ok := aupasu.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appuserpurchaseamountsetting.FieldUpdateAt,
		})
	}
	if value, ok := aupasu.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appuserpurchaseamountsetting.FieldDeleteAt,
		})
	}
	if value, ok := aupasu.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appuserpurchaseamountsetting.FieldDeleteAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, aupasu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appuserpurchaseamountsetting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AppUserPurchaseAmountSettingUpdateOne is the builder for updating a single AppUserPurchaseAmountSetting entity.
type AppUserPurchaseAmountSettingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AppUserPurchaseAmountSettingMutation
}

// SetAppID sets the "app_id" field.
func (aupasuo *AppUserPurchaseAmountSettingUpdateOne) SetAppID(u uuid.UUID) *AppUserPurchaseAmountSettingUpdateOne {
	aupasuo.mutation.SetAppID(u)
	return aupasuo
}

// SetUserID sets the "user_id" field.
func (aupasuo *AppUserPurchaseAmountSettingUpdateOne) SetUserID(u uuid.UUID) *AppUserPurchaseAmountSettingUpdateOne {
	aupasuo.mutation.SetUserID(u)
	return aupasuo
}

// SetTitle sets the "title" field.
func (aupasuo *AppUserPurchaseAmountSettingUpdateOne) SetTitle(s string) *AppUserPurchaseAmountSettingUpdateOne {
	aupasuo.mutation.SetTitle(s)
	return aupasuo
}

// SetAmount sets the "amount" field.
func (aupasuo *AppUserPurchaseAmountSettingUpdateOne) SetAmount(u uint64) *AppUserPurchaseAmountSettingUpdateOne {
	aupasuo.mutation.ResetAmount()
	aupasuo.mutation.SetAmount(u)
	return aupasuo
}

// AddAmount adds u to the "amount" field.
func (aupasuo *AppUserPurchaseAmountSettingUpdateOne) AddAmount(u int64) *AppUserPurchaseAmountSettingUpdateOne {
	aupasuo.mutation.AddAmount(u)
	return aupasuo
}

// SetPercent sets the "percent" field.
func (aupasuo *AppUserPurchaseAmountSettingUpdateOne) SetPercent(u uint32) *AppUserPurchaseAmountSettingUpdateOne {
	aupasuo.mutation.ResetPercent()
	aupasuo.mutation.SetPercent(u)
	return aupasuo
}

// AddPercent adds u to the "percent" field.
func (aupasuo *AppUserPurchaseAmountSettingUpdateOne) AddPercent(u int32) *AppUserPurchaseAmountSettingUpdateOne {
	aupasuo.mutation.AddPercent(u)
	return aupasuo
}

// SetStart sets the "start" field.
func (aupasuo *AppUserPurchaseAmountSettingUpdateOne) SetStart(u uint32) *AppUserPurchaseAmountSettingUpdateOne {
	aupasuo.mutation.ResetStart()
	aupasuo.mutation.SetStart(u)
	return aupasuo
}

// AddStart adds u to the "start" field.
func (aupasuo *AppUserPurchaseAmountSettingUpdateOne) AddStart(u int32) *AppUserPurchaseAmountSettingUpdateOne {
	aupasuo.mutation.AddStart(u)
	return aupasuo
}

// SetEnd sets the "end" field.
func (aupasuo *AppUserPurchaseAmountSettingUpdateOne) SetEnd(u uint32) *AppUserPurchaseAmountSettingUpdateOne {
	aupasuo.mutation.ResetEnd()
	aupasuo.mutation.SetEnd(u)
	return aupasuo
}

// AddEnd adds u to the "end" field.
func (aupasuo *AppUserPurchaseAmountSettingUpdateOne) AddEnd(u int32) *AppUserPurchaseAmountSettingUpdateOne {
	aupasuo.mutation.AddEnd(u)
	return aupasuo
}

// SetBadgeLarge sets the "badge_large" field.
func (aupasuo *AppUserPurchaseAmountSettingUpdateOne) SetBadgeLarge(s string) *AppUserPurchaseAmountSettingUpdateOne {
	aupasuo.mutation.SetBadgeLarge(s)
	return aupasuo
}

// SetBadgeSmall sets the "badge_small" field.
func (aupasuo *AppUserPurchaseAmountSettingUpdateOne) SetBadgeSmall(s string) *AppUserPurchaseAmountSettingUpdateOne {
	aupasuo.mutation.SetBadgeSmall(s)
	return aupasuo
}

// SetCreateAt sets the "create_at" field.
func (aupasuo *AppUserPurchaseAmountSettingUpdateOne) SetCreateAt(u uint32) *AppUserPurchaseAmountSettingUpdateOne {
	aupasuo.mutation.ResetCreateAt()
	aupasuo.mutation.SetCreateAt(u)
	return aupasuo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (aupasuo *AppUserPurchaseAmountSettingUpdateOne) SetNillableCreateAt(u *uint32) *AppUserPurchaseAmountSettingUpdateOne {
	if u != nil {
		aupasuo.SetCreateAt(*u)
	}
	return aupasuo
}

// AddCreateAt adds u to the "create_at" field.
func (aupasuo *AppUserPurchaseAmountSettingUpdateOne) AddCreateAt(u int32) *AppUserPurchaseAmountSettingUpdateOne {
	aupasuo.mutation.AddCreateAt(u)
	return aupasuo
}

// SetUpdateAt sets the "update_at" field.
func (aupasuo *AppUserPurchaseAmountSettingUpdateOne) SetUpdateAt(u uint32) *AppUserPurchaseAmountSettingUpdateOne {
	aupasuo.mutation.ResetUpdateAt()
	aupasuo.mutation.SetUpdateAt(u)
	return aupasuo
}

// AddUpdateAt adds u to the "update_at" field.
func (aupasuo *AppUserPurchaseAmountSettingUpdateOne) AddUpdateAt(u int32) *AppUserPurchaseAmountSettingUpdateOne {
	aupasuo.mutation.AddUpdateAt(u)
	return aupasuo
}

// SetDeleteAt sets the "delete_at" field.
func (aupasuo *AppUserPurchaseAmountSettingUpdateOne) SetDeleteAt(u uint32) *AppUserPurchaseAmountSettingUpdateOne {
	aupasuo.mutation.ResetDeleteAt()
	aupasuo.mutation.SetDeleteAt(u)
	return aupasuo
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (aupasuo *AppUserPurchaseAmountSettingUpdateOne) SetNillableDeleteAt(u *uint32) *AppUserPurchaseAmountSettingUpdateOne {
	if u != nil {
		aupasuo.SetDeleteAt(*u)
	}
	return aupasuo
}

// AddDeleteAt adds u to the "delete_at" field.
func (aupasuo *AppUserPurchaseAmountSettingUpdateOne) AddDeleteAt(u int32) *AppUserPurchaseAmountSettingUpdateOne {
	aupasuo.mutation.AddDeleteAt(u)
	return aupasuo
}

// Mutation returns the AppUserPurchaseAmountSettingMutation object of the builder.
func (aupasuo *AppUserPurchaseAmountSettingUpdateOne) Mutation() *AppUserPurchaseAmountSettingMutation {
	return aupasuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aupasuo *AppUserPurchaseAmountSettingUpdateOne) Select(field string, fields ...string) *AppUserPurchaseAmountSettingUpdateOne {
	aupasuo.fields = append([]string{field}, fields...)
	return aupasuo
}

// Save executes the query and returns the updated AppUserPurchaseAmountSetting entity.
func (aupasuo *AppUserPurchaseAmountSettingUpdateOne) Save(ctx context.Context) (*AppUserPurchaseAmountSetting, error) {
	var (
		err  error
		node *AppUserPurchaseAmountSetting
	)
	aupasuo.defaults()
	if len(aupasuo.hooks) == 0 {
		node, err = aupasuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppUserPurchaseAmountSettingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			aupasuo.mutation = mutation
			node, err = aupasuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(aupasuo.hooks) - 1; i >= 0; i-- {
			if aupasuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = aupasuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aupasuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (aupasuo *AppUserPurchaseAmountSettingUpdateOne) SaveX(ctx context.Context) *AppUserPurchaseAmountSetting {
	node, err := aupasuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aupasuo *AppUserPurchaseAmountSettingUpdateOne) Exec(ctx context.Context) error {
	_, err := aupasuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aupasuo *AppUserPurchaseAmountSettingUpdateOne) ExecX(ctx context.Context) {
	if err := aupasuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aupasuo *AppUserPurchaseAmountSettingUpdateOne) defaults() {
	if _, ok := aupasuo.mutation.UpdateAt(); !ok {
		v := appuserpurchaseamountsetting.UpdateDefaultUpdateAt()
		aupasuo.mutation.SetUpdateAt(v)
	}
}

func (aupasuo *AppUserPurchaseAmountSettingUpdateOne) sqlSave(ctx context.Context) (_node *AppUserPurchaseAmountSetting, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   appuserpurchaseamountsetting.Table,
			Columns: appuserpurchaseamountsetting.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: appuserpurchaseamountsetting.FieldID,
			},
		},
	}
	id, ok := aupasuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AppUserPurchaseAmountSetting.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aupasuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, appuserpurchaseamountsetting.FieldID)
		for _, f := range fields {
			if !appuserpurchaseamountsetting.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != appuserpurchaseamountsetting.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aupasuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aupasuo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appuserpurchaseamountsetting.FieldAppID,
		})
	}
	if value, ok := aupasuo.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appuserpurchaseamountsetting.FieldUserID,
		})
	}
	if value, ok := aupasuo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appuserpurchaseamountsetting.FieldTitle,
		})
	}
	if value, ok := aupasuo.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: appuserpurchaseamountsetting.FieldAmount,
		})
	}
	if value, ok := aupasuo.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: appuserpurchaseamountsetting.FieldAmount,
		})
	}
	if value, ok := aupasuo.mutation.Percent(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appuserpurchaseamountsetting.FieldPercent,
		})
	}
	if value, ok := aupasuo.mutation.AddedPercent(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appuserpurchaseamountsetting.FieldPercent,
		})
	}
	if value, ok := aupasuo.mutation.Start(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appuserpurchaseamountsetting.FieldStart,
		})
	}
	if value, ok := aupasuo.mutation.AddedStart(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appuserpurchaseamountsetting.FieldStart,
		})
	}
	if value, ok := aupasuo.mutation.End(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appuserpurchaseamountsetting.FieldEnd,
		})
	}
	if value, ok := aupasuo.mutation.AddedEnd(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appuserpurchaseamountsetting.FieldEnd,
		})
	}
	if value, ok := aupasuo.mutation.BadgeLarge(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appuserpurchaseamountsetting.FieldBadgeLarge,
		})
	}
	if value, ok := aupasuo.mutation.BadgeSmall(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appuserpurchaseamountsetting.FieldBadgeSmall,
		})
	}
	if value, ok := aupasuo.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appuserpurchaseamountsetting.FieldCreateAt,
		})
	}
	if value, ok := aupasuo.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appuserpurchaseamountsetting.FieldCreateAt,
		})
	}
	if value, ok := aupasuo.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appuserpurchaseamountsetting.FieldUpdateAt,
		})
	}
	if value, ok := aupasuo.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appuserpurchaseamountsetting.FieldUpdateAt,
		})
	}
	if value, ok := aupasuo.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appuserpurchaseamountsetting.FieldDeleteAt,
		})
	}
	if value, ok := aupasuo.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appuserpurchaseamountsetting.FieldDeleteAt,
		})
	}
	_node = &AppUserPurchaseAmountSetting{config: aupasuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aupasuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appuserpurchaseamountsetting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
