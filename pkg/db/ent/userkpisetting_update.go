// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/predicate"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/userkpisetting"
	"github.com/google/uuid"
)

// UserKpiSettingUpdate is the builder for updating UserKpiSetting entities.
type UserKpiSettingUpdate struct {
	config
	hooks    []Hook
	mutation *UserKpiSettingMutation
}

// Where appends a list predicates to the UserKpiSettingUpdate builder.
func (uksu *UserKpiSettingUpdate) Where(ps ...predicate.UserKpiSetting) *UserKpiSettingUpdate {
	uksu.mutation.Where(ps...)
	return uksu
}

// SetAmount sets the "amount" field.
func (uksu *UserKpiSettingUpdate) SetAmount(u uint64) *UserKpiSettingUpdate {
	uksu.mutation.ResetAmount()
	uksu.mutation.SetAmount(u)
	return uksu
}

// AddAmount adds u to the "amount" field.
func (uksu *UserKpiSettingUpdate) AddAmount(u int64) *UserKpiSettingUpdate {
	uksu.mutation.AddAmount(u)
	return uksu
}

// SetPercent sets the "percent" field.
func (uksu *UserKpiSettingUpdate) SetPercent(i int32) *UserKpiSettingUpdate {
	uksu.mutation.ResetPercent()
	uksu.mutation.SetPercent(i)
	return uksu
}

// AddPercent adds i to the "percent" field.
func (uksu *UserKpiSettingUpdate) AddPercent(i int32) *UserKpiSettingUpdate {
	uksu.mutation.AddPercent(i)
	return uksu
}

// SetAppID sets the "app_id" field.
func (uksu *UserKpiSettingUpdate) SetAppID(u uuid.UUID) *UserKpiSettingUpdate {
	uksu.mutation.SetAppID(u)
	return uksu
}

// SetGoodID sets the "good_id" field.
func (uksu *UserKpiSettingUpdate) SetGoodID(u uuid.UUID) *UserKpiSettingUpdate {
	uksu.mutation.SetGoodID(u)
	return uksu
}

// SetUserID sets the "user_id" field.
func (uksu *UserKpiSettingUpdate) SetUserID(u uuid.UUID) *UserKpiSettingUpdate {
	uksu.mutation.SetUserID(u)
	return uksu
}

// SetCreateAt sets the "create_at" field.
func (uksu *UserKpiSettingUpdate) SetCreateAt(u uint32) *UserKpiSettingUpdate {
	uksu.mutation.ResetCreateAt()
	uksu.mutation.SetCreateAt(u)
	return uksu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (uksu *UserKpiSettingUpdate) SetNillableCreateAt(u *uint32) *UserKpiSettingUpdate {
	if u != nil {
		uksu.SetCreateAt(*u)
	}
	return uksu
}

// AddCreateAt adds u to the "create_at" field.
func (uksu *UserKpiSettingUpdate) AddCreateAt(u int32) *UserKpiSettingUpdate {
	uksu.mutation.AddCreateAt(u)
	return uksu
}

// SetUpdateAt sets the "update_at" field.
func (uksu *UserKpiSettingUpdate) SetUpdateAt(u uint32) *UserKpiSettingUpdate {
	uksu.mutation.ResetUpdateAt()
	uksu.mutation.SetUpdateAt(u)
	return uksu
}

// AddUpdateAt adds u to the "update_at" field.
func (uksu *UserKpiSettingUpdate) AddUpdateAt(u int32) *UserKpiSettingUpdate {
	uksu.mutation.AddUpdateAt(u)
	return uksu
}

// SetDeleteAt sets the "delete_at" field.
func (uksu *UserKpiSettingUpdate) SetDeleteAt(u uint32) *UserKpiSettingUpdate {
	uksu.mutation.ResetDeleteAt()
	uksu.mutation.SetDeleteAt(u)
	return uksu
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (uksu *UserKpiSettingUpdate) SetNillableDeleteAt(u *uint32) *UserKpiSettingUpdate {
	if u != nil {
		uksu.SetDeleteAt(*u)
	}
	return uksu
}

// AddDeleteAt adds u to the "delete_at" field.
func (uksu *UserKpiSettingUpdate) AddDeleteAt(u int32) *UserKpiSettingUpdate {
	uksu.mutation.AddDeleteAt(u)
	return uksu
}

// Mutation returns the UserKpiSettingMutation object of the builder.
func (uksu *UserKpiSettingUpdate) Mutation() *UserKpiSettingMutation {
	return uksu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uksu *UserKpiSettingUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	uksu.defaults()
	if len(uksu.hooks) == 0 {
		affected, err = uksu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserKpiSettingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uksu.mutation = mutation
			affected, err = uksu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(uksu.hooks) - 1; i >= 0; i-- {
			if uksu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uksu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uksu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (uksu *UserKpiSettingUpdate) SaveX(ctx context.Context) int {
	affected, err := uksu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uksu *UserKpiSettingUpdate) Exec(ctx context.Context) error {
	_, err := uksu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uksu *UserKpiSettingUpdate) ExecX(ctx context.Context) {
	if err := uksu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uksu *UserKpiSettingUpdate) defaults() {
	if _, ok := uksu.mutation.UpdateAt(); !ok {
		v := userkpisetting.UpdateDefaultUpdateAt()
		uksu.mutation.SetUpdateAt(v)
	}
}

func (uksu *UserKpiSettingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userkpisetting.Table,
			Columns: userkpisetting.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: userkpisetting.FieldID,
			},
		},
	}
	if ps := uksu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uksu.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: userkpisetting.FieldAmount,
		})
	}
	if value, ok := uksu.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: userkpisetting.FieldAmount,
		})
	}
	if value, ok := uksu.mutation.Percent(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: userkpisetting.FieldPercent,
		})
	}
	if value, ok := uksu.mutation.AddedPercent(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: userkpisetting.FieldPercent,
		})
	}
	if value, ok := uksu.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: userkpisetting.FieldAppID,
		})
	}
	if value, ok := uksu.mutation.GoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: userkpisetting.FieldGoodID,
		})
	}
	if value, ok := uksu.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: userkpisetting.FieldUserID,
		})
	}
	if value, ok := uksu.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userkpisetting.FieldCreateAt,
		})
	}
	if value, ok := uksu.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userkpisetting.FieldCreateAt,
		})
	}
	if value, ok := uksu.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userkpisetting.FieldUpdateAt,
		})
	}
	if value, ok := uksu.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userkpisetting.FieldUpdateAt,
		})
	}
	if value, ok := uksu.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userkpisetting.FieldDeleteAt,
		})
	}
	if value, ok := uksu.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userkpisetting.FieldDeleteAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uksu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userkpisetting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// UserKpiSettingUpdateOne is the builder for updating a single UserKpiSetting entity.
type UserKpiSettingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserKpiSettingMutation
}

// SetAmount sets the "amount" field.
func (uksuo *UserKpiSettingUpdateOne) SetAmount(u uint64) *UserKpiSettingUpdateOne {
	uksuo.mutation.ResetAmount()
	uksuo.mutation.SetAmount(u)
	return uksuo
}

// AddAmount adds u to the "amount" field.
func (uksuo *UserKpiSettingUpdateOne) AddAmount(u int64) *UserKpiSettingUpdateOne {
	uksuo.mutation.AddAmount(u)
	return uksuo
}

// SetPercent sets the "percent" field.
func (uksuo *UserKpiSettingUpdateOne) SetPercent(i int32) *UserKpiSettingUpdateOne {
	uksuo.mutation.ResetPercent()
	uksuo.mutation.SetPercent(i)
	return uksuo
}

// AddPercent adds i to the "percent" field.
func (uksuo *UserKpiSettingUpdateOne) AddPercent(i int32) *UserKpiSettingUpdateOne {
	uksuo.mutation.AddPercent(i)
	return uksuo
}

// SetAppID sets the "app_id" field.
func (uksuo *UserKpiSettingUpdateOne) SetAppID(u uuid.UUID) *UserKpiSettingUpdateOne {
	uksuo.mutation.SetAppID(u)
	return uksuo
}

// SetGoodID sets the "good_id" field.
func (uksuo *UserKpiSettingUpdateOne) SetGoodID(u uuid.UUID) *UserKpiSettingUpdateOne {
	uksuo.mutation.SetGoodID(u)
	return uksuo
}

// SetUserID sets the "user_id" field.
func (uksuo *UserKpiSettingUpdateOne) SetUserID(u uuid.UUID) *UserKpiSettingUpdateOne {
	uksuo.mutation.SetUserID(u)
	return uksuo
}

// SetCreateAt sets the "create_at" field.
func (uksuo *UserKpiSettingUpdateOne) SetCreateAt(u uint32) *UserKpiSettingUpdateOne {
	uksuo.mutation.ResetCreateAt()
	uksuo.mutation.SetCreateAt(u)
	return uksuo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (uksuo *UserKpiSettingUpdateOne) SetNillableCreateAt(u *uint32) *UserKpiSettingUpdateOne {
	if u != nil {
		uksuo.SetCreateAt(*u)
	}
	return uksuo
}

// AddCreateAt adds u to the "create_at" field.
func (uksuo *UserKpiSettingUpdateOne) AddCreateAt(u int32) *UserKpiSettingUpdateOne {
	uksuo.mutation.AddCreateAt(u)
	return uksuo
}

// SetUpdateAt sets the "update_at" field.
func (uksuo *UserKpiSettingUpdateOne) SetUpdateAt(u uint32) *UserKpiSettingUpdateOne {
	uksuo.mutation.ResetUpdateAt()
	uksuo.mutation.SetUpdateAt(u)
	return uksuo
}

// AddUpdateAt adds u to the "update_at" field.
func (uksuo *UserKpiSettingUpdateOne) AddUpdateAt(u int32) *UserKpiSettingUpdateOne {
	uksuo.mutation.AddUpdateAt(u)
	return uksuo
}

// SetDeleteAt sets the "delete_at" field.
func (uksuo *UserKpiSettingUpdateOne) SetDeleteAt(u uint32) *UserKpiSettingUpdateOne {
	uksuo.mutation.ResetDeleteAt()
	uksuo.mutation.SetDeleteAt(u)
	return uksuo
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (uksuo *UserKpiSettingUpdateOne) SetNillableDeleteAt(u *uint32) *UserKpiSettingUpdateOne {
	if u != nil {
		uksuo.SetDeleteAt(*u)
	}
	return uksuo
}

// AddDeleteAt adds u to the "delete_at" field.
func (uksuo *UserKpiSettingUpdateOne) AddDeleteAt(u int32) *UserKpiSettingUpdateOne {
	uksuo.mutation.AddDeleteAt(u)
	return uksuo
}

// Mutation returns the UserKpiSettingMutation object of the builder.
func (uksuo *UserKpiSettingUpdateOne) Mutation() *UserKpiSettingMutation {
	return uksuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uksuo *UserKpiSettingUpdateOne) Select(field string, fields ...string) *UserKpiSettingUpdateOne {
	uksuo.fields = append([]string{field}, fields...)
	return uksuo
}

// Save executes the query and returns the updated UserKpiSetting entity.
func (uksuo *UserKpiSettingUpdateOne) Save(ctx context.Context) (*UserKpiSetting, error) {
	var (
		err  error
		node *UserKpiSetting
	)
	uksuo.defaults()
	if len(uksuo.hooks) == 0 {
		node, err = uksuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserKpiSettingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uksuo.mutation = mutation
			node, err = uksuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uksuo.hooks) - 1; i >= 0; i-- {
			if uksuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uksuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, uksuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*UserKpiSetting)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from UserKpiSettingMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (uksuo *UserKpiSettingUpdateOne) SaveX(ctx context.Context) *UserKpiSetting {
	node, err := uksuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uksuo *UserKpiSettingUpdateOne) Exec(ctx context.Context) error {
	_, err := uksuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uksuo *UserKpiSettingUpdateOne) ExecX(ctx context.Context) {
	if err := uksuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uksuo *UserKpiSettingUpdateOne) defaults() {
	if _, ok := uksuo.mutation.UpdateAt(); !ok {
		v := userkpisetting.UpdateDefaultUpdateAt()
		uksuo.mutation.SetUpdateAt(v)
	}
}

func (uksuo *UserKpiSettingUpdateOne) sqlSave(ctx context.Context) (_node *UserKpiSetting, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userkpisetting.Table,
			Columns: userkpisetting.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: userkpisetting.FieldID,
			},
		},
	}
	id, ok := uksuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserKpiSetting.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uksuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userkpisetting.FieldID)
		for _, f := range fields {
			if !userkpisetting.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userkpisetting.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uksuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uksuo.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: userkpisetting.FieldAmount,
		})
	}
	if value, ok := uksuo.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: userkpisetting.FieldAmount,
		})
	}
	if value, ok := uksuo.mutation.Percent(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: userkpisetting.FieldPercent,
		})
	}
	if value, ok := uksuo.mutation.AddedPercent(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: userkpisetting.FieldPercent,
		})
	}
	if value, ok := uksuo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: userkpisetting.FieldAppID,
		})
	}
	if value, ok := uksuo.mutation.GoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: userkpisetting.FieldGoodID,
		})
	}
	if value, ok := uksuo.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: userkpisetting.FieldUserID,
		})
	}
	if value, ok := uksuo.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userkpisetting.FieldCreateAt,
		})
	}
	if value, ok := uksuo.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userkpisetting.FieldCreateAt,
		})
	}
	if value, ok := uksuo.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userkpisetting.FieldUpdateAt,
		})
	}
	if value, ok := uksuo.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userkpisetting.FieldUpdateAt,
		})
	}
	if value, ok := uksuo.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userkpisetting.FieldDeleteAt,
		})
	}
	if value, ok := uksuo.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userkpisetting.FieldDeleteAt,
		})
	}
	_node = &UserKpiSetting{config: uksuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uksuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userkpisetting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
