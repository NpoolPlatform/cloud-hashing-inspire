// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/defaultkpisetting"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// DefaultKpiSettingQuery is the builder for querying DefaultKpiSetting entities.
type DefaultKpiSettingQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.DefaultKpiSetting
	modifiers  []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the DefaultKpiSettingQuery builder.
func (dksq *DefaultKpiSettingQuery) Where(ps ...predicate.DefaultKpiSetting) *DefaultKpiSettingQuery {
	dksq.predicates = append(dksq.predicates, ps...)
	return dksq
}

// Limit adds a limit step to the query.
func (dksq *DefaultKpiSettingQuery) Limit(limit int) *DefaultKpiSettingQuery {
	dksq.limit = &limit
	return dksq
}

// Offset adds an offset step to the query.
func (dksq *DefaultKpiSettingQuery) Offset(offset int) *DefaultKpiSettingQuery {
	dksq.offset = &offset
	return dksq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (dksq *DefaultKpiSettingQuery) Unique(unique bool) *DefaultKpiSettingQuery {
	dksq.unique = &unique
	return dksq
}

// Order adds an order step to the query.
func (dksq *DefaultKpiSettingQuery) Order(o ...OrderFunc) *DefaultKpiSettingQuery {
	dksq.order = append(dksq.order, o...)
	return dksq
}

// First returns the first DefaultKpiSetting entity from the query.
// Returns a *NotFoundError when no DefaultKpiSetting was found.
func (dksq *DefaultKpiSettingQuery) First(ctx context.Context) (*DefaultKpiSetting, error) {
	nodes, err := dksq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{defaultkpisetting.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (dksq *DefaultKpiSettingQuery) FirstX(ctx context.Context) *DefaultKpiSetting {
	node, err := dksq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first DefaultKpiSetting ID from the query.
// Returns a *NotFoundError when no DefaultKpiSetting ID was found.
func (dksq *DefaultKpiSettingQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = dksq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{defaultkpisetting.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (dksq *DefaultKpiSettingQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := dksq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single DefaultKpiSetting entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one DefaultKpiSetting entity is found.
// Returns a *NotFoundError when no DefaultKpiSetting entities are found.
func (dksq *DefaultKpiSettingQuery) Only(ctx context.Context) (*DefaultKpiSetting, error) {
	nodes, err := dksq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{defaultkpisetting.Label}
	default:
		return nil, &NotSingularError{defaultkpisetting.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (dksq *DefaultKpiSettingQuery) OnlyX(ctx context.Context) *DefaultKpiSetting {
	node, err := dksq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only DefaultKpiSetting ID in the query.
// Returns a *NotSingularError when more than one DefaultKpiSetting ID is found.
// Returns a *NotFoundError when no entities are found.
func (dksq *DefaultKpiSettingQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = dksq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{defaultkpisetting.Label}
	default:
		err = &NotSingularError{defaultkpisetting.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (dksq *DefaultKpiSettingQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := dksq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of DefaultKpiSettings.
func (dksq *DefaultKpiSettingQuery) All(ctx context.Context) ([]*DefaultKpiSetting, error) {
	if err := dksq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return dksq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (dksq *DefaultKpiSettingQuery) AllX(ctx context.Context) []*DefaultKpiSetting {
	nodes, err := dksq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of DefaultKpiSetting IDs.
func (dksq *DefaultKpiSettingQuery) IDs(ctx context.Context) ([]uuid.UUID, error) {
	var ids []uuid.UUID
	if err := dksq.Select(defaultkpisetting.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (dksq *DefaultKpiSettingQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := dksq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (dksq *DefaultKpiSettingQuery) Count(ctx context.Context) (int, error) {
	if err := dksq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return dksq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (dksq *DefaultKpiSettingQuery) CountX(ctx context.Context) int {
	count, err := dksq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (dksq *DefaultKpiSettingQuery) Exist(ctx context.Context) (bool, error) {
	if err := dksq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return dksq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (dksq *DefaultKpiSettingQuery) ExistX(ctx context.Context) bool {
	exist, err := dksq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the DefaultKpiSettingQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (dksq *DefaultKpiSettingQuery) Clone() *DefaultKpiSettingQuery {
	if dksq == nil {
		return nil
	}
	return &DefaultKpiSettingQuery{
		config:     dksq.config,
		limit:      dksq.limit,
		offset:     dksq.offset,
		order:      append([]OrderFunc{}, dksq.order...),
		predicates: append([]predicate.DefaultKpiSetting{}, dksq.predicates...),
		// clone intermediate query.
		sql:    dksq.sql.Clone(),
		path:   dksq.path,
		unique: dksq.unique,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Amount uint64 `json:"amount,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.DefaultKpiSetting.Query().
//		GroupBy(defaultkpisetting.FieldAmount).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (dksq *DefaultKpiSettingQuery) GroupBy(field string, fields ...string) *DefaultKpiSettingGroupBy {
	grbuild := &DefaultKpiSettingGroupBy{config: dksq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := dksq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return dksq.sqlQuery(ctx), nil
	}
	grbuild.label = defaultkpisetting.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Amount uint64 `json:"amount,omitempty"`
//	}
//
//	client.DefaultKpiSetting.Query().
//		Select(defaultkpisetting.FieldAmount).
//		Scan(ctx, &v)
//
func (dksq *DefaultKpiSettingQuery) Select(fields ...string) *DefaultKpiSettingSelect {
	dksq.fields = append(dksq.fields, fields...)
	selbuild := &DefaultKpiSettingSelect{DefaultKpiSettingQuery: dksq}
	selbuild.label = defaultkpisetting.Label
	selbuild.flds, selbuild.scan = &dksq.fields, selbuild.Scan
	return selbuild
}

func (dksq *DefaultKpiSettingQuery) prepareQuery(ctx context.Context) error {
	for _, f := range dksq.fields {
		if !defaultkpisetting.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if dksq.path != nil {
		prev, err := dksq.path(ctx)
		if err != nil {
			return err
		}
		dksq.sql = prev
	}
	return nil
}

func (dksq *DefaultKpiSettingQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*DefaultKpiSetting, error) {
	var (
		nodes = []*DefaultKpiSetting{}
		_spec = dksq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		return (*DefaultKpiSetting).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		node := &DefaultKpiSetting{config: dksq.config}
		nodes = append(nodes, node)
		return node.assignValues(columns, values)
	}
	if len(dksq.modifiers) > 0 {
		_spec.Modifiers = dksq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, dksq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (dksq *DefaultKpiSettingQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := dksq.querySpec()
	if len(dksq.modifiers) > 0 {
		_spec.Modifiers = dksq.modifiers
	}
	_spec.Node.Columns = dksq.fields
	if len(dksq.fields) > 0 {
		_spec.Unique = dksq.unique != nil && *dksq.unique
	}
	return sqlgraph.CountNodes(ctx, dksq.driver, _spec)
}

func (dksq *DefaultKpiSettingQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := dksq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (dksq *DefaultKpiSettingQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   defaultkpisetting.Table,
			Columns: defaultkpisetting.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: defaultkpisetting.FieldID,
			},
		},
		From:   dksq.sql,
		Unique: true,
	}
	if unique := dksq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := dksq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, defaultkpisetting.FieldID)
		for i := range fields {
			if fields[i] != defaultkpisetting.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := dksq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := dksq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := dksq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := dksq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (dksq *DefaultKpiSettingQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(dksq.driver.Dialect())
	t1 := builder.Table(defaultkpisetting.Table)
	columns := dksq.fields
	if len(columns) == 0 {
		columns = defaultkpisetting.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if dksq.sql != nil {
		selector = dksq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if dksq.unique != nil && *dksq.unique {
		selector.Distinct()
	}
	for _, m := range dksq.modifiers {
		m(selector)
	}
	for _, p := range dksq.predicates {
		p(selector)
	}
	for _, p := range dksq.order {
		p(selector)
	}
	if offset := dksq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := dksq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (dksq *DefaultKpiSettingQuery) Modify(modifiers ...func(s *sql.Selector)) *DefaultKpiSettingSelect {
	dksq.modifiers = append(dksq.modifiers, modifiers...)
	return dksq.Select()
}

// DefaultKpiSettingGroupBy is the group-by builder for DefaultKpiSetting entities.
type DefaultKpiSettingGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (dksgb *DefaultKpiSettingGroupBy) Aggregate(fns ...AggregateFunc) *DefaultKpiSettingGroupBy {
	dksgb.fns = append(dksgb.fns, fns...)
	return dksgb
}

// Scan applies the group-by query and scans the result into the given value.
func (dksgb *DefaultKpiSettingGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := dksgb.path(ctx)
	if err != nil {
		return err
	}
	dksgb.sql = query
	return dksgb.sqlScan(ctx, v)
}

func (dksgb *DefaultKpiSettingGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range dksgb.fields {
		if !defaultkpisetting.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := dksgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := dksgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (dksgb *DefaultKpiSettingGroupBy) sqlQuery() *sql.Selector {
	selector := dksgb.sql.Select()
	aggregation := make([]string, 0, len(dksgb.fns))
	for _, fn := range dksgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(dksgb.fields)+len(dksgb.fns))
		for _, f := range dksgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(dksgb.fields...)...)
}

// DefaultKpiSettingSelect is the builder for selecting fields of DefaultKpiSetting entities.
type DefaultKpiSettingSelect struct {
	*DefaultKpiSettingQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (dkss *DefaultKpiSettingSelect) Scan(ctx context.Context, v interface{}) error {
	if err := dkss.prepareQuery(ctx); err != nil {
		return err
	}
	dkss.sql = dkss.DefaultKpiSettingQuery.sqlQuery(ctx)
	return dkss.sqlScan(ctx, v)
}

func (dkss *DefaultKpiSettingSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := dkss.sql.Query()
	if err := dkss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (dkss *DefaultKpiSettingSelect) Modify(modifiers ...func(s *sql.Selector)) *DefaultKpiSettingSelect {
	dkss.modifiers = append(dkss.modifiers, modifiers...)
	return dkss
}
