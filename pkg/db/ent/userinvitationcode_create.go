// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/userinvitationcode"
	"github.com/google/uuid"
)

// UserInvitationCodeCreate is the builder for creating a UserInvitationCode entity.
type UserInvitationCodeCreate struct {
	config
	mutation *UserInvitationCodeMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUserID sets the "user_id" field.
func (uicc *UserInvitationCodeCreate) SetUserID(u uuid.UUID) *UserInvitationCodeCreate {
	uicc.mutation.SetUserID(u)
	return uicc
}

// SetAppID sets the "app_id" field.
func (uicc *UserInvitationCodeCreate) SetAppID(u uuid.UUID) *UserInvitationCodeCreate {
	uicc.mutation.SetAppID(u)
	return uicc
}

// SetInvitationCode sets the "invitation_code" field.
func (uicc *UserInvitationCodeCreate) SetInvitationCode(s string) *UserInvitationCodeCreate {
	uicc.mutation.SetInvitationCode(s)
	return uicc
}

// SetCreateAt sets the "create_at" field.
func (uicc *UserInvitationCodeCreate) SetCreateAt(u uint32) *UserInvitationCodeCreate {
	uicc.mutation.SetCreateAt(u)
	return uicc
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (uicc *UserInvitationCodeCreate) SetNillableCreateAt(u *uint32) *UserInvitationCodeCreate {
	if u != nil {
		uicc.SetCreateAt(*u)
	}
	return uicc
}

// SetUpdateAt sets the "update_at" field.
func (uicc *UserInvitationCodeCreate) SetUpdateAt(u uint32) *UserInvitationCodeCreate {
	uicc.mutation.SetUpdateAt(u)
	return uicc
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (uicc *UserInvitationCodeCreate) SetNillableUpdateAt(u *uint32) *UserInvitationCodeCreate {
	if u != nil {
		uicc.SetUpdateAt(*u)
	}
	return uicc
}

// SetDeleteAt sets the "delete_at" field.
func (uicc *UserInvitationCodeCreate) SetDeleteAt(u uint32) *UserInvitationCodeCreate {
	uicc.mutation.SetDeleteAt(u)
	return uicc
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (uicc *UserInvitationCodeCreate) SetNillableDeleteAt(u *uint32) *UserInvitationCodeCreate {
	if u != nil {
		uicc.SetDeleteAt(*u)
	}
	return uicc
}

// SetID sets the "id" field.
func (uicc *UserInvitationCodeCreate) SetID(u uuid.UUID) *UserInvitationCodeCreate {
	uicc.mutation.SetID(u)
	return uicc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (uicc *UserInvitationCodeCreate) SetNillableID(u *uuid.UUID) *UserInvitationCodeCreate {
	if u != nil {
		uicc.SetID(*u)
	}
	return uicc
}

// Mutation returns the UserInvitationCodeMutation object of the builder.
func (uicc *UserInvitationCodeCreate) Mutation() *UserInvitationCodeMutation {
	return uicc.mutation
}

// Save creates the UserInvitationCode in the database.
func (uicc *UserInvitationCodeCreate) Save(ctx context.Context) (*UserInvitationCode, error) {
	var (
		err  error
		node *UserInvitationCode
	)
	uicc.defaults()
	if len(uicc.hooks) == 0 {
		if err = uicc.check(); err != nil {
			return nil, err
		}
		node, err = uicc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserInvitationCodeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uicc.check(); err != nil {
				return nil, err
			}
			uicc.mutation = mutation
			if node, err = uicc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(uicc.hooks) - 1; i >= 0; i-- {
			if uicc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uicc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uicc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (uicc *UserInvitationCodeCreate) SaveX(ctx context.Context) *UserInvitationCode {
	v, err := uicc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uicc *UserInvitationCodeCreate) Exec(ctx context.Context) error {
	_, err := uicc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uicc *UserInvitationCodeCreate) ExecX(ctx context.Context) {
	if err := uicc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uicc *UserInvitationCodeCreate) defaults() {
	if _, ok := uicc.mutation.CreateAt(); !ok {
		v := userinvitationcode.DefaultCreateAt()
		uicc.mutation.SetCreateAt(v)
	}
	if _, ok := uicc.mutation.UpdateAt(); !ok {
		v := userinvitationcode.DefaultUpdateAt()
		uicc.mutation.SetUpdateAt(v)
	}
	if _, ok := uicc.mutation.DeleteAt(); !ok {
		v := userinvitationcode.DefaultDeleteAt()
		uicc.mutation.SetDeleteAt(v)
	}
	if _, ok := uicc.mutation.ID(); !ok {
		v := userinvitationcode.DefaultID()
		uicc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uicc *UserInvitationCodeCreate) check() error {
	if _, ok := uicc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "UserInvitationCode.user_id"`)}
	}
	if _, ok := uicc.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`ent: missing required field "UserInvitationCode.app_id"`)}
	}
	if _, ok := uicc.mutation.InvitationCode(); !ok {
		return &ValidationError{Name: "invitation_code", err: errors.New(`ent: missing required field "UserInvitationCode.invitation_code"`)}
	}
	if _, ok := uicc.mutation.CreateAt(); !ok {
		return &ValidationError{Name: "create_at", err: errors.New(`ent: missing required field "UserInvitationCode.create_at"`)}
	}
	if _, ok := uicc.mutation.UpdateAt(); !ok {
		return &ValidationError{Name: "update_at", err: errors.New(`ent: missing required field "UserInvitationCode.update_at"`)}
	}
	if _, ok := uicc.mutation.DeleteAt(); !ok {
		return &ValidationError{Name: "delete_at", err: errors.New(`ent: missing required field "UserInvitationCode.delete_at"`)}
	}
	return nil
}

func (uicc *UserInvitationCodeCreate) sqlSave(ctx context.Context) (*UserInvitationCode, error) {
	_node, _spec := uicc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uicc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (uicc *UserInvitationCodeCreate) createSpec() (*UserInvitationCode, *sqlgraph.CreateSpec) {
	var (
		_node = &UserInvitationCode{config: uicc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: userinvitationcode.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: userinvitationcode.FieldID,
			},
		}
	)
	_spec.OnConflict = uicc.conflict
	if id, ok := uicc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := uicc.mutation.UserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: userinvitationcode.FieldUserID,
		})
		_node.UserID = value
	}
	if value, ok := uicc.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: userinvitationcode.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := uicc.mutation.InvitationCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userinvitationcode.FieldInvitationCode,
		})
		_node.InvitationCode = value
	}
	if value, ok := uicc.mutation.CreateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userinvitationcode.FieldCreateAt,
		})
		_node.CreateAt = value
	}
	if value, ok := uicc.mutation.UpdateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userinvitationcode.FieldUpdateAt,
		})
		_node.UpdateAt = value
	}
	if value, ok := uicc.mutation.DeleteAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userinvitationcode.FieldDeleteAt,
		})
		_node.DeleteAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserInvitationCode.Create().
//		SetUserID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserInvitationCodeUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
//
func (uicc *UserInvitationCodeCreate) OnConflict(opts ...sql.ConflictOption) *UserInvitationCodeUpsertOne {
	uicc.conflict = opts
	return &UserInvitationCodeUpsertOne{
		create: uicc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserInvitationCode.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (uicc *UserInvitationCodeCreate) OnConflictColumns(columns ...string) *UserInvitationCodeUpsertOne {
	uicc.conflict = append(uicc.conflict, sql.ConflictColumns(columns...))
	return &UserInvitationCodeUpsertOne{
		create: uicc,
	}
}

type (
	// UserInvitationCodeUpsertOne is the builder for "upsert"-ing
	//  one UserInvitationCode node.
	UserInvitationCodeUpsertOne struct {
		create *UserInvitationCodeCreate
	}

	// UserInvitationCodeUpsert is the "OnConflict" setter.
	UserInvitationCodeUpsert struct {
		*sql.UpdateSet
	}
)

// SetUserID sets the "user_id" field.
func (u *UserInvitationCodeUpsert) SetUserID(v uuid.UUID) *UserInvitationCodeUpsert {
	u.Set(userinvitationcode.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *UserInvitationCodeUpsert) UpdateUserID() *UserInvitationCodeUpsert {
	u.SetExcluded(userinvitationcode.FieldUserID)
	return u
}

// SetAppID sets the "app_id" field.
func (u *UserInvitationCodeUpsert) SetAppID(v uuid.UUID) *UserInvitationCodeUpsert {
	u.Set(userinvitationcode.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *UserInvitationCodeUpsert) UpdateAppID() *UserInvitationCodeUpsert {
	u.SetExcluded(userinvitationcode.FieldAppID)
	return u
}

// SetInvitationCode sets the "invitation_code" field.
func (u *UserInvitationCodeUpsert) SetInvitationCode(v string) *UserInvitationCodeUpsert {
	u.Set(userinvitationcode.FieldInvitationCode, v)
	return u
}

// UpdateInvitationCode sets the "invitation_code" field to the value that was provided on create.
func (u *UserInvitationCodeUpsert) UpdateInvitationCode() *UserInvitationCodeUpsert {
	u.SetExcluded(userinvitationcode.FieldInvitationCode)
	return u
}

// SetCreateAt sets the "create_at" field.
func (u *UserInvitationCodeUpsert) SetCreateAt(v uint32) *UserInvitationCodeUpsert {
	u.Set(userinvitationcode.FieldCreateAt, v)
	return u
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *UserInvitationCodeUpsert) UpdateCreateAt() *UserInvitationCodeUpsert {
	u.SetExcluded(userinvitationcode.FieldCreateAt)
	return u
}

// AddCreateAt adds v to the "create_at" field.
func (u *UserInvitationCodeUpsert) AddCreateAt(v uint32) *UserInvitationCodeUpsert {
	u.Add(userinvitationcode.FieldCreateAt, v)
	return u
}

// SetUpdateAt sets the "update_at" field.
func (u *UserInvitationCodeUpsert) SetUpdateAt(v uint32) *UserInvitationCodeUpsert {
	u.Set(userinvitationcode.FieldUpdateAt, v)
	return u
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *UserInvitationCodeUpsert) UpdateUpdateAt() *UserInvitationCodeUpsert {
	u.SetExcluded(userinvitationcode.FieldUpdateAt)
	return u
}

// AddUpdateAt adds v to the "update_at" field.
func (u *UserInvitationCodeUpsert) AddUpdateAt(v uint32) *UserInvitationCodeUpsert {
	u.Add(userinvitationcode.FieldUpdateAt, v)
	return u
}

// SetDeleteAt sets the "delete_at" field.
func (u *UserInvitationCodeUpsert) SetDeleteAt(v uint32) *UserInvitationCodeUpsert {
	u.Set(userinvitationcode.FieldDeleteAt, v)
	return u
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *UserInvitationCodeUpsert) UpdateDeleteAt() *UserInvitationCodeUpsert {
	u.SetExcluded(userinvitationcode.FieldDeleteAt)
	return u
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *UserInvitationCodeUpsert) AddDeleteAt(v uint32) *UserInvitationCodeUpsert {
	u.Add(userinvitationcode.FieldDeleteAt, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.UserInvitationCode.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(userinvitationcode.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *UserInvitationCodeUpsertOne) UpdateNewValues() *UserInvitationCodeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(userinvitationcode.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.UserInvitationCode.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *UserInvitationCodeUpsertOne) Ignore() *UserInvitationCodeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserInvitationCodeUpsertOne) DoNothing() *UserInvitationCodeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserInvitationCodeCreate.OnConflict
// documentation for more info.
func (u *UserInvitationCodeUpsertOne) Update(set func(*UserInvitationCodeUpsert)) *UserInvitationCodeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserInvitationCodeUpsert{UpdateSet: update})
	}))
	return u
}

// SetUserID sets the "user_id" field.
func (u *UserInvitationCodeUpsertOne) SetUserID(v uuid.UUID) *UserInvitationCodeUpsertOne {
	return u.Update(func(s *UserInvitationCodeUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *UserInvitationCodeUpsertOne) UpdateUserID() *UserInvitationCodeUpsertOne {
	return u.Update(func(s *UserInvitationCodeUpsert) {
		s.UpdateUserID()
	})
}

// SetAppID sets the "app_id" field.
func (u *UserInvitationCodeUpsertOne) SetAppID(v uuid.UUID) *UserInvitationCodeUpsertOne {
	return u.Update(func(s *UserInvitationCodeUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *UserInvitationCodeUpsertOne) UpdateAppID() *UserInvitationCodeUpsertOne {
	return u.Update(func(s *UserInvitationCodeUpsert) {
		s.UpdateAppID()
	})
}

// SetInvitationCode sets the "invitation_code" field.
func (u *UserInvitationCodeUpsertOne) SetInvitationCode(v string) *UserInvitationCodeUpsertOne {
	return u.Update(func(s *UserInvitationCodeUpsert) {
		s.SetInvitationCode(v)
	})
}

// UpdateInvitationCode sets the "invitation_code" field to the value that was provided on create.
func (u *UserInvitationCodeUpsertOne) UpdateInvitationCode() *UserInvitationCodeUpsertOne {
	return u.Update(func(s *UserInvitationCodeUpsert) {
		s.UpdateInvitationCode()
	})
}

// SetCreateAt sets the "create_at" field.
func (u *UserInvitationCodeUpsertOne) SetCreateAt(v uint32) *UserInvitationCodeUpsertOne {
	return u.Update(func(s *UserInvitationCodeUpsert) {
		s.SetCreateAt(v)
	})
}

// AddCreateAt adds v to the "create_at" field.
func (u *UserInvitationCodeUpsertOne) AddCreateAt(v uint32) *UserInvitationCodeUpsertOne {
	return u.Update(func(s *UserInvitationCodeUpsert) {
		s.AddCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *UserInvitationCodeUpsertOne) UpdateCreateAt() *UserInvitationCodeUpsertOne {
	return u.Update(func(s *UserInvitationCodeUpsert) {
		s.UpdateCreateAt()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *UserInvitationCodeUpsertOne) SetUpdateAt(v uint32) *UserInvitationCodeUpsertOne {
	return u.Update(func(s *UserInvitationCodeUpsert) {
		s.SetUpdateAt(v)
	})
}

// AddUpdateAt adds v to the "update_at" field.
func (u *UserInvitationCodeUpsertOne) AddUpdateAt(v uint32) *UserInvitationCodeUpsertOne {
	return u.Update(func(s *UserInvitationCodeUpsert) {
		s.AddUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *UserInvitationCodeUpsertOne) UpdateUpdateAt() *UserInvitationCodeUpsertOne {
	return u.Update(func(s *UserInvitationCodeUpsert) {
		s.UpdateUpdateAt()
	})
}

// SetDeleteAt sets the "delete_at" field.
func (u *UserInvitationCodeUpsertOne) SetDeleteAt(v uint32) *UserInvitationCodeUpsertOne {
	return u.Update(func(s *UserInvitationCodeUpsert) {
		s.SetDeleteAt(v)
	})
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *UserInvitationCodeUpsertOne) AddDeleteAt(v uint32) *UserInvitationCodeUpsertOne {
	return u.Update(func(s *UserInvitationCodeUpsert) {
		s.AddDeleteAt(v)
	})
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *UserInvitationCodeUpsertOne) UpdateDeleteAt() *UserInvitationCodeUpsertOne {
	return u.Update(func(s *UserInvitationCodeUpsert) {
		s.UpdateDeleteAt()
	})
}

// Exec executes the query.
func (u *UserInvitationCodeUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserInvitationCodeCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserInvitationCodeUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UserInvitationCodeUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: UserInvitationCodeUpsertOne.ID is not supported by MySQL driver. Use UserInvitationCodeUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UserInvitationCodeUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UserInvitationCodeCreateBulk is the builder for creating many UserInvitationCode entities in bulk.
type UserInvitationCodeCreateBulk struct {
	config
	builders []*UserInvitationCodeCreate
	conflict []sql.ConflictOption
}

// Save creates the UserInvitationCode entities in the database.
func (uiccb *UserInvitationCodeCreateBulk) Save(ctx context.Context) ([]*UserInvitationCode, error) {
	specs := make([]*sqlgraph.CreateSpec, len(uiccb.builders))
	nodes := make([]*UserInvitationCode, len(uiccb.builders))
	mutators := make([]Mutator, len(uiccb.builders))
	for i := range uiccb.builders {
		func(i int, root context.Context) {
			builder := uiccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserInvitationCodeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uiccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = uiccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uiccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uiccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (uiccb *UserInvitationCodeCreateBulk) SaveX(ctx context.Context) []*UserInvitationCode {
	v, err := uiccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uiccb *UserInvitationCodeCreateBulk) Exec(ctx context.Context) error {
	_, err := uiccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uiccb *UserInvitationCodeCreateBulk) ExecX(ctx context.Context) {
	if err := uiccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserInvitationCode.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserInvitationCodeUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
//
func (uiccb *UserInvitationCodeCreateBulk) OnConflict(opts ...sql.ConflictOption) *UserInvitationCodeUpsertBulk {
	uiccb.conflict = opts
	return &UserInvitationCodeUpsertBulk{
		create: uiccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserInvitationCode.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (uiccb *UserInvitationCodeCreateBulk) OnConflictColumns(columns ...string) *UserInvitationCodeUpsertBulk {
	uiccb.conflict = append(uiccb.conflict, sql.ConflictColumns(columns...))
	return &UserInvitationCodeUpsertBulk{
		create: uiccb,
	}
}

// UserInvitationCodeUpsertBulk is the builder for "upsert"-ing
// a bulk of UserInvitationCode nodes.
type UserInvitationCodeUpsertBulk struct {
	create *UserInvitationCodeCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.UserInvitationCode.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(userinvitationcode.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *UserInvitationCodeUpsertBulk) UpdateNewValues() *UserInvitationCodeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(userinvitationcode.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserInvitationCode.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *UserInvitationCodeUpsertBulk) Ignore() *UserInvitationCodeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserInvitationCodeUpsertBulk) DoNothing() *UserInvitationCodeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserInvitationCodeCreateBulk.OnConflict
// documentation for more info.
func (u *UserInvitationCodeUpsertBulk) Update(set func(*UserInvitationCodeUpsert)) *UserInvitationCodeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserInvitationCodeUpsert{UpdateSet: update})
	}))
	return u
}

// SetUserID sets the "user_id" field.
func (u *UserInvitationCodeUpsertBulk) SetUserID(v uuid.UUID) *UserInvitationCodeUpsertBulk {
	return u.Update(func(s *UserInvitationCodeUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *UserInvitationCodeUpsertBulk) UpdateUserID() *UserInvitationCodeUpsertBulk {
	return u.Update(func(s *UserInvitationCodeUpsert) {
		s.UpdateUserID()
	})
}

// SetAppID sets the "app_id" field.
func (u *UserInvitationCodeUpsertBulk) SetAppID(v uuid.UUID) *UserInvitationCodeUpsertBulk {
	return u.Update(func(s *UserInvitationCodeUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *UserInvitationCodeUpsertBulk) UpdateAppID() *UserInvitationCodeUpsertBulk {
	return u.Update(func(s *UserInvitationCodeUpsert) {
		s.UpdateAppID()
	})
}

// SetInvitationCode sets the "invitation_code" field.
func (u *UserInvitationCodeUpsertBulk) SetInvitationCode(v string) *UserInvitationCodeUpsertBulk {
	return u.Update(func(s *UserInvitationCodeUpsert) {
		s.SetInvitationCode(v)
	})
}

// UpdateInvitationCode sets the "invitation_code" field to the value that was provided on create.
func (u *UserInvitationCodeUpsertBulk) UpdateInvitationCode() *UserInvitationCodeUpsertBulk {
	return u.Update(func(s *UserInvitationCodeUpsert) {
		s.UpdateInvitationCode()
	})
}

// SetCreateAt sets the "create_at" field.
func (u *UserInvitationCodeUpsertBulk) SetCreateAt(v uint32) *UserInvitationCodeUpsertBulk {
	return u.Update(func(s *UserInvitationCodeUpsert) {
		s.SetCreateAt(v)
	})
}

// AddCreateAt adds v to the "create_at" field.
func (u *UserInvitationCodeUpsertBulk) AddCreateAt(v uint32) *UserInvitationCodeUpsertBulk {
	return u.Update(func(s *UserInvitationCodeUpsert) {
		s.AddCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *UserInvitationCodeUpsertBulk) UpdateCreateAt() *UserInvitationCodeUpsertBulk {
	return u.Update(func(s *UserInvitationCodeUpsert) {
		s.UpdateCreateAt()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *UserInvitationCodeUpsertBulk) SetUpdateAt(v uint32) *UserInvitationCodeUpsertBulk {
	return u.Update(func(s *UserInvitationCodeUpsert) {
		s.SetUpdateAt(v)
	})
}

// AddUpdateAt adds v to the "update_at" field.
func (u *UserInvitationCodeUpsertBulk) AddUpdateAt(v uint32) *UserInvitationCodeUpsertBulk {
	return u.Update(func(s *UserInvitationCodeUpsert) {
		s.AddUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *UserInvitationCodeUpsertBulk) UpdateUpdateAt() *UserInvitationCodeUpsertBulk {
	return u.Update(func(s *UserInvitationCodeUpsert) {
		s.UpdateUpdateAt()
	})
}

// SetDeleteAt sets the "delete_at" field.
func (u *UserInvitationCodeUpsertBulk) SetDeleteAt(v uint32) *UserInvitationCodeUpsertBulk {
	return u.Update(func(s *UserInvitationCodeUpsert) {
		s.SetDeleteAt(v)
	})
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *UserInvitationCodeUpsertBulk) AddDeleteAt(v uint32) *UserInvitationCodeUpsertBulk {
	return u.Update(func(s *UserInvitationCodeUpsert) {
		s.AddDeleteAt(v)
	})
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *UserInvitationCodeUpsertBulk) UpdateDeleteAt() *UserInvitationCodeUpsertBulk {
	return u.Update(func(s *UserInvitationCodeUpsert) {
		s.UpdateDeleteAt()
	})
}

// Exec executes the query.
func (u *UserInvitationCodeUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the UserInvitationCodeCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserInvitationCodeCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserInvitationCodeUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
