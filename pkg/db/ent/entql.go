// Code generated by entc, DO NOT EDIT.

package ent

import (
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/activity"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/appcommissionsetting"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/appcouponsetting"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/appinvitationsetting"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/apppurchaseamountsetting"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/commissioncoinsetting"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/couponallocated"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/couponpool"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/defaultkpisetting"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/discountpool"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/eventcoupon"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/registrationinvitation"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/userinvitationcode"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/userkpisetting"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/userspecialreduction"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 15)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   activity.Table,
			Columns: activity.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: activity.FieldID,
			},
		},
		Type: "Activity",
		Fields: map[string]*sqlgraph.FieldSpec{
			activity.FieldAppID:          {Type: field.TypeUUID, Column: activity.FieldAppID},
			activity.FieldCreatedBy:      {Type: field.TypeUUID, Column: activity.FieldCreatedBy},
			activity.FieldName:           {Type: field.TypeString, Column: activity.FieldName},
			activity.FieldStart:          {Type: field.TypeUint32, Column: activity.FieldStart},
			activity.FieldEnd:            {Type: field.TypeUint32, Column: activity.FieldEnd},
			activity.FieldSystemActivity: {Type: field.TypeBool, Column: activity.FieldSystemActivity},
			activity.FieldCreateAt:       {Type: field.TypeUint32, Column: activity.FieldCreateAt},
			activity.FieldUpdateAt:       {Type: field.TypeUint32, Column: activity.FieldUpdateAt},
			activity.FieldDeleteAt:       {Type: field.TypeUint32, Column: activity.FieldDeleteAt},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   appcommissionsetting.Table,
			Columns: appcommissionsetting.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: appcommissionsetting.FieldID,
			},
		},
		Type: "AppCommissionSetting",
		Fields: map[string]*sqlgraph.FieldSpec{
			appcommissionsetting.FieldAppID:              {Type: field.TypeUUID, Column: appcommissionsetting.FieldAppID},
			appcommissionsetting.FieldType:               {Type: field.TypeString, Column: appcommissionsetting.FieldType},
			appcommissionsetting.FieldLevel:              {Type: field.TypeUint32, Column: appcommissionsetting.FieldLevel},
			appcommissionsetting.FieldInvitationDiscount: {Type: field.TypeBool, Column: appcommissionsetting.FieldInvitationDiscount},
			appcommissionsetting.FieldUniqueSetting:      {Type: field.TypeBool, Column: appcommissionsetting.FieldUniqueSetting},
			appcommissionsetting.FieldKpiSetting:         {Type: field.TypeBool, Column: appcommissionsetting.FieldKpiSetting},
			appcommissionsetting.FieldCreateAt:           {Type: field.TypeUint32, Column: appcommissionsetting.FieldCreateAt},
			appcommissionsetting.FieldUpdateAt:           {Type: field.TypeUint32, Column: appcommissionsetting.FieldUpdateAt},
			appcommissionsetting.FieldDeleteAt:           {Type: field.TypeUint32, Column: appcommissionsetting.FieldDeleteAt},
		},
	}
	graph.Nodes[2] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   appcouponsetting.Table,
			Columns: appcouponsetting.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: appcouponsetting.FieldID,
			},
		},
		Type: "AppCouponSetting",
		Fields: map[string]*sqlgraph.FieldSpec{
			appcouponsetting.FieldAppID:           {Type: field.TypeUUID, Column: appcouponsetting.FieldAppID},
			appcouponsetting.FieldDominationLimit: {Type: field.TypeUint64, Column: appcouponsetting.FieldDominationLimit},
			appcouponsetting.FieldTotalLimit:      {Type: field.TypeInt32, Column: appcouponsetting.FieldTotalLimit},
			appcouponsetting.FieldCreateAt:        {Type: field.TypeUint32, Column: appcouponsetting.FieldCreateAt},
			appcouponsetting.FieldUpdateAt:        {Type: field.TypeUint32, Column: appcouponsetting.FieldUpdateAt},
			appcouponsetting.FieldDeleteAt:        {Type: field.TypeUint32, Column: appcouponsetting.FieldDeleteAt},
		},
	}
	graph.Nodes[3] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   appinvitationsetting.Table,
			Columns: appinvitationsetting.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: appinvitationsetting.FieldID,
			},
		},
		Type: "AppInvitationSetting",
		Fields: map[string]*sqlgraph.FieldSpec{
			appinvitationsetting.FieldAppID:      {Type: field.TypeUUID, Column: appinvitationsetting.FieldAppID},
			appinvitationsetting.FieldCount:      {Type: field.TypeUint32, Column: appinvitationsetting.FieldCount},
			appinvitationsetting.FieldDiscount:   {Type: field.TypeUint32, Column: appinvitationsetting.FieldDiscount},
			appinvitationsetting.FieldCreateAt:   {Type: field.TypeUint32, Column: appinvitationsetting.FieldCreateAt},
			appinvitationsetting.FieldUpdateAt:   {Type: field.TypeUint32, Column: appinvitationsetting.FieldUpdateAt},
			appinvitationsetting.FieldDeleteAt:   {Type: field.TypeUint32, Column: appinvitationsetting.FieldDeleteAt},
			appinvitationsetting.FieldTitle:      {Type: field.TypeString, Column: appinvitationsetting.FieldTitle},
			appinvitationsetting.FieldBadgeLarge: {Type: field.TypeString, Column: appinvitationsetting.FieldBadgeLarge},
			appinvitationsetting.FieldBadgeSmall: {Type: field.TypeString, Column: appinvitationsetting.FieldBadgeSmall},
		},
	}
	graph.Nodes[4] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   apppurchaseamountsetting.Table,
			Columns: apppurchaseamountsetting.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: apppurchaseamountsetting.FieldID,
			},
		},
		Type: "AppPurchaseAmountSetting",
		Fields: map[string]*sqlgraph.FieldSpec{
			apppurchaseamountsetting.FieldAppID:      {Type: field.TypeUUID, Column: apppurchaseamountsetting.FieldAppID},
			apppurchaseamountsetting.FieldUserID:     {Type: field.TypeUUID, Column: apppurchaseamountsetting.FieldUserID},
			apppurchaseamountsetting.FieldGoodID:     {Type: field.TypeUUID, Column: apppurchaseamountsetting.FieldGoodID},
			apppurchaseamountsetting.FieldTitle:      {Type: field.TypeString, Column: apppurchaseamountsetting.FieldTitle},
			apppurchaseamountsetting.FieldAmount:     {Type: field.TypeUint64, Column: apppurchaseamountsetting.FieldAmount},
			apppurchaseamountsetting.FieldPercent:    {Type: field.TypeUint32, Column: apppurchaseamountsetting.FieldPercent},
			apppurchaseamountsetting.FieldStart:      {Type: field.TypeUint32, Column: apppurchaseamountsetting.FieldStart},
			apppurchaseamountsetting.FieldEnd:        {Type: field.TypeUint32, Column: apppurchaseamountsetting.FieldEnd},
			apppurchaseamountsetting.FieldBadgeLarge: {Type: field.TypeString, Column: apppurchaseamountsetting.FieldBadgeLarge},
			apppurchaseamountsetting.FieldBadgeSmall: {Type: field.TypeString, Column: apppurchaseamountsetting.FieldBadgeSmall},
			apppurchaseamountsetting.FieldCreateAt:   {Type: field.TypeUint32, Column: apppurchaseamountsetting.FieldCreateAt},
			apppurchaseamountsetting.FieldUpdateAt:   {Type: field.TypeUint32, Column: apppurchaseamountsetting.FieldUpdateAt},
			apppurchaseamountsetting.FieldDeleteAt:   {Type: field.TypeUint32, Column: apppurchaseamountsetting.FieldDeleteAt},
		},
	}
	graph.Nodes[5] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   commissioncoinsetting.Table,
			Columns: commissioncoinsetting.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: commissioncoinsetting.FieldID,
			},
		},
		Type: "CommissionCoinSetting",
		Fields: map[string]*sqlgraph.FieldSpec{
			commissioncoinsetting.FieldCoinTypeID: {Type: field.TypeUUID, Column: commissioncoinsetting.FieldCoinTypeID},
			commissioncoinsetting.FieldUsing:      {Type: field.TypeBool, Column: commissioncoinsetting.FieldUsing},
			commissioncoinsetting.FieldCreateAt:   {Type: field.TypeUint32, Column: commissioncoinsetting.FieldCreateAt},
			commissioncoinsetting.FieldUpdateAt:   {Type: field.TypeUint32, Column: commissioncoinsetting.FieldUpdateAt},
			commissioncoinsetting.FieldDeleteAt:   {Type: field.TypeUint32, Column: commissioncoinsetting.FieldDeleteAt},
		},
	}
	graph.Nodes[6] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   couponallocated.Table,
			Columns: couponallocated.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: couponallocated.FieldID,
			},
		},
		Type: "CouponAllocated",
		Fields: map[string]*sqlgraph.FieldSpec{
			couponallocated.FieldAppID:    {Type: field.TypeUUID, Column: couponallocated.FieldAppID},
			couponallocated.FieldUserID:   {Type: field.TypeUUID, Column: couponallocated.FieldUserID},
			couponallocated.FieldType:     {Type: field.TypeString, Column: couponallocated.FieldType},
			couponallocated.FieldCouponID: {Type: field.TypeUUID, Column: couponallocated.FieldCouponID},
			couponallocated.FieldCreateAt: {Type: field.TypeUint32, Column: couponallocated.FieldCreateAt},
			couponallocated.FieldUpdateAt: {Type: field.TypeUint32, Column: couponallocated.FieldUpdateAt},
			couponallocated.FieldDeleteAt: {Type: field.TypeUint32, Column: couponallocated.FieldDeleteAt},
		},
	}
	graph.Nodes[7] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   couponpool.Table,
			Columns: couponpool.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: couponpool.FieldID,
			},
		},
		Type: "CouponPool",
		Fields: map[string]*sqlgraph.FieldSpec{
			couponpool.FieldAppID:           {Type: field.TypeUUID, Column: couponpool.FieldAppID},
			couponpool.FieldDenomination:    {Type: field.TypeUint64, Column: couponpool.FieldDenomination},
			couponpool.FieldCirculation:     {Type: field.TypeInt32, Column: couponpool.FieldCirculation},
			couponpool.FieldReleaseByUserID: {Type: field.TypeUUID, Column: couponpool.FieldReleaseByUserID},
			couponpool.FieldStart:           {Type: field.TypeUint32, Column: couponpool.FieldStart},
			couponpool.FieldDurationDays:    {Type: field.TypeInt32, Column: couponpool.FieldDurationDays},
			couponpool.FieldMessage:         {Type: field.TypeString, Column: couponpool.FieldMessage},
			couponpool.FieldName:            {Type: field.TypeString, Column: couponpool.FieldName},
			couponpool.FieldCreateAt:        {Type: field.TypeUint32, Column: couponpool.FieldCreateAt},
			couponpool.FieldUpdateAt:        {Type: field.TypeUint32, Column: couponpool.FieldUpdateAt},
			couponpool.FieldDeleteAt:        {Type: field.TypeUint32, Column: couponpool.FieldDeleteAt},
		},
	}
	graph.Nodes[8] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   defaultkpisetting.Table,
			Columns: defaultkpisetting.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: defaultkpisetting.FieldID,
			},
		},
		Type: "DefaultKpiSetting",
		Fields: map[string]*sqlgraph.FieldSpec{
			defaultkpisetting.FieldAmount:   {Type: field.TypeUint64, Column: defaultkpisetting.FieldAmount},
			defaultkpisetting.FieldPercent:  {Type: field.TypeInt32, Column: defaultkpisetting.FieldPercent},
			defaultkpisetting.FieldAppID:    {Type: field.TypeUUID, Column: defaultkpisetting.FieldAppID},
			defaultkpisetting.FieldGoodID:   {Type: field.TypeUUID, Column: defaultkpisetting.FieldGoodID},
			defaultkpisetting.FieldCreateAt: {Type: field.TypeUint32, Column: defaultkpisetting.FieldCreateAt},
			defaultkpisetting.FieldUpdateAt: {Type: field.TypeUint32, Column: defaultkpisetting.FieldUpdateAt},
			defaultkpisetting.FieldDeleteAt: {Type: field.TypeUint32, Column: defaultkpisetting.FieldDeleteAt},
		},
	}
	graph.Nodes[9] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   discountpool.Table,
			Columns: discountpool.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: discountpool.FieldID,
			},
		},
		Type: "DiscountPool",
		Fields: map[string]*sqlgraph.FieldSpec{
			discountpool.FieldAppID:           {Type: field.TypeUUID, Column: discountpool.FieldAppID},
			discountpool.FieldDiscount:        {Type: field.TypeUint32, Column: discountpool.FieldDiscount},
			discountpool.FieldReleaseByUserID: {Type: field.TypeUUID, Column: discountpool.FieldReleaseByUserID},
			discountpool.FieldStart:           {Type: field.TypeUint32, Column: discountpool.FieldStart},
			discountpool.FieldDurationDays:    {Type: field.TypeInt32, Column: discountpool.FieldDurationDays},
			discountpool.FieldMessage:         {Type: field.TypeString, Column: discountpool.FieldMessage},
			discountpool.FieldName:            {Type: field.TypeString, Column: discountpool.FieldName},
			discountpool.FieldCreateAt:        {Type: field.TypeUint32, Column: discountpool.FieldCreateAt},
			discountpool.FieldUpdateAt:        {Type: field.TypeUint32, Column: discountpool.FieldUpdateAt},
			discountpool.FieldDeleteAt:        {Type: field.TypeUint32, Column: discountpool.FieldDeleteAt},
		},
	}
	graph.Nodes[10] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   eventcoupon.Table,
			Columns: eventcoupon.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: eventcoupon.FieldID,
			},
		},
		Type: "EventCoupon",
		Fields: map[string]*sqlgraph.FieldSpec{
			eventcoupon.FieldAppID:      {Type: field.TypeUUID, Column: eventcoupon.FieldAppID},
			eventcoupon.FieldActivityID: {Type: field.TypeUUID, Column: eventcoupon.FieldActivityID},
			eventcoupon.FieldType:       {Type: field.TypeString, Column: eventcoupon.FieldType},
			eventcoupon.FieldCouponID:   {Type: field.TypeUUID, Column: eventcoupon.FieldCouponID},
			eventcoupon.FieldEvent:      {Type: field.TypeString, Column: eventcoupon.FieldEvent},
			eventcoupon.FieldCount:      {Type: field.TypeUint32, Column: eventcoupon.FieldCount},
			eventcoupon.FieldCreateAt:   {Type: field.TypeUint32, Column: eventcoupon.FieldCreateAt},
			eventcoupon.FieldUpdateAt:   {Type: field.TypeUint32, Column: eventcoupon.FieldUpdateAt},
			eventcoupon.FieldDeleteAt:   {Type: field.TypeUint32, Column: eventcoupon.FieldDeleteAt},
		},
	}
	graph.Nodes[11] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   registrationinvitation.Table,
			Columns: registrationinvitation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: registrationinvitation.FieldID,
			},
		},
		Type: "RegistrationInvitation",
		Fields: map[string]*sqlgraph.FieldSpec{
			registrationinvitation.FieldCreateAt:  {Type: field.TypeUint32, Column: registrationinvitation.FieldCreateAt},
			registrationinvitation.FieldUpdateAt:  {Type: field.TypeUint32, Column: registrationinvitation.FieldUpdateAt},
			registrationinvitation.FieldDeleteAt:  {Type: field.TypeUint32, Column: registrationinvitation.FieldDeleteAt},
			registrationinvitation.FieldInviterID: {Type: field.TypeUUID, Column: registrationinvitation.FieldInviterID},
			registrationinvitation.FieldInviteeID: {Type: field.TypeUUID, Column: registrationinvitation.FieldInviteeID},
			registrationinvitation.FieldAppID:     {Type: field.TypeUUID, Column: registrationinvitation.FieldAppID},
		},
	}
	graph.Nodes[12] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   userinvitationcode.Table,
			Columns: userinvitationcode.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: userinvitationcode.FieldID,
			},
		},
		Type: "UserInvitationCode",
		Fields: map[string]*sqlgraph.FieldSpec{
			userinvitationcode.FieldUserID:         {Type: field.TypeUUID, Column: userinvitationcode.FieldUserID},
			userinvitationcode.FieldAppID:          {Type: field.TypeUUID, Column: userinvitationcode.FieldAppID},
			userinvitationcode.FieldInvitationCode: {Type: field.TypeString, Column: userinvitationcode.FieldInvitationCode},
			userinvitationcode.FieldCreateAt:       {Type: field.TypeUint32, Column: userinvitationcode.FieldCreateAt},
			userinvitationcode.FieldUpdateAt:       {Type: field.TypeUint32, Column: userinvitationcode.FieldUpdateAt},
			userinvitationcode.FieldDeleteAt:       {Type: field.TypeUint32, Column: userinvitationcode.FieldDeleteAt},
		},
	}
	graph.Nodes[13] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   userkpisetting.Table,
			Columns: userkpisetting.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: userkpisetting.FieldID,
			},
		},
		Type: "UserKpiSetting",
		Fields: map[string]*sqlgraph.FieldSpec{
			userkpisetting.FieldAmount:   {Type: field.TypeUint64, Column: userkpisetting.FieldAmount},
			userkpisetting.FieldPercent:  {Type: field.TypeInt32, Column: userkpisetting.FieldPercent},
			userkpisetting.FieldAppID:    {Type: field.TypeUUID, Column: userkpisetting.FieldAppID},
			userkpisetting.FieldGoodID:   {Type: field.TypeUUID, Column: userkpisetting.FieldGoodID},
			userkpisetting.FieldUserID:   {Type: field.TypeUUID, Column: userkpisetting.FieldUserID},
			userkpisetting.FieldCreateAt: {Type: field.TypeUint32, Column: userkpisetting.FieldCreateAt},
			userkpisetting.FieldUpdateAt: {Type: field.TypeUint32, Column: userkpisetting.FieldUpdateAt},
			userkpisetting.FieldDeleteAt: {Type: field.TypeUint32, Column: userkpisetting.FieldDeleteAt},
		},
	}
	graph.Nodes[14] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   userspecialreduction.Table,
			Columns: userspecialreduction.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: userspecialreduction.FieldID,
			},
		},
		Type: "UserSpecialReduction",
		Fields: map[string]*sqlgraph.FieldSpec{
			userspecialreduction.FieldAppID:           {Type: field.TypeUUID, Column: userspecialreduction.FieldAppID},
			userspecialreduction.FieldUserID:          {Type: field.TypeUUID, Column: userspecialreduction.FieldUserID},
			userspecialreduction.FieldAmount:          {Type: field.TypeUint64, Column: userspecialreduction.FieldAmount},
			userspecialreduction.FieldReleaseByUserID: {Type: field.TypeUUID, Column: userspecialreduction.FieldReleaseByUserID},
			userspecialreduction.FieldStart:           {Type: field.TypeUint32, Column: userspecialreduction.FieldStart},
			userspecialreduction.FieldDurationDays:    {Type: field.TypeInt32, Column: userspecialreduction.FieldDurationDays},
			userspecialreduction.FieldMessage:         {Type: field.TypeString, Column: userspecialreduction.FieldMessage},
			userspecialreduction.FieldCreateAt:        {Type: field.TypeUint32, Column: userspecialreduction.FieldCreateAt},
			userspecialreduction.FieldUpdateAt:        {Type: field.TypeUint32, Column: userspecialreduction.FieldUpdateAt},
			userspecialreduction.FieldDeleteAt:        {Type: field.TypeUint32, Column: userspecialreduction.FieldDeleteAt},
		},
	}
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (aq *ActivityQuery) addPredicate(pred func(s *sql.Selector)) {
	aq.predicates = append(aq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ActivityQuery builder.
func (aq *ActivityQuery) Filter() *ActivityFilter {
	return &ActivityFilter{aq}
}

// addPredicate implements the predicateAdder interface.
func (m *ActivityMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ActivityMutation builder.
func (m *ActivityMutation) Filter() *ActivityFilter {
	return &ActivityFilter{m}
}

// ActivityFilter provides a generic filtering capability at runtime for ActivityQuery.
type ActivityFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *ActivityFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *ActivityFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(activity.FieldID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *ActivityFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(activity.FieldAppID))
}

// WhereCreatedBy applies the entql [16]byte predicate on the created_by field.
func (f *ActivityFilter) WhereCreatedBy(p entql.ValueP) {
	f.Where(p.Field(activity.FieldCreatedBy))
}

// WhereName applies the entql string predicate on the name field.
func (f *ActivityFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(activity.FieldName))
}

// WhereStart applies the entql uint32 predicate on the start field.
func (f *ActivityFilter) WhereStart(p entql.Uint32P) {
	f.Where(p.Field(activity.FieldStart))
}

// WhereEnd applies the entql uint32 predicate on the end field.
func (f *ActivityFilter) WhereEnd(p entql.Uint32P) {
	f.Where(p.Field(activity.FieldEnd))
}

// WhereSystemActivity applies the entql bool predicate on the system_activity field.
func (f *ActivityFilter) WhereSystemActivity(p entql.BoolP) {
	f.Where(p.Field(activity.FieldSystemActivity))
}

// WhereCreateAt applies the entql uint32 predicate on the create_at field.
func (f *ActivityFilter) WhereCreateAt(p entql.Uint32P) {
	f.Where(p.Field(activity.FieldCreateAt))
}

// WhereUpdateAt applies the entql uint32 predicate on the update_at field.
func (f *ActivityFilter) WhereUpdateAt(p entql.Uint32P) {
	f.Where(p.Field(activity.FieldUpdateAt))
}

// WhereDeleteAt applies the entql uint32 predicate on the delete_at field.
func (f *ActivityFilter) WhereDeleteAt(p entql.Uint32P) {
	f.Where(p.Field(activity.FieldDeleteAt))
}

// addPredicate implements the predicateAdder interface.
func (acsq *AppCommissionSettingQuery) addPredicate(pred func(s *sql.Selector)) {
	acsq.predicates = append(acsq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AppCommissionSettingQuery builder.
func (acsq *AppCommissionSettingQuery) Filter() *AppCommissionSettingFilter {
	return &AppCommissionSettingFilter{acsq}
}

// addPredicate implements the predicateAdder interface.
func (m *AppCommissionSettingMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AppCommissionSettingMutation builder.
func (m *AppCommissionSettingMutation) Filter() *AppCommissionSettingFilter {
	return &AppCommissionSettingFilter{m}
}

// AppCommissionSettingFilter provides a generic filtering capability at runtime for AppCommissionSettingQuery.
type AppCommissionSettingFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *AppCommissionSettingFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *AppCommissionSettingFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(appcommissionsetting.FieldID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *AppCommissionSettingFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(appcommissionsetting.FieldAppID))
}

// WhereType applies the entql string predicate on the type field.
func (f *AppCommissionSettingFilter) WhereType(p entql.StringP) {
	f.Where(p.Field(appcommissionsetting.FieldType))
}

// WhereLevel applies the entql uint32 predicate on the level field.
func (f *AppCommissionSettingFilter) WhereLevel(p entql.Uint32P) {
	f.Where(p.Field(appcommissionsetting.FieldLevel))
}

// WhereInvitationDiscount applies the entql bool predicate on the invitation_discount field.
func (f *AppCommissionSettingFilter) WhereInvitationDiscount(p entql.BoolP) {
	f.Where(p.Field(appcommissionsetting.FieldInvitationDiscount))
}

// WhereUniqueSetting applies the entql bool predicate on the unique_setting field.
func (f *AppCommissionSettingFilter) WhereUniqueSetting(p entql.BoolP) {
	f.Where(p.Field(appcommissionsetting.FieldUniqueSetting))
}

// WhereKpiSetting applies the entql bool predicate on the kpi_setting field.
func (f *AppCommissionSettingFilter) WhereKpiSetting(p entql.BoolP) {
	f.Where(p.Field(appcommissionsetting.FieldKpiSetting))
}

// WhereCreateAt applies the entql uint32 predicate on the create_at field.
func (f *AppCommissionSettingFilter) WhereCreateAt(p entql.Uint32P) {
	f.Where(p.Field(appcommissionsetting.FieldCreateAt))
}

// WhereUpdateAt applies the entql uint32 predicate on the update_at field.
func (f *AppCommissionSettingFilter) WhereUpdateAt(p entql.Uint32P) {
	f.Where(p.Field(appcommissionsetting.FieldUpdateAt))
}

// WhereDeleteAt applies the entql uint32 predicate on the delete_at field.
func (f *AppCommissionSettingFilter) WhereDeleteAt(p entql.Uint32P) {
	f.Where(p.Field(appcommissionsetting.FieldDeleteAt))
}

// addPredicate implements the predicateAdder interface.
func (acsq *AppCouponSettingQuery) addPredicate(pred func(s *sql.Selector)) {
	acsq.predicates = append(acsq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AppCouponSettingQuery builder.
func (acsq *AppCouponSettingQuery) Filter() *AppCouponSettingFilter {
	return &AppCouponSettingFilter{acsq}
}

// addPredicate implements the predicateAdder interface.
func (m *AppCouponSettingMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AppCouponSettingMutation builder.
func (m *AppCouponSettingMutation) Filter() *AppCouponSettingFilter {
	return &AppCouponSettingFilter{m}
}

// AppCouponSettingFilter provides a generic filtering capability at runtime for AppCouponSettingQuery.
type AppCouponSettingFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *AppCouponSettingFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[2].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *AppCouponSettingFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(appcouponsetting.FieldID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *AppCouponSettingFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(appcouponsetting.FieldAppID))
}

// WhereDominationLimit applies the entql uint64 predicate on the domination_limit field.
func (f *AppCouponSettingFilter) WhereDominationLimit(p entql.Uint64P) {
	f.Where(p.Field(appcouponsetting.FieldDominationLimit))
}

// WhereTotalLimit applies the entql int32 predicate on the total_limit field.
func (f *AppCouponSettingFilter) WhereTotalLimit(p entql.Int32P) {
	f.Where(p.Field(appcouponsetting.FieldTotalLimit))
}

// WhereCreateAt applies the entql uint32 predicate on the create_at field.
func (f *AppCouponSettingFilter) WhereCreateAt(p entql.Uint32P) {
	f.Where(p.Field(appcouponsetting.FieldCreateAt))
}

// WhereUpdateAt applies the entql uint32 predicate on the update_at field.
func (f *AppCouponSettingFilter) WhereUpdateAt(p entql.Uint32P) {
	f.Where(p.Field(appcouponsetting.FieldUpdateAt))
}

// WhereDeleteAt applies the entql uint32 predicate on the delete_at field.
func (f *AppCouponSettingFilter) WhereDeleteAt(p entql.Uint32P) {
	f.Where(p.Field(appcouponsetting.FieldDeleteAt))
}

// addPredicate implements the predicateAdder interface.
func (aisq *AppInvitationSettingQuery) addPredicate(pred func(s *sql.Selector)) {
	aisq.predicates = append(aisq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AppInvitationSettingQuery builder.
func (aisq *AppInvitationSettingQuery) Filter() *AppInvitationSettingFilter {
	return &AppInvitationSettingFilter{aisq}
}

// addPredicate implements the predicateAdder interface.
func (m *AppInvitationSettingMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AppInvitationSettingMutation builder.
func (m *AppInvitationSettingMutation) Filter() *AppInvitationSettingFilter {
	return &AppInvitationSettingFilter{m}
}

// AppInvitationSettingFilter provides a generic filtering capability at runtime for AppInvitationSettingQuery.
type AppInvitationSettingFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *AppInvitationSettingFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[3].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *AppInvitationSettingFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(appinvitationsetting.FieldID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *AppInvitationSettingFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(appinvitationsetting.FieldAppID))
}

// WhereCount applies the entql uint32 predicate on the count field.
func (f *AppInvitationSettingFilter) WhereCount(p entql.Uint32P) {
	f.Where(p.Field(appinvitationsetting.FieldCount))
}

// WhereDiscount applies the entql uint32 predicate on the discount field.
func (f *AppInvitationSettingFilter) WhereDiscount(p entql.Uint32P) {
	f.Where(p.Field(appinvitationsetting.FieldDiscount))
}

// WhereCreateAt applies the entql uint32 predicate on the create_at field.
func (f *AppInvitationSettingFilter) WhereCreateAt(p entql.Uint32P) {
	f.Where(p.Field(appinvitationsetting.FieldCreateAt))
}

// WhereUpdateAt applies the entql uint32 predicate on the update_at field.
func (f *AppInvitationSettingFilter) WhereUpdateAt(p entql.Uint32P) {
	f.Where(p.Field(appinvitationsetting.FieldUpdateAt))
}

// WhereDeleteAt applies the entql uint32 predicate on the delete_at field.
func (f *AppInvitationSettingFilter) WhereDeleteAt(p entql.Uint32P) {
	f.Where(p.Field(appinvitationsetting.FieldDeleteAt))
}

// WhereTitle applies the entql string predicate on the title field.
func (f *AppInvitationSettingFilter) WhereTitle(p entql.StringP) {
	f.Where(p.Field(appinvitationsetting.FieldTitle))
}

// WhereBadgeLarge applies the entql string predicate on the badge_large field.
func (f *AppInvitationSettingFilter) WhereBadgeLarge(p entql.StringP) {
	f.Where(p.Field(appinvitationsetting.FieldBadgeLarge))
}

// WhereBadgeSmall applies the entql string predicate on the badge_small field.
func (f *AppInvitationSettingFilter) WhereBadgeSmall(p entql.StringP) {
	f.Where(p.Field(appinvitationsetting.FieldBadgeSmall))
}

// addPredicate implements the predicateAdder interface.
func (apasq *AppPurchaseAmountSettingQuery) addPredicate(pred func(s *sql.Selector)) {
	apasq.predicates = append(apasq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AppPurchaseAmountSettingQuery builder.
func (apasq *AppPurchaseAmountSettingQuery) Filter() *AppPurchaseAmountSettingFilter {
	return &AppPurchaseAmountSettingFilter{apasq}
}

// addPredicate implements the predicateAdder interface.
func (m *AppPurchaseAmountSettingMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AppPurchaseAmountSettingMutation builder.
func (m *AppPurchaseAmountSettingMutation) Filter() *AppPurchaseAmountSettingFilter {
	return &AppPurchaseAmountSettingFilter{m}
}

// AppPurchaseAmountSettingFilter provides a generic filtering capability at runtime for AppPurchaseAmountSettingQuery.
type AppPurchaseAmountSettingFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *AppPurchaseAmountSettingFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[4].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *AppPurchaseAmountSettingFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(apppurchaseamountsetting.FieldID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *AppPurchaseAmountSettingFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(apppurchaseamountsetting.FieldAppID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *AppPurchaseAmountSettingFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(apppurchaseamountsetting.FieldUserID))
}

// WhereGoodID applies the entql [16]byte predicate on the good_id field.
func (f *AppPurchaseAmountSettingFilter) WhereGoodID(p entql.ValueP) {
	f.Where(p.Field(apppurchaseamountsetting.FieldGoodID))
}

// WhereTitle applies the entql string predicate on the title field.
func (f *AppPurchaseAmountSettingFilter) WhereTitle(p entql.StringP) {
	f.Where(p.Field(apppurchaseamountsetting.FieldTitle))
}

// WhereAmount applies the entql uint64 predicate on the amount field.
func (f *AppPurchaseAmountSettingFilter) WhereAmount(p entql.Uint64P) {
	f.Where(p.Field(apppurchaseamountsetting.FieldAmount))
}

// WherePercent applies the entql uint32 predicate on the percent field.
func (f *AppPurchaseAmountSettingFilter) WherePercent(p entql.Uint32P) {
	f.Where(p.Field(apppurchaseamountsetting.FieldPercent))
}

// WhereStart applies the entql uint32 predicate on the start field.
func (f *AppPurchaseAmountSettingFilter) WhereStart(p entql.Uint32P) {
	f.Where(p.Field(apppurchaseamountsetting.FieldStart))
}

// WhereEnd applies the entql uint32 predicate on the end field.
func (f *AppPurchaseAmountSettingFilter) WhereEnd(p entql.Uint32P) {
	f.Where(p.Field(apppurchaseamountsetting.FieldEnd))
}

// WhereBadgeLarge applies the entql string predicate on the badge_large field.
func (f *AppPurchaseAmountSettingFilter) WhereBadgeLarge(p entql.StringP) {
	f.Where(p.Field(apppurchaseamountsetting.FieldBadgeLarge))
}

// WhereBadgeSmall applies the entql string predicate on the badge_small field.
func (f *AppPurchaseAmountSettingFilter) WhereBadgeSmall(p entql.StringP) {
	f.Where(p.Field(apppurchaseamountsetting.FieldBadgeSmall))
}

// WhereCreateAt applies the entql uint32 predicate on the create_at field.
func (f *AppPurchaseAmountSettingFilter) WhereCreateAt(p entql.Uint32P) {
	f.Where(p.Field(apppurchaseamountsetting.FieldCreateAt))
}

// WhereUpdateAt applies the entql uint32 predicate on the update_at field.
func (f *AppPurchaseAmountSettingFilter) WhereUpdateAt(p entql.Uint32P) {
	f.Where(p.Field(apppurchaseamountsetting.FieldUpdateAt))
}

// WhereDeleteAt applies the entql uint32 predicate on the delete_at field.
func (f *AppPurchaseAmountSettingFilter) WhereDeleteAt(p entql.Uint32P) {
	f.Where(p.Field(apppurchaseamountsetting.FieldDeleteAt))
}

// addPredicate implements the predicateAdder interface.
func (ccsq *CommissionCoinSettingQuery) addPredicate(pred func(s *sql.Selector)) {
	ccsq.predicates = append(ccsq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CommissionCoinSettingQuery builder.
func (ccsq *CommissionCoinSettingQuery) Filter() *CommissionCoinSettingFilter {
	return &CommissionCoinSettingFilter{ccsq}
}

// addPredicate implements the predicateAdder interface.
func (m *CommissionCoinSettingMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CommissionCoinSettingMutation builder.
func (m *CommissionCoinSettingMutation) Filter() *CommissionCoinSettingFilter {
	return &CommissionCoinSettingFilter{m}
}

// CommissionCoinSettingFilter provides a generic filtering capability at runtime for CommissionCoinSettingQuery.
type CommissionCoinSettingFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *CommissionCoinSettingFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[5].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *CommissionCoinSettingFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(commissioncoinsetting.FieldID))
}

// WhereCoinTypeID applies the entql [16]byte predicate on the coin_type_id field.
func (f *CommissionCoinSettingFilter) WhereCoinTypeID(p entql.ValueP) {
	f.Where(p.Field(commissioncoinsetting.FieldCoinTypeID))
}

// WhereUsing applies the entql bool predicate on the using field.
func (f *CommissionCoinSettingFilter) WhereUsing(p entql.BoolP) {
	f.Where(p.Field(commissioncoinsetting.FieldUsing))
}

// WhereCreateAt applies the entql uint32 predicate on the create_at field.
func (f *CommissionCoinSettingFilter) WhereCreateAt(p entql.Uint32P) {
	f.Where(p.Field(commissioncoinsetting.FieldCreateAt))
}

// WhereUpdateAt applies the entql uint32 predicate on the update_at field.
func (f *CommissionCoinSettingFilter) WhereUpdateAt(p entql.Uint32P) {
	f.Where(p.Field(commissioncoinsetting.FieldUpdateAt))
}

// WhereDeleteAt applies the entql uint32 predicate on the delete_at field.
func (f *CommissionCoinSettingFilter) WhereDeleteAt(p entql.Uint32P) {
	f.Where(p.Field(commissioncoinsetting.FieldDeleteAt))
}

// addPredicate implements the predicateAdder interface.
func (caq *CouponAllocatedQuery) addPredicate(pred func(s *sql.Selector)) {
	caq.predicates = append(caq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CouponAllocatedQuery builder.
func (caq *CouponAllocatedQuery) Filter() *CouponAllocatedFilter {
	return &CouponAllocatedFilter{caq}
}

// addPredicate implements the predicateAdder interface.
func (m *CouponAllocatedMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CouponAllocatedMutation builder.
func (m *CouponAllocatedMutation) Filter() *CouponAllocatedFilter {
	return &CouponAllocatedFilter{m}
}

// CouponAllocatedFilter provides a generic filtering capability at runtime for CouponAllocatedQuery.
type CouponAllocatedFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *CouponAllocatedFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[6].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *CouponAllocatedFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(couponallocated.FieldID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *CouponAllocatedFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(couponallocated.FieldAppID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *CouponAllocatedFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(couponallocated.FieldUserID))
}

// WhereType applies the entql string predicate on the type field.
func (f *CouponAllocatedFilter) WhereType(p entql.StringP) {
	f.Where(p.Field(couponallocated.FieldType))
}

// WhereCouponID applies the entql [16]byte predicate on the coupon_id field.
func (f *CouponAllocatedFilter) WhereCouponID(p entql.ValueP) {
	f.Where(p.Field(couponallocated.FieldCouponID))
}

// WhereCreateAt applies the entql uint32 predicate on the create_at field.
func (f *CouponAllocatedFilter) WhereCreateAt(p entql.Uint32P) {
	f.Where(p.Field(couponallocated.FieldCreateAt))
}

// WhereUpdateAt applies the entql uint32 predicate on the update_at field.
func (f *CouponAllocatedFilter) WhereUpdateAt(p entql.Uint32P) {
	f.Where(p.Field(couponallocated.FieldUpdateAt))
}

// WhereDeleteAt applies the entql uint32 predicate on the delete_at field.
func (f *CouponAllocatedFilter) WhereDeleteAt(p entql.Uint32P) {
	f.Where(p.Field(couponallocated.FieldDeleteAt))
}

// addPredicate implements the predicateAdder interface.
func (cpq *CouponPoolQuery) addPredicate(pred func(s *sql.Selector)) {
	cpq.predicates = append(cpq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CouponPoolQuery builder.
func (cpq *CouponPoolQuery) Filter() *CouponPoolFilter {
	return &CouponPoolFilter{cpq}
}

// addPredicate implements the predicateAdder interface.
func (m *CouponPoolMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CouponPoolMutation builder.
func (m *CouponPoolMutation) Filter() *CouponPoolFilter {
	return &CouponPoolFilter{m}
}

// CouponPoolFilter provides a generic filtering capability at runtime for CouponPoolQuery.
type CouponPoolFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *CouponPoolFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[7].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *CouponPoolFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(couponpool.FieldID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *CouponPoolFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(couponpool.FieldAppID))
}

// WhereDenomination applies the entql uint64 predicate on the denomination field.
func (f *CouponPoolFilter) WhereDenomination(p entql.Uint64P) {
	f.Where(p.Field(couponpool.FieldDenomination))
}

// WhereCirculation applies the entql int32 predicate on the circulation field.
func (f *CouponPoolFilter) WhereCirculation(p entql.Int32P) {
	f.Where(p.Field(couponpool.FieldCirculation))
}

// WhereReleaseByUserID applies the entql [16]byte predicate on the release_by_user_id field.
func (f *CouponPoolFilter) WhereReleaseByUserID(p entql.ValueP) {
	f.Where(p.Field(couponpool.FieldReleaseByUserID))
}

// WhereStart applies the entql uint32 predicate on the start field.
func (f *CouponPoolFilter) WhereStart(p entql.Uint32P) {
	f.Where(p.Field(couponpool.FieldStart))
}

// WhereDurationDays applies the entql int32 predicate on the duration_days field.
func (f *CouponPoolFilter) WhereDurationDays(p entql.Int32P) {
	f.Where(p.Field(couponpool.FieldDurationDays))
}

// WhereMessage applies the entql string predicate on the message field.
func (f *CouponPoolFilter) WhereMessage(p entql.StringP) {
	f.Where(p.Field(couponpool.FieldMessage))
}

// WhereName applies the entql string predicate on the name field.
func (f *CouponPoolFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(couponpool.FieldName))
}

// WhereCreateAt applies the entql uint32 predicate on the create_at field.
func (f *CouponPoolFilter) WhereCreateAt(p entql.Uint32P) {
	f.Where(p.Field(couponpool.FieldCreateAt))
}

// WhereUpdateAt applies the entql uint32 predicate on the update_at field.
func (f *CouponPoolFilter) WhereUpdateAt(p entql.Uint32P) {
	f.Where(p.Field(couponpool.FieldUpdateAt))
}

// WhereDeleteAt applies the entql uint32 predicate on the delete_at field.
func (f *CouponPoolFilter) WhereDeleteAt(p entql.Uint32P) {
	f.Where(p.Field(couponpool.FieldDeleteAt))
}

// addPredicate implements the predicateAdder interface.
func (dksq *DefaultKpiSettingQuery) addPredicate(pred func(s *sql.Selector)) {
	dksq.predicates = append(dksq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the DefaultKpiSettingQuery builder.
func (dksq *DefaultKpiSettingQuery) Filter() *DefaultKpiSettingFilter {
	return &DefaultKpiSettingFilter{dksq}
}

// addPredicate implements the predicateAdder interface.
func (m *DefaultKpiSettingMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the DefaultKpiSettingMutation builder.
func (m *DefaultKpiSettingMutation) Filter() *DefaultKpiSettingFilter {
	return &DefaultKpiSettingFilter{m}
}

// DefaultKpiSettingFilter provides a generic filtering capability at runtime for DefaultKpiSettingQuery.
type DefaultKpiSettingFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *DefaultKpiSettingFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[8].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *DefaultKpiSettingFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(defaultkpisetting.FieldID))
}

// WhereAmount applies the entql uint64 predicate on the amount field.
func (f *DefaultKpiSettingFilter) WhereAmount(p entql.Uint64P) {
	f.Where(p.Field(defaultkpisetting.FieldAmount))
}

// WherePercent applies the entql int32 predicate on the percent field.
func (f *DefaultKpiSettingFilter) WherePercent(p entql.Int32P) {
	f.Where(p.Field(defaultkpisetting.FieldPercent))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *DefaultKpiSettingFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(defaultkpisetting.FieldAppID))
}

// WhereGoodID applies the entql [16]byte predicate on the good_id field.
func (f *DefaultKpiSettingFilter) WhereGoodID(p entql.ValueP) {
	f.Where(p.Field(defaultkpisetting.FieldGoodID))
}

// WhereCreateAt applies the entql uint32 predicate on the create_at field.
func (f *DefaultKpiSettingFilter) WhereCreateAt(p entql.Uint32P) {
	f.Where(p.Field(defaultkpisetting.FieldCreateAt))
}

// WhereUpdateAt applies the entql uint32 predicate on the update_at field.
func (f *DefaultKpiSettingFilter) WhereUpdateAt(p entql.Uint32P) {
	f.Where(p.Field(defaultkpisetting.FieldUpdateAt))
}

// WhereDeleteAt applies the entql uint32 predicate on the delete_at field.
func (f *DefaultKpiSettingFilter) WhereDeleteAt(p entql.Uint32P) {
	f.Where(p.Field(defaultkpisetting.FieldDeleteAt))
}

// addPredicate implements the predicateAdder interface.
func (dpq *DiscountPoolQuery) addPredicate(pred func(s *sql.Selector)) {
	dpq.predicates = append(dpq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the DiscountPoolQuery builder.
func (dpq *DiscountPoolQuery) Filter() *DiscountPoolFilter {
	return &DiscountPoolFilter{dpq}
}

// addPredicate implements the predicateAdder interface.
func (m *DiscountPoolMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the DiscountPoolMutation builder.
func (m *DiscountPoolMutation) Filter() *DiscountPoolFilter {
	return &DiscountPoolFilter{m}
}

// DiscountPoolFilter provides a generic filtering capability at runtime for DiscountPoolQuery.
type DiscountPoolFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *DiscountPoolFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[9].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *DiscountPoolFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(discountpool.FieldID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *DiscountPoolFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(discountpool.FieldAppID))
}

// WhereDiscount applies the entql uint32 predicate on the discount field.
func (f *DiscountPoolFilter) WhereDiscount(p entql.Uint32P) {
	f.Where(p.Field(discountpool.FieldDiscount))
}

// WhereReleaseByUserID applies the entql [16]byte predicate on the release_by_user_id field.
func (f *DiscountPoolFilter) WhereReleaseByUserID(p entql.ValueP) {
	f.Where(p.Field(discountpool.FieldReleaseByUserID))
}

// WhereStart applies the entql uint32 predicate on the start field.
func (f *DiscountPoolFilter) WhereStart(p entql.Uint32P) {
	f.Where(p.Field(discountpool.FieldStart))
}

// WhereDurationDays applies the entql int32 predicate on the duration_days field.
func (f *DiscountPoolFilter) WhereDurationDays(p entql.Int32P) {
	f.Where(p.Field(discountpool.FieldDurationDays))
}

// WhereMessage applies the entql string predicate on the message field.
func (f *DiscountPoolFilter) WhereMessage(p entql.StringP) {
	f.Where(p.Field(discountpool.FieldMessage))
}

// WhereName applies the entql string predicate on the name field.
func (f *DiscountPoolFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(discountpool.FieldName))
}

// WhereCreateAt applies the entql uint32 predicate on the create_at field.
func (f *DiscountPoolFilter) WhereCreateAt(p entql.Uint32P) {
	f.Where(p.Field(discountpool.FieldCreateAt))
}

// WhereUpdateAt applies the entql uint32 predicate on the update_at field.
func (f *DiscountPoolFilter) WhereUpdateAt(p entql.Uint32P) {
	f.Where(p.Field(discountpool.FieldUpdateAt))
}

// WhereDeleteAt applies the entql uint32 predicate on the delete_at field.
func (f *DiscountPoolFilter) WhereDeleteAt(p entql.Uint32P) {
	f.Where(p.Field(discountpool.FieldDeleteAt))
}

// addPredicate implements the predicateAdder interface.
func (ecq *EventCouponQuery) addPredicate(pred func(s *sql.Selector)) {
	ecq.predicates = append(ecq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the EventCouponQuery builder.
func (ecq *EventCouponQuery) Filter() *EventCouponFilter {
	return &EventCouponFilter{ecq}
}

// addPredicate implements the predicateAdder interface.
func (m *EventCouponMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the EventCouponMutation builder.
func (m *EventCouponMutation) Filter() *EventCouponFilter {
	return &EventCouponFilter{m}
}

// EventCouponFilter provides a generic filtering capability at runtime for EventCouponQuery.
type EventCouponFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *EventCouponFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[10].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *EventCouponFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(eventcoupon.FieldID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *EventCouponFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(eventcoupon.FieldAppID))
}

// WhereActivityID applies the entql [16]byte predicate on the activity_id field.
func (f *EventCouponFilter) WhereActivityID(p entql.ValueP) {
	f.Where(p.Field(eventcoupon.FieldActivityID))
}

// WhereType applies the entql string predicate on the type field.
func (f *EventCouponFilter) WhereType(p entql.StringP) {
	f.Where(p.Field(eventcoupon.FieldType))
}

// WhereCouponID applies the entql [16]byte predicate on the coupon_id field.
func (f *EventCouponFilter) WhereCouponID(p entql.ValueP) {
	f.Where(p.Field(eventcoupon.FieldCouponID))
}

// WhereEvent applies the entql string predicate on the event field.
func (f *EventCouponFilter) WhereEvent(p entql.StringP) {
	f.Where(p.Field(eventcoupon.FieldEvent))
}

// WhereCount applies the entql uint32 predicate on the count field.
func (f *EventCouponFilter) WhereCount(p entql.Uint32P) {
	f.Where(p.Field(eventcoupon.FieldCount))
}

// WhereCreateAt applies the entql uint32 predicate on the create_at field.
func (f *EventCouponFilter) WhereCreateAt(p entql.Uint32P) {
	f.Where(p.Field(eventcoupon.FieldCreateAt))
}

// WhereUpdateAt applies the entql uint32 predicate on the update_at field.
func (f *EventCouponFilter) WhereUpdateAt(p entql.Uint32P) {
	f.Where(p.Field(eventcoupon.FieldUpdateAt))
}

// WhereDeleteAt applies the entql uint32 predicate on the delete_at field.
func (f *EventCouponFilter) WhereDeleteAt(p entql.Uint32P) {
	f.Where(p.Field(eventcoupon.FieldDeleteAt))
}

// addPredicate implements the predicateAdder interface.
func (riq *RegistrationInvitationQuery) addPredicate(pred func(s *sql.Selector)) {
	riq.predicates = append(riq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the RegistrationInvitationQuery builder.
func (riq *RegistrationInvitationQuery) Filter() *RegistrationInvitationFilter {
	return &RegistrationInvitationFilter{riq}
}

// addPredicate implements the predicateAdder interface.
func (m *RegistrationInvitationMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the RegistrationInvitationMutation builder.
func (m *RegistrationInvitationMutation) Filter() *RegistrationInvitationFilter {
	return &RegistrationInvitationFilter{m}
}

// RegistrationInvitationFilter provides a generic filtering capability at runtime for RegistrationInvitationQuery.
type RegistrationInvitationFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *RegistrationInvitationFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[11].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *RegistrationInvitationFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(registrationinvitation.FieldID))
}

// WhereCreateAt applies the entql uint32 predicate on the create_at field.
func (f *RegistrationInvitationFilter) WhereCreateAt(p entql.Uint32P) {
	f.Where(p.Field(registrationinvitation.FieldCreateAt))
}

// WhereUpdateAt applies the entql uint32 predicate on the update_at field.
func (f *RegistrationInvitationFilter) WhereUpdateAt(p entql.Uint32P) {
	f.Where(p.Field(registrationinvitation.FieldUpdateAt))
}

// WhereDeleteAt applies the entql uint32 predicate on the delete_at field.
func (f *RegistrationInvitationFilter) WhereDeleteAt(p entql.Uint32P) {
	f.Where(p.Field(registrationinvitation.FieldDeleteAt))
}

// WhereInviterID applies the entql [16]byte predicate on the inviter_id field.
func (f *RegistrationInvitationFilter) WhereInviterID(p entql.ValueP) {
	f.Where(p.Field(registrationinvitation.FieldInviterID))
}

// WhereInviteeID applies the entql [16]byte predicate on the invitee_id field.
func (f *RegistrationInvitationFilter) WhereInviteeID(p entql.ValueP) {
	f.Where(p.Field(registrationinvitation.FieldInviteeID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *RegistrationInvitationFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(registrationinvitation.FieldAppID))
}

// addPredicate implements the predicateAdder interface.
func (uicq *UserInvitationCodeQuery) addPredicate(pred func(s *sql.Selector)) {
	uicq.predicates = append(uicq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UserInvitationCodeQuery builder.
func (uicq *UserInvitationCodeQuery) Filter() *UserInvitationCodeFilter {
	return &UserInvitationCodeFilter{uicq}
}

// addPredicate implements the predicateAdder interface.
func (m *UserInvitationCodeMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UserInvitationCodeMutation builder.
func (m *UserInvitationCodeMutation) Filter() *UserInvitationCodeFilter {
	return &UserInvitationCodeFilter{m}
}

// UserInvitationCodeFilter provides a generic filtering capability at runtime for UserInvitationCodeQuery.
type UserInvitationCodeFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *UserInvitationCodeFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[12].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *UserInvitationCodeFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(userinvitationcode.FieldID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *UserInvitationCodeFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(userinvitationcode.FieldUserID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *UserInvitationCodeFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(userinvitationcode.FieldAppID))
}

// WhereInvitationCode applies the entql string predicate on the invitation_code field.
func (f *UserInvitationCodeFilter) WhereInvitationCode(p entql.StringP) {
	f.Where(p.Field(userinvitationcode.FieldInvitationCode))
}

// WhereCreateAt applies the entql uint32 predicate on the create_at field.
func (f *UserInvitationCodeFilter) WhereCreateAt(p entql.Uint32P) {
	f.Where(p.Field(userinvitationcode.FieldCreateAt))
}

// WhereUpdateAt applies the entql uint32 predicate on the update_at field.
func (f *UserInvitationCodeFilter) WhereUpdateAt(p entql.Uint32P) {
	f.Where(p.Field(userinvitationcode.FieldUpdateAt))
}

// WhereDeleteAt applies the entql uint32 predicate on the delete_at field.
func (f *UserInvitationCodeFilter) WhereDeleteAt(p entql.Uint32P) {
	f.Where(p.Field(userinvitationcode.FieldDeleteAt))
}

// addPredicate implements the predicateAdder interface.
func (uksq *UserKpiSettingQuery) addPredicate(pred func(s *sql.Selector)) {
	uksq.predicates = append(uksq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UserKpiSettingQuery builder.
func (uksq *UserKpiSettingQuery) Filter() *UserKpiSettingFilter {
	return &UserKpiSettingFilter{uksq}
}

// addPredicate implements the predicateAdder interface.
func (m *UserKpiSettingMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UserKpiSettingMutation builder.
func (m *UserKpiSettingMutation) Filter() *UserKpiSettingFilter {
	return &UserKpiSettingFilter{m}
}

// UserKpiSettingFilter provides a generic filtering capability at runtime for UserKpiSettingQuery.
type UserKpiSettingFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *UserKpiSettingFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[13].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *UserKpiSettingFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(userkpisetting.FieldID))
}

// WhereAmount applies the entql uint64 predicate on the amount field.
func (f *UserKpiSettingFilter) WhereAmount(p entql.Uint64P) {
	f.Where(p.Field(userkpisetting.FieldAmount))
}

// WherePercent applies the entql int32 predicate on the percent field.
func (f *UserKpiSettingFilter) WherePercent(p entql.Int32P) {
	f.Where(p.Field(userkpisetting.FieldPercent))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *UserKpiSettingFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(userkpisetting.FieldAppID))
}

// WhereGoodID applies the entql [16]byte predicate on the good_id field.
func (f *UserKpiSettingFilter) WhereGoodID(p entql.ValueP) {
	f.Where(p.Field(userkpisetting.FieldGoodID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *UserKpiSettingFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(userkpisetting.FieldUserID))
}

// WhereCreateAt applies the entql uint32 predicate on the create_at field.
func (f *UserKpiSettingFilter) WhereCreateAt(p entql.Uint32P) {
	f.Where(p.Field(userkpisetting.FieldCreateAt))
}

// WhereUpdateAt applies the entql uint32 predicate on the update_at field.
func (f *UserKpiSettingFilter) WhereUpdateAt(p entql.Uint32P) {
	f.Where(p.Field(userkpisetting.FieldUpdateAt))
}

// WhereDeleteAt applies the entql uint32 predicate on the delete_at field.
func (f *UserKpiSettingFilter) WhereDeleteAt(p entql.Uint32P) {
	f.Where(p.Field(userkpisetting.FieldDeleteAt))
}

// addPredicate implements the predicateAdder interface.
func (usrq *UserSpecialReductionQuery) addPredicate(pred func(s *sql.Selector)) {
	usrq.predicates = append(usrq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UserSpecialReductionQuery builder.
func (usrq *UserSpecialReductionQuery) Filter() *UserSpecialReductionFilter {
	return &UserSpecialReductionFilter{usrq}
}

// addPredicate implements the predicateAdder interface.
func (m *UserSpecialReductionMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UserSpecialReductionMutation builder.
func (m *UserSpecialReductionMutation) Filter() *UserSpecialReductionFilter {
	return &UserSpecialReductionFilter{m}
}

// UserSpecialReductionFilter provides a generic filtering capability at runtime for UserSpecialReductionQuery.
type UserSpecialReductionFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *UserSpecialReductionFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[14].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *UserSpecialReductionFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(userspecialreduction.FieldID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *UserSpecialReductionFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(userspecialreduction.FieldAppID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *UserSpecialReductionFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(userspecialreduction.FieldUserID))
}

// WhereAmount applies the entql uint64 predicate on the amount field.
func (f *UserSpecialReductionFilter) WhereAmount(p entql.Uint64P) {
	f.Where(p.Field(userspecialreduction.FieldAmount))
}

// WhereReleaseByUserID applies the entql [16]byte predicate on the release_by_user_id field.
func (f *UserSpecialReductionFilter) WhereReleaseByUserID(p entql.ValueP) {
	f.Where(p.Field(userspecialreduction.FieldReleaseByUserID))
}

// WhereStart applies the entql uint32 predicate on the start field.
func (f *UserSpecialReductionFilter) WhereStart(p entql.Uint32P) {
	f.Where(p.Field(userspecialreduction.FieldStart))
}

// WhereDurationDays applies the entql int32 predicate on the duration_days field.
func (f *UserSpecialReductionFilter) WhereDurationDays(p entql.Int32P) {
	f.Where(p.Field(userspecialreduction.FieldDurationDays))
}

// WhereMessage applies the entql string predicate on the message field.
func (f *UserSpecialReductionFilter) WhereMessage(p entql.StringP) {
	f.Where(p.Field(userspecialreduction.FieldMessage))
}

// WhereCreateAt applies the entql uint32 predicate on the create_at field.
func (f *UserSpecialReductionFilter) WhereCreateAt(p entql.Uint32P) {
	f.Where(p.Field(userspecialreduction.FieldCreateAt))
}

// WhereUpdateAt applies the entql uint32 predicate on the update_at field.
func (f *UserSpecialReductionFilter) WhereUpdateAt(p entql.Uint32P) {
	f.Where(p.Field(userspecialreduction.FieldUpdateAt))
}

// WhereDeleteAt applies the entql uint32 predicate on the delete_at field.
func (f *UserSpecialReductionFilter) WhereDeleteAt(p entql.Uint32P) {
	f.Where(p.Field(userspecialreduction.FieldDeleteAt))
}
