// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/predicate"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/userinvitationcode"
	"github.com/google/uuid"
)

// UserInvitationCodeUpdate is the builder for updating UserInvitationCode entities.
type UserInvitationCodeUpdate struct {
	config
	hooks    []Hook
	mutation *UserInvitationCodeMutation
}

// Where appends a list predicates to the UserInvitationCodeUpdate builder.
func (uicu *UserInvitationCodeUpdate) Where(ps ...predicate.UserInvitationCode) *UserInvitationCodeUpdate {
	uicu.mutation.Where(ps...)
	return uicu
}

// SetUserID sets the "user_id" field.
func (uicu *UserInvitationCodeUpdate) SetUserID(u uuid.UUID) *UserInvitationCodeUpdate {
	uicu.mutation.SetUserID(u)
	return uicu
}

// SetAppID sets the "app_id" field.
func (uicu *UserInvitationCodeUpdate) SetAppID(u uuid.UUID) *UserInvitationCodeUpdate {
	uicu.mutation.SetAppID(u)
	return uicu
}

// SetInvitationCode sets the "invitation_code" field.
func (uicu *UserInvitationCodeUpdate) SetInvitationCode(s string) *UserInvitationCodeUpdate {
	uicu.mutation.SetInvitationCode(s)
	return uicu
}

// SetConfirmed sets the "confirmed" field.
func (uicu *UserInvitationCodeUpdate) SetConfirmed(b bool) *UserInvitationCodeUpdate {
	uicu.mutation.SetConfirmed(b)
	return uicu
}

// SetNillableConfirmed sets the "confirmed" field if the given value is not nil.
func (uicu *UserInvitationCodeUpdate) SetNillableConfirmed(b *bool) *UserInvitationCodeUpdate {
	if b != nil {
		uicu.SetConfirmed(*b)
	}
	return uicu
}

// SetCreateAt sets the "create_at" field.
func (uicu *UserInvitationCodeUpdate) SetCreateAt(u uint32) *UserInvitationCodeUpdate {
	uicu.mutation.ResetCreateAt()
	uicu.mutation.SetCreateAt(u)
	return uicu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (uicu *UserInvitationCodeUpdate) SetNillableCreateAt(u *uint32) *UserInvitationCodeUpdate {
	if u != nil {
		uicu.SetCreateAt(*u)
	}
	return uicu
}

// AddCreateAt adds u to the "create_at" field.
func (uicu *UserInvitationCodeUpdate) AddCreateAt(u int32) *UserInvitationCodeUpdate {
	uicu.mutation.AddCreateAt(u)
	return uicu
}

// SetUpdateAt sets the "update_at" field.
func (uicu *UserInvitationCodeUpdate) SetUpdateAt(u uint32) *UserInvitationCodeUpdate {
	uicu.mutation.ResetUpdateAt()
	uicu.mutation.SetUpdateAt(u)
	return uicu
}

// AddUpdateAt adds u to the "update_at" field.
func (uicu *UserInvitationCodeUpdate) AddUpdateAt(u int32) *UserInvitationCodeUpdate {
	uicu.mutation.AddUpdateAt(u)
	return uicu
}

// SetDeleteAt sets the "delete_at" field.
func (uicu *UserInvitationCodeUpdate) SetDeleteAt(u uint32) *UserInvitationCodeUpdate {
	uicu.mutation.ResetDeleteAt()
	uicu.mutation.SetDeleteAt(u)
	return uicu
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (uicu *UserInvitationCodeUpdate) SetNillableDeleteAt(u *uint32) *UserInvitationCodeUpdate {
	if u != nil {
		uicu.SetDeleteAt(*u)
	}
	return uicu
}

// AddDeleteAt adds u to the "delete_at" field.
func (uicu *UserInvitationCodeUpdate) AddDeleteAt(u int32) *UserInvitationCodeUpdate {
	uicu.mutation.AddDeleteAt(u)
	return uicu
}

// Mutation returns the UserInvitationCodeMutation object of the builder.
func (uicu *UserInvitationCodeUpdate) Mutation() *UserInvitationCodeMutation {
	return uicu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uicu *UserInvitationCodeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	uicu.defaults()
	if len(uicu.hooks) == 0 {
		affected, err = uicu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserInvitationCodeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uicu.mutation = mutation
			affected, err = uicu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(uicu.hooks) - 1; i >= 0; i-- {
			if uicu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uicu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uicu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (uicu *UserInvitationCodeUpdate) SaveX(ctx context.Context) int {
	affected, err := uicu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uicu *UserInvitationCodeUpdate) Exec(ctx context.Context) error {
	_, err := uicu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uicu *UserInvitationCodeUpdate) ExecX(ctx context.Context) {
	if err := uicu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uicu *UserInvitationCodeUpdate) defaults() {
	if _, ok := uicu.mutation.UpdateAt(); !ok {
		v := userinvitationcode.UpdateDefaultUpdateAt()
		uicu.mutation.SetUpdateAt(v)
	}
}

func (uicu *UserInvitationCodeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userinvitationcode.Table,
			Columns: userinvitationcode.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: userinvitationcode.FieldID,
			},
		},
	}
	if ps := uicu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uicu.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: userinvitationcode.FieldUserID,
		})
	}
	if value, ok := uicu.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: userinvitationcode.FieldAppID,
		})
	}
	if value, ok := uicu.mutation.InvitationCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userinvitationcode.FieldInvitationCode,
		})
	}
	if value, ok := uicu.mutation.Confirmed(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: userinvitationcode.FieldConfirmed,
		})
	}
	if value, ok := uicu.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userinvitationcode.FieldCreateAt,
		})
	}
	if value, ok := uicu.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userinvitationcode.FieldCreateAt,
		})
	}
	if value, ok := uicu.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userinvitationcode.FieldUpdateAt,
		})
	}
	if value, ok := uicu.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userinvitationcode.FieldUpdateAt,
		})
	}
	if value, ok := uicu.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userinvitationcode.FieldDeleteAt,
		})
	}
	if value, ok := uicu.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userinvitationcode.FieldDeleteAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uicu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userinvitationcode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// UserInvitationCodeUpdateOne is the builder for updating a single UserInvitationCode entity.
type UserInvitationCodeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserInvitationCodeMutation
}

// SetUserID sets the "user_id" field.
func (uicuo *UserInvitationCodeUpdateOne) SetUserID(u uuid.UUID) *UserInvitationCodeUpdateOne {
	uicuo.mutation.SetUserID(u)
	return uicuo
}

// SetAppID sets the "app_id" field.
func (uicuo *UserInvitationCodeUpdateOne) SetAppID(u uuid.UUID) *UserInvitationCodeUpdateOne {
	uicuo.mutation.SetAppID(u)
	return uicuo
}

// SetInvitationCode sets the "invitation_code" field.
func (uicuo *UserInvitationCodeUpdateOne) SetInvitationCode(s string) *UserInvitationCodeUpdateOne {
	uicuo.mutation.SetInvitationCode(s)
	return uicuo
}

// SetConfirmed sets the "confirmed" field.
func (uicuo *UserInvitationCodeUpdateOne) SetConfirmed(b bool) *UserInvitationCodeUpdateOne {
	uicuo.mutation.SetConfirmed(b)
	return uicuo
}

// SetNillableConfirmed sets the "confirmed" field if the given value is not nil.
func (uicuo *UserInvitationCodeUpdateOne) SetNillableConfirmed(b *bool) *UserInvitationCodeUpdateOne {
	if b != nil {
		uicuo.SetConfirmed(*b)
	}
	return uicuo
}

// SetCreateAt sets the "create_at" field.
func (uicuo *UserInvitationCodeUpdateOne) SetCreateAt(u uint32) *UserInvitationCodeUpdateOne {
	uicuo.mutation.ResetCreateAt()
	uicuo.mutation.SetCreateAt(u)
	return uicuo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (uicuo *UserInvitationCodeUpdateOne) SetNillableCreateAt(u *uint32) *UserInvitationCodeUpdateOne {
	if u != nil {
		uicuo.SetCreateAt(*u)
	}
	return uicuo
}

// AddCreateAt adds u to the "create_at" field.
func (uicuo *UserInvitationCodeUpdateOne) AddCreateAt(u int32) *UserInvitationCodeUpdateOne {
	uicuo.mutation.AddCreateAt(u)
	return uicuo
}

// SetUpdateAt sets the "update_at" field.
func (uicuo *UserInvitationCodeUpdateOne) SetUpdateAt(u uint32) *UserInvitationCodeUpdateOne {
	uicuo.mutation.ResetUpdateAt()
	uicuo.mutation.SetUpdateAt(u)
	return uicuo
}

// AddUpdateAt adds u to the "update_at" field.
func (uicuo *UserInvitationCodeUpdateOne) AddUpdateAt(u int32) *UserInvitationCodeUpdateOne {
	uicuo.mutation.AddUpdateAt(u)
	return uicuo
}

// SetDeleteAt sets the "delete_at" field.
func (uicuo *UserInvitationCodeUpdateOne) SetDeleteAt(u uint32) *UserInvitationCodeUpdateOne {
	uicuo.mutation.ResetDeleteAt()
	uicuo.mutation.SetDeleteAt(u)
	return uicuo
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (uicuo *UserInvitationCodeUpdateOne) SetNillableDeleteAt(u *uint32) *UserInvitationCodeUpdateOne {
	if u != nil {
		uicuo.SetDeleteAt(*u)
	}
	return uicuo
}

// AddDeleteAt adds u to the "delete_at" field.
func (uicuo *UserInvitationCodeUpdateOne) AddDeleteAt(u int32) *UserInvitationCodeUpdateOne {
	uicuo.mutation.AddDeleteAt(u)
	return uicuo
}

// Mutation returns the UserInvitationCodeMutation object of the builder.
func (uicuo *UserInvitationCodeUpdateOne) Mutation() *UserInvitationCodeMutation {
	return uicuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uicuo *UserInvitationCodeUpdateOne) Select(field string, fields ...string) *UserInvitationCodeUpdateOne {
	uicuo.fields = append([]string{field}, fields...)
	return uicuo
}

// Save executes the query and returns the updated UserInvitationCode entity.
func (uicuo *UserInvitationCodeUpdateOne) Save(ctx context.Context) (*UserInvitationCode, error) {
	var (
		err  error
		node *UserInvitationCode
	)
	uicuo.defaults()
	if len(uicuo.hooks) == 0 {
		node, err = uicuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserInvitationCodeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uicuo.mutation = mutation
			node, err = uicuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uicuo.hooks) - 1; i >= 0; i-- {
			if uicuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uicuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, uicuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*UserInvitationCode)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from UserInvitationCodeMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (uicuo *UserInvitationCodeUpdateOne) SaveX(ctx context.Context) *UserInvitationCode {
	node, err := uicuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uicuo *UserInvitationCodeUpdateOne) Exec(ctx context.Context) error {
	_, err := uicuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uicuo *UserInvitationCodeUpdateOne) ExecX(ctx context.Context) {
	if err := uicuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uicuo *UserInvitationCodeUpdateOne) defaults() {
	if _, ok := uicuo.mutation.UpdateAt(); !ok {
		v := userinvitationcode.UpdateDefaultUpdateAt()
		uicuo.mutation.SetUpdateAt(v)
	}
}

func (uicuo *UserInvitationCodeUpdateOne) sqlSave(ctx context.Context) (_node *UserInvitationCode, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userinvitationcode.Table,
			Columns: userinvitationcode.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: userinvitationcode.FieldID,
			},
		},
	}
	id, ok := uicuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserInvitationCode.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uicuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userinvitationcode.FieldID)
		for _, f := range fields {
			if !userinvitationcode.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userinvitationcode.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uicuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uicuo.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: userinvitationcode.FieldUserID,
		})
	}
	if value, ok := uicuo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: userinvitationcode.FieldAppID,
		})
	}
	if value, ok := uicuo.mutation.InvitationCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userinvitationcode.FieldInvitationCode,
		})
	}
	if value, ok := uicuo.mutation.Confirmed(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: userinvitationcode.FieldConfirmed,
		})
	}
	if value, ok := uicuo.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userinvitationcode.FieldCreateAt,
		})
	}
	if value, ok := uicuo.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userinvitationcode.FieldCreateAt,
		})
	}
	if value, ok := uicuo.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userinvitationcode.FieldUpdateAt,
		})
	}
	if value, ok := uicuo.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userinvitationcode.FieldUpdateAt,
		})
	}
	if value, ok := uicuo.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userinvitationcode.FieldDeleteAt,
		})
	}
	if value, ok := uicuo.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: userinvitationcode.FieldDeleteAt,
		})
	}
	_node = &UserInvitationCode{config: uicuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uicuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userinvitationcode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
