// Code generated by ent, DO NOT EDIT.

package privacy

import (
	"context"
	"fmt"

	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent"

	"entgo.io/ent/entql"
	"entgo.io/ent/privacy"
)

var (
	// Allow may be returned by rules to indicate that the policy
	// evaluation should terminate with allow decision.
	Allow = privacy.Allow

	// Deny may be returned by rules to indicate that the policy
	// evaluation should terminate with deny decision.
	Deny = privacy.Deny

	// Skip may be returned by rules to indicate that the policy
	// evaluation should continue to the next rule.
	Skip = privacy.Skip
)

// Allowf returns an formatted wrapped Allow decision.
func Allowf(format string, a ...interface{}) error {
	return fmt.Errorf(format+": %w", append(a, Allow)...)
}

// Denyf returns an formatted wrapped Deny decision.
func Denyf(format string, a ...interface{}) error {
	return fmt.Errorf(format+": %w", append(a, Deny)...)
}

// Skipf returns an formatted wrapped Skip decision.
func Skipf(format string, a ...interface{}) error {
	return fmt.Errorf(format+": %w", append(a, Skip)...)
}

// DecisionContext creates a new context from the given parent context with
// a policy decision attach to it.
func DecisionContext(parent context.Context, decision error) context.Context {
	return privacy.DecisionContext(parent, decision)
}

// DecisionFromContext retrieves the policy decision from the context.
func DecisionFromContext(ctx context.Context) (error, bool) {
	return privacy.DecisionFromContext(ctx)
}

type (
	// Policy groups query and mutation policies.
	Policy = privacy.Policy

	// QueryRule defines the interface deciding whether a
	// query is allowed and optionally modify it.
	QueryRule = privacy.QueryRule
	// QueryPolicy combines multiple query rules into a single policy.
	QueryPolicy = privacy.QueryPolicy

	// MutationRule defines the interface which decides whether a
	// mutation is allowed and optionally modifies it.
	MutationRule = privacy.MutationRule
	// MutationPolicy combines multiple mutation rules into a single policy.
	MutationPolicy = privacy.MutationPolicy
)

// QueryRuleFunc type is an adapter to allow the use of
// ordinary functions as query rules.
type QueryRuleFunc func(context.Context, ent.Query) error

// Eval returns f(ctx, q).
func (f QueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	return f(ctx, q)
}

// MutationRuleFunc type is an adapter which allows the use of
// ordinary functions as mutation rules.
type MutationRuleFunc func(context.Context, ent.Mutation) error

// EvalMutation returns f(ctx, m).
func (f MutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	return f(ctx, m)
}

// QueryMutationRule is an interface which groups query and mutation rules.
type QueryMutationRule interface {
	QueryRule
	MutationRule
}

// AlwaysAllowRule returns a rule that returns an allow decision.
func AlwaysAllowRule() QueryMutationRule {
	return fixedDecision{Allow}
}

// AlwaysDenyRule returns a rule that returns a deny decision.
func AlwaysDenyRule() QueryMutationRule {
	return fixedDecision{Deny}
}

type fixedDecision struct {
	decision error
}

func (f fixedDecision) EvalQuery(context.Context, ent.Query) error {
	return f.decision
}

func (f fixedDecision) EvalMutation(context.Context, ent.Mutation) error {
	return f.decision
}

type contextDecision struct {
	eval func(context.Context) error
}

// ContextQueryMutationRule creates a query/mutation rule from a context eval func.
func ContextQueryMutationRule(eval func(context.Context) error) QueryMutationRule {
	return contextDecision{eval}
}

func (c contextDecision) EvalQuery(ctx context.Context, _ ent.Query) error {
	return c.eval(ctx)
}

func (c contextDecision) EvalMutation(ctx context.Context, _ ent.Mutation) error {
	return c.eval(ctx)
}

// OnMutationOperation evaluates the given rule only on a given mutation operation.
func OnMutationOperation(rule MutationRule, op ent.Op) MutationRule {
	return MutationRuleFunc(func(ctx context.Context, m ent.Mutation) error {
		if m.Op().Is(op) {
			return rule.EvalMutation(ctx, m)
		}
		return Skip
	})
}

// DenyMutationOperationRule returns a rule denying specified mutation operation.
func DenyMutationOperationRule(op ent.Op) MutationRule {
	rule := MutationRuleFunc(func(_ context.Context, m ent.Mutation) error {
		return Denyf("ent/privacy: operation %s is not allowed", m.Op())
	})
	return OnMutationOperation(rule, op)
}

// The ActivityQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ActivityQueryRuleFunc func(context.Context, *ent.ActivityQuery) error

// EvalQuery return f(ctx, q).
func (f ActivityQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ActivityQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ActivityQuery", q)
}

// The ActivityMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ActivityMutationRuleFunc func(context.Context, *ent.ActivityMutation) error

// EvalMutation calls f(ctx, m).
func (f ActivityMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ActivityMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ActivityMutation", m)
}

// The AppCommissionSettingQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AppCommissionSettingQueryRuleFunc func(context.Context, *ent.AppCommissionSettingQuery) error

// EvalQuery return f(ctx, q).
func (f AppCommissionSettingQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AppCommissionSettingQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.AppCommissionSettingQuery", q)
}

// The AppCommissionSettingMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AppCommissionSettingMutationRuleFunc func(context.Context, *ent.AppCommissionSettingMutation) error

// EvalMutation calls f(ctx, m).
func (f AppCommissionSettingMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.AppCommissionSettingMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.AppCommissionSettingMutation", m)
}

// The AppCouponSettingQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AppCouponSettingQueryRuleFunc func(context.Context, *ent.AppCouponSettingQuery) error

// EvalQuery return f(ctx, q).
func (f AppCouponSettingQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AppCouponSettingQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.AppCouponSettingQuery", q)
}

// The AppCouponSettingMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AppCouponSettingMutationRuleFunc func(context.Context, *ent.AppCouponSettingMutation) error

// EvalMutation calls f(ctx, m).
func (f AppCouponSettingMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.AppCouponSettingMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.AppCouponSettingMutation", m)
}

// The AppInvitationSettingQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AppInvitationSettingQueryRuleFunc func(context.Context, *ent.AppInvitationSettingQuery) error

// EvalQuery return f(ctx, q).
func (f AppInvitationSettingQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AppInvitationSettingQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.AppInvitationSettingQuery", q)
}

// The AppInvitationSettingMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AppInvitationSettingMutationRuleFunc func(context.Context, *ent.AppInvitationSettingMutation) error

// EvalMutation calls f(ctx, m).
func (f AppInvitationSettingMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.AppInvitationSettingMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.AppInvitationSettingMutation", m)
}

// The AppPurchaseAmountSettingQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AppPurchaseAmountSettingQueryRuleFunc func(context.Context, *ent.AppPurchaseAmountSettingQuery) error

// EvalQuery return f(ctx, q).
func (f AppPurchaseAmountSettingQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AppPurchaseAmountSettingQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.AppPurchaseAmountSettingQuery", q)
}

// The AppPurchaseAmountSettingMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AppPurchaseAmountSettingMutationRuleFunc func(context.Context, *ent.AppPurchaseAmountSettingMutation) error

// EvalMutation calls f(ctx, m).
func (f AppPurchaseAmountSettingMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.AppPurchaseAmountSettingMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.AppPurchaseAmountSettingMutation", m)
}

// The CommissionCoinSettingQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CommissionCoinSettingQueryRuleFunc func(context.Context, *ent.CommissionCoinSettingQuery) error

// EvalQuery return f(ctx, q).
func (f CommissionCoinSettingQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CommissionCoinSettingQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.CommissionCoinSettingQuery", q)
}

// The CommissionCoinSettingMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CommissionCoinSettingMutationRuleFunc func(context.Context, *ent.CommissionCoinSettingMutation) error

// EvalMutation calls f(ctx, m).
func (f CommissionCoinSettingMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.CommissionCoinSettingMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.CommissionCoinSettingMutation", m)
}

// The CouponAllocatedQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CouponAllocatedQueryRuleFunc func(context.Context, *ent.CouponAllocatedQuery) error

// EvalQuery return f(ctx, q).
func (f CouponAllocatedQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CouponAllocatedQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.CouponAllocatedQuery", q)
}

// The CouponAllocatedMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CouponAllocatedMutationRuleFunc func(context.Context, *ent.CouponAllocatedMutation) error

// EvalMutation calls f(ctx, m).
func (f CouponAllocatedMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.CouponAllocatedMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.CouponAllocatedMutation", m)
}

// The CouponPoolQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CouponPoolQueryRuleFunc func(context.Context, *ent.CouponPoolQuery) error

// EvalQuery return f(ctx, q).
func (f CouponPoolQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CouponPoolQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.CouponPoolQuery", q)
}

// The CouponPoolMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CouponPoolMutationRuleFunc func(context.Context, *ent.CouponPoolMutation) error

// EvalMutation calls f(ctx, m).
func (f CouponPoolMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.CouponPoolMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.CouponPoolMutation", m)
}

// The DefaultKpiSettingQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type DefaultKpiSettingQueryRuleFunc func(context.Context, *ent.DefaultKpiSettingQuery) error

// EvalQuery return f(ctx, q).
func (f DefaultKpiSettingQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.DefaultKpiSettingQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.DefaultKpiSettingQuery", q)
}

// The DefaultKpiSettingMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type DefaultKpiSettingMutationRuleFunc func(context.Context, *ent.DefaultKpiSettingMutation) error

// EvalMutation calls f(ctx, m).
func (f DefaultKpiSettingMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.DefaultKpiSettingMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.DefaultKpiSettingMutation", m)
}

// The DiscountPoolQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type DiscountPoolQueryRuleFunc func(context.Context, *ent.DiscountPoolQuery) error

// EvalQuery return f(ctx, q).
func (f DiscountPoolQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.DiscountPoolQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.DiscountPoolQuery", q)
}

// The DiscountPoolMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type DiscountPoolMutationRuleFunc func(context.Context, *ent.DiscountPoolMutation) error

// EvalMutation calls f(ctx, m).
func (f DiscountPoolMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.DiscountPoolMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.DiscountPoolMutation", m)
}

// The EventCouponQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type EventCouponQueryRuleFunc func(context.Context, *ent.EventCouponQuery) error

// EvalQuery return f(ctx, q).
func (f EventCouponQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.EventCouponQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.EventCouponQuery", q)
}

// The EventCouponMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type EventCouponMutationRuleFunc func(context.Context, *ent.EventCouponMutation) error

// EvalMutation calls f(ctx, m).
func (f EventCouponMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.EventCouponMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.EventCouponMutation", m)
}

// The RegistrationInvitationQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type RegistrationInvitationQueryRuleFunc func(context.Context, *ent.RegistrationInvitationQuery) error

// EvalQuery return f(ctx, q).
func (f RegistrationInvitationQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.RegistrationInvitationQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.RegistrationInvitationQuery", q)
}

// The RegistrationInvitationMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type RegistrationInvitationMutationRuleFunc func(context.Context, *ent.RegistrationInvitationMutation) error

// EvalMutation calls f(ctx, m).
func (f RegistrationInvitationMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.RegistrationInvitationMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.RegistrationInvitationMutation", m)
}

// The UserInvitationCodeQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type UserInvitationCodeQueryRuleFunc func(context.Context, *ent.UserInvitationCodeQuery) error

// EvalQuery return f(ctx, q).
func (f UserInvitationCodeQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UserInvitationCodeQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.UserInvitationCodeQuery", q)
}

// The UserInvitationCodeMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type UserInvitationCodeMutationRuleFunc func(context.Context, *ent.UserInvitationCodeMutation) error

// EvalMutation calls f(ctx, m).
func (f UserInvitationCodeMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.UserInvitationCodeMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.UserInvitationCodeMutation", m)
}

// The UserKpiSettingQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type UserKpiSettingQueryRuleFunc func(context.Context, *ent.UserKpiSettingQuery) error

// EvalQuery return f(ctx, q).
func (f UserKpiSettingQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UserKpiSettingQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.UserKpiSettingQuery", q)
}

// The UserKpiSettingMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type UserKpiSettingMutationRuleFunc func(context.Context, *ent.UserKpiSettingMutation) error

// EvalMutation calls f(ctx, m).
func (f UserKpiSettingMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.UserKpiSettingMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.UserKpiSettingMutation", m)
}

// The UserSpecialReductionQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type UserSpecialReductionQueryRuleFunc func(context.Context, *ent.UserSpecialReductionQuery) error

// EvalQuery return f(ctx, q).
func (f UserSpecialReductionQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UserSpecialReductionQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.UserSpecialReductionQuery", q)
}

// The UserSpecialReductionMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type UserSpecialReductionMutationRuleFunc func(context.Context, *ent.UserSpecialReductionMutation) error

// EvalMutation calls f(ctx, m).
func (f UserSpecialReductionMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.UserSpecialReductionMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.UserSpecialReductionMutation", m)
}

type (
	// Filter is the interface that wraps the Where function
	// for filtering nodes in queries and mutations.
	Filter interface {
		// Where applies a filter on the executed query/mutation.
		Where(entql.P)
	}

	// The FilterFunc type is an adapter that allows the use of ordinary
	// functions as filters for query and mutation types.
	FilterFunc func(context.Context, Filter) error
)

// EvalQuery calls f(ctx, q) if the query implements the Filter interface, otherwise it is denied.
func (f FilterFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	fr, err := queryFilter(q)
	if err != nil {
		return err
	}
	return f(ctx, fr)
}

// EvalMutation calls f(ctx, q) if the mutation implements the Filter interface, otherwise it is denied.
func (f FilterFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	fr, err := mutationFilter(m)
	if err != nil {
		return err
	}
	return f(ctx, fr)
}

var _ QueryMutationRule = FilterFunc(nil)

func queryFilter(q ent.Query) (Filter, error) {
	switch q := q.(type) {
	case *ent.ActivityQuery:
		return q.Filter(), nil
	case *ent.AppCommissionSettingQuery:
		return q.Filter(), nil
	case *ent.AppCouponSettingQuery:
		return q.Filter(), nil
	case *ent.AppInvitationSettingQuery:
		return q.Filter(), nil
	case *ent.AppPurchaseAmountSettingQuery:
		return q.Filter(), nil
	case *ent.CommissionCoinSettingQuery:
		return q.Filter(), nil
	case *ent.CouponAllocatedQuery:
		return q.Filter(), nil
	case *ent.CouponPoolQuery:
		return q.Filter(), nil
	case *ent.DefaultKpiSettingQuery:
		return q.Filter(), nil
	case *ent.DiscountPoolQuery:
		return q.Filter(), nil
	case *ent.EventCouponQuery:
		return q.Filter(), nil
	case *ent.RegistrationInvitationQuery:
		return q.Filter(), nil
	case *ent.UserInvitationCodeQuery:
		return q.Filter(), nil
	case *ent.UserKpiSettingQuery:
		return q.Filter(), nil
	case *ent.UserSpecialReductionQuery:
		return q.Filter(), nil
	default:
		return nil, Denyf("ent/privacy: unexpected query type %T for query filter", q)
	}
}

func mutationFilter(m ent.Mutation) (Filter, error) {
	switch m := m.(type) {
	case *ent.ActivityMutation:
		return m.Filter(), nil
	case *ent.AppCommissionSettingMutation:
		return m.Filter(), nil
	case *ent.AppCouponSettingMutation:
		return m.Filter(), nil
	case *ent.AppInvitationSettingMutation:
		return m.Filter(), nil
	case *ent.AppPurchaseAmountSettingMutation:
		return m.Filter(), nil
	case *ent.CommissionCoinSettingMutation:
		return m.Filter(), nil
	case *ent.CouponAllocatedMutation:
		return m.Filter(), nil
	case *ent.CouponPoolMutation:
		return m.Filter(), nil
	case *ent.DefaultKpiSettingMutation:
		return m.Filter(), nil
	case *ent.DiscountPoolMutation:
		return m.Filter(), nil
	case *ent.EventCouponMutation:
		return m.Filter(), nil
	case *ent.RegistrationInvitationMutation:
		return m.Filter(), nil
	case *ent.UserInvitationCodeMutation:
		return m.Filter(), nil
	case *ent.UserKpiSettingMutation:
		return m.Filter(), nil
	case *ent.UserSpecialReductionMutation:
		return m.Filter(), nil
	default:
		return nil, Denyf("ent/privacy: unexpected mutation type %T for mutation filter", m)
	}
}
