// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/eventcoupon"
	"github.com/google/uuid"
)

// EventCouponCreate is the builder for creating a EventCoupon entity.
type EventCouponCreate struct {
	config
	mutation *EventCouponMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetAppID sets the "app_id" field.
func (ecc *EventCouponCreate) SetAppID(u uuid.UUID) *EventCouponCreate {
	ecc.mutation.SetAppID(u)
	return ecc
}

// SetActivityID sets the "activity_id" field.
func (ecc *EventCouponCreate) SetActivityID(u uuid.UUID) *EventCouponCreate {
	ecc.mutation.SetActivityID(u)
	return ecc
}

// SetType sets the "type" field.
func (ecc *EventCouponCreate) SetType(s string) *EventCouponCreate {
	ecc.mutation.SetType(s)
	return ecc
}

// SetCouponID sets the "coupon_id" field.
func (ecc *EventCouponCreate) SetCouponID(u uuid.UUID) *EventCouponCreate {
	ecc.mutation.SetCouponID(u)
	return ecc
}

// SetEvent sets the "event" field.
func (ecc *EventCouponCreate) SetEvent(s string) *EventCouponCreate {
	ecc.mutation.SetEvent(s)
	return ecc
}

// SetCreateAt sets the "create_at" field.
func (ecc *EventCouponCreate) SetCreateAt(u uint32) *EventCouponCreate {
	ecc.mutation.SetCreateAt(u)
	return ecc
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (ecc *EventCouponCreate) SetNillableCreateAt(u *uint32) *EventCouponCreate {
	if u != nil {
		ecc.SetCreateAt(*u)
	}
	return ecc
}

// SetUpdateAt sets the "update_at" field.
func (ecc *EventCouponCreate) SetUpdateAt(u uint32) *EventCouponCreate {
	ecc.mutation.SetUpdateAt(u)
	return ecc
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (ecc *EventCouponCreate) SetNillableUpdateAt(u *uint32) *EventCouponCreate {
	if u != nil {
		ecc.SetUpdateAt(*u)
	}
	return ecc
}

// SetDeleteAt sets the "delete_at" field.
func (ecc *EventCouponCreate) SetDeleteAt(u uint32) *EventCouponCreate {
	ecc.mutation.SetDeleteAt(u)
	return ecc
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (ecc *EventCouponCreate) SetNillableDeleteAt(u *uint32) *EventCouponCreate {
	if u != nil {
		ecc.SetDeleteAt(*u)
	}
	return ecc
}

// SetID sets the "id" field.
func (ecc *EventCouponCreate) SetID(u uuid.UUID) *EventCouponCreate {
	ecc.mutation.SetID(u)
	return ecc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ecc *EventCouponCreate) SetNillableID(u *uuid.UUID) *EventCouponCreate {
	if u != nil {
		ecc.SetID(*u)
	}
	return ecc
}

// Mutation returns the EventCouponMutation object of the builder.
func (ecc *EventCouponCreate) Mutation() *EventCouponMutation {
	return ecc.mutation
}

// Save creates the EventCoupon in the database.
func (ecc *EventCouponCreate) Save(ctx context.Context) (*EventCoupon, error) {
	var (
		err  error
		node *EventCoupon
	)
	ecc.defaults()
	if len(ecc.hooks) == 0 {
		if err = ecc.check(); err != nil {
			return nil, err
		}
		node, err = ecc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EventCouponMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ecc.check(); err != nil {
				return nil, err
			}
			ecc.mutation = mutation
			if node, err = ecc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ecc.hooks) - 1; i >= 0; i-- {
			if ecc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ecc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ecc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ecc *EventCouponCreate) SaveX(ctx context.Context) *EventCoupon {
	v, err := ecc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecc *EventCouponCreate) Exec(ctx context.Context) error {
	_, err := ecc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecc *EventCouponCreate) ExecX(ctx context.Context) {
	if err := ecc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ecc *EventCouponCreate) defaults() {
	if _, ok := ecc.mutation.CreateAt(); !ok {
		v := eventcoupon.DefaultCreateAt()
		ecc.mutation.SetCreateAt(v)
	}
	if _, ok := ecc.mutation.UpdateAt(); !ok {
		v := eventcoupon.DefaultUpdateAt()
		ecc.mutation.SetUpdateAt(v)
	}
	if _, ok := ecc.mutation.DeleteAt(); !ok {
		v := eventcoupon.DefaultDeleteAt()
		ecc.mutation.SetDeleteAt(v)
	}
	if _, ok := ecc.mutation.ID(); !ok {
		v := eventcoupon.DefaultID()
		ecc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ecc *EventCouponCreate) check() error {
	if _, ok := ecc.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`ent: missing required field "EventCoupon.app_id"`)}
	}
	if _, ok := ecc.mutation.ActivityID(); !ok {
		return &ValidationError{Name: "activity_id", err: errors.New(`ent: missing required field "EventCoupon.activity_id"`)}
	}
	if _, ok := ecc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "EventCoupon.type"`)}
	}
	if _, ok := ecc.mutation.CouponID(); !ok {
		return &ValidationError{Name: "coupon_id", err: errors.New(`ent: missing required field "EventCoupon.coupon_id"`)}
	}
	if _, ok := ecc.mutation.Event(); !ok {
		return &ValidationError{Name: "event", err: errors.New(`ent: missing required field "EventCoupon.event"`)}
	}
	if v, ok := ecc.mutation.Event(); ok {
		if err := eventcoupon.EventValidator(v); err != nil {
			return &ValidationError{Name: "event", err: fmt.Errorf(`ent: validator failed for field "EventCoupon.event": %w`, err)}
		}
	}
	if _, ok := ecc.mutation.CreateAt(); !ok {
		return &ValidationError{Name: "create_at", err: errors.New(`ent: missing required field "EventCoupon.create_at"`)}
	}
	if _, ok := ecc.mutation.UpdateAt(); !ok {
		return &ValidationError{Name: "update_at", err: errors.New(`ent: missing required field "EventCoupon.update_at"`)}
	}
	if _, ok := ecc.mutation.DeleteAt(); !ok {
		return &ValidationError{Name: "delete_at", err: errors.New(`ent: missing required field "EventCoupon.delete_at"`)}
	}
	return nil
}

func (ecc *EventCouponCreate) sqlSave(ctx context.Context) (*EventCoupon, error) {
	_node, _spec := ecc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ecc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (ecc *EventCouponCreate) createSpec() (*EventCoupon, *sqlgraph.CreateSpec) {
	var (
		_node = &EventCoupon{config: ecc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: eventcoupon.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: eventcoupon.FieldID,
			},
		}
	)
	_spec.OnConflict = ecc.conflict
	if id, ok := ecc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ecc.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: eventcoupon.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := ecc.mutation.ActivityID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: eventcoupon.FieldActivityID,
		})
		_node.ActivityID = value
	}
	if value, ok := ecc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: eventcoupon.FieldType,
		})
		_node.Type = value
	}
	if value, ok := ecc.mutation.CouponID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: eventcoupon.FieldCouponID,
		})
		_node.CouponID = value
	}
	if value, ok := ecc.mutation.Event(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: eventcoupon.FieldEvent,
		})
		_node.Event = value
	}
	if value, ok := ecc.mutation.CreateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: eventcoupon.FieldCreateAt,
		})
		_node.CreateAt = value
	}
	if value, ok := ecc.mutation.UpdateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: eventcoupon.FieldUpdateAt,
		})
		_node.UpdateAt = value
	}
	if value, ok := ecc.mutation.DeleteAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: eventcoupon.FieldDeleteAt,
		})
		_node.DeleteAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.EventCoupon.Create().
//		SetAppID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EventCouponUpsert) {
//			SetAppID(v+v).
//		}).
//		Exec(ctx)
//
func (ecc *EventCouponCreate) OnConflict(opts ...sql.ConflictOption) *EventCouponUpsertOne {
	ecc.conflict = opts
	return &EventCouponUpsertOne{
		create: ecc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.EventCoupon.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (ecc *EventCouponCreate) OnConflictColumns(columns ...string) *EventCouponUpsertOne {
	ecc.conflict = append(ecc.conflict, sql.ConflictColumns(columns...))
	return &EventCouponUpsertOne{
		create: ecc,
	}
}

type (
	// EventCouponUpsertOne is the builder for "upsert"-ing
	//  one EventCoupon node.
	EventCouponUpsertOne struct {
		create *EventCouponCreate
	}

	// EventCouponUpsert is the "OnConflict" setter.
	EventCouponUpsert struct {
		*sql.UpdateSet
	}
)

// SetAppID sets the "app_id" field.
func (u *EventCouponUpsert) SetAppID(v uuid.UUID) *EventCouponUpsert {
	u.Set(eventcoupon.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *EventCouponUpsert) UpdateAppID() *EventCouponUpsert {
	u.SetExcluded(eventcoupon.FieldAppID)
	return u
}

// SetActivityID sets the "activity_id" field.
func (u *EventCouponUpsert) SetActivityID(v uuid.UUID) *EventCouponUpsert {
	u.Set(eventcoupon.FieldActivityID, v)
	return u
}

// UpdateActivityID sets the "activity_id" field to the value that was provided on create.
func (u *EventCouponUpsert) UpdateActivityID() *EventCouponUpsert {
	u.SetExcluded(eventcoupon.FieldActivityID)
	return u
}

// SetType sets the "type" field.
func (u *EventCouponUpsert) SetType(v string) *EventCouponUpsert {
	u.Set(eventcoupon.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *EventCouponUpsert) UpdateType() *EventCouponUpsert {
	u.SetExcluded(eventcoupon.FieldType)
	return u
}

// SetCouponID sets the "coupon_id" field.
func (u *EventCouponUpsert) SetCouponID(v uuid.UUID) *EventCouponUpsert {
	u.Set(eventcoupon.FieldCouponID, v)
	return u
}

// UpdateCouponID sets the "coupon_id" field to the value that was provided on create.
func (u *EventCouponUpsert) UpdateCouponID() *EventCouponUpsert {
	u.SetExcluded(eventcoupon.FieldCouponID)
	return u
}

// SetEvent sets the "event" field.
func (u *EventCouponUpsert) SetEvent(v string) *EventCouponUpsert {
	u.Set(eventcoupon.FieldEvent, v)
	return u
}

// UpdateEvent sets the "event" field to the value that was provided on create.
func (u *EventCouponUpsert) UpdateEvent() *EventCouponUpsert {
	u.SetExcluded(eventcoupon.FieldEvent)
	return u
}

// SetCreateAt sets the "create_at" field.
func (u *EventCouponUpsert) SetCreateAt(v uint32) *EventCouponUpsert {
	u.Set(eventcoupon.FieldCreateAt, v)
	return u
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *EventCouponUpsert) UpdateCreateAt() *EventCouponUpsert {
	u.SetExcluded(eventcoupon.FieldCreateAt)
	return u
}

// AddCreateAt adds v to the "create_at" field.
func (u *EventCouponUpsert) AddCreateAt(v uint32) *EventCouponUpsert {
	u.Add(eventcoupon.FieldCreateAt, v)
	return u
}

// SetUpdateAt sets the "update_at" field.
func (u *EventCouponUpsert) SetUpdateAt(v uint32) *EventCouponUpsert {
	u.Set(eventcoupon.FieldUpdateAt, v)
	return u
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *EventCouponUpsert) UpdateUpdateAt() *EventCouponUpsert {
	u.SetExcluded(eventcoupon.FieldUpdateAt)
	return u
}

// AddUpdateAt adds v to the "update_at" field.
func (u *EventCouponUpsert) AddUpdateAt(v uint32) *EventCouponUpsert {
	u.Add(eventcoupon.FieldUpdateAt, v)
	return u
}

// SetDeleteAt sets the "delete_at" field.
func (u *EventCouponUpsert) SetDeleteAt(v uint32) *EventCouponUpsert {
	u.Set(eventcoupon.FieldDeleteAt, v)
	return u
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *EventCouponUpsert) UpdateDeleteAt() *EventCouponUpsert {
	u.SetExcluded(eventcoupon.FieldDeleteAt)
	return u
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *EventCouponUpsert) AddDeleteAt(v uint32) *EventCouponUpsert {
	u.Add(eventcoupon.FieldDeleteAt, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.EventCoupon.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(eventcoupon.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *EventCouponUpsertOne) UpdateNewValues() *EventCouponUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(eventcoupon.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.EventCoupon.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *EventCouponUpsertOne) Ignore() *EventCouponUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EventCouponUpsertOne) DoNothing() *EventCouponUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EventCouponCreate.OnConflict
// documentation for more info.
func (u *EventCouponUpsertOne) Update(set func(*EventCouponUpsert)) *EventCouponUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EventCouponUpsert{UpdateSet: update})
	}))
	return u
}

// SetAppID sets the "app_id" field.
func (u *EventCouponUpsertOne) SetAppID(v uuid.UUID) *EventCouponUpsertOne {
	return u.Update(func(s *EventCouponUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *EventCouponUpsertOne) UpdateAppID() *EventCouponUpsertOne {
	return u.Update(func(s *EventCouponUpsert) {
		s.UpdateAppID()
	})
}

// SetActivityID sets the "activity_id" field.
func (u *EventCouponUpsertOne) SetActivityID(v uuid.UUID) *EventCouponUpsertOne {
	return u.Update(func(s *EventCouponUpsert) {
		s.SetActivityID(v)
	})
}

// UpdateActivityID sets the "activity_id" field to the value that was provided on create.
func (u *EventCouponUpsertOne) UpdateActivityID() *EventCouponUpsertOne {
	return u.Update(func(s *EventCouponUpsert) {
		s.UpdateActivityID()
	})
}

// SetType sets the "type" field.
func (u *EventCouponUpsertOne) SetType(v string) *EventCouponUpsertOne {
	return u.Update(func(s *EventCouponUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *EventCouponUpsertOne) UpdateType() *EventCouponUpsertOne {
	return u.Update(func(s *EventCouponUpsert) {
		s.UpdateType()
	})
}

// SetCouponID sets the "coupon_id" field.
func (u *EventCouponUpsertOne) SetCouponID(v uuid.UUID) *EventCouponUpsertOne {
	return u.Update(func(s *EventCouponUpsert) {
		s.SetCouponID(v)
	})
}

// UpdateCouponID sets the "coupon_id" field to the value that was provided on create.
func (u *EventCouponUpsertOne) UpdateCouponID() *EventCouponUpsertOne {
	return u.Update(func(s *EventCouponUpsert) {
		s.UpdateCouponID()
	})
}

// SetEvent sets the "event" field.
func (u *EventCouponUpsertOne) SetEvent(v string) *EventCouponUpsertOne {
	return u.Update(func(s *EventCouponUpsert) {
		s.SetEvent(v)
	})
}

// UpdateEvent sets the "event" field to the value that was provided on create.
func (u *EventCouponUpsertOne) UpdateEvent() *EventCouponUpsertOne {
	return u.Update(func(s *EventCouponUpsert) {
		s.UpdateEvent()
	})
}

// SetCreateAt sets the "create_at" field.
func (u *EventCouponUpsertOne) SetCreateAt(v uint32) *EventCouponUpsertOne {
	return u.Update(func(s *EventCouponUpsert) {
		s.SetCreateAt(v)
	})
}

// AddCreateAt adds v to the "create_at" field.
func (u *EventCouponUpsertOne) AddCreateAt(v uint32) *EventCouponUpsertOne {
	return u.Update(func(s *EventCouponUpsert) {
		s.AddCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *EventCouponUpsertOne) UpdateCreateAt() *EventCouponUpsertOne {
	return u.Update(func(s *EventCouponUpsert) {
		s.UpdateCreateAt()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *EventCouponUpsertOne) SetUpdateAt(v uint32) *EventCouponUpsertOne {
	return u.Update(func(s *EventCouponUpsert) {
		s.SetUpdateAt(v)
	})
}

// AddUpdateAt adds v to the "update_at" field.
func (u *EventCouponUpsertOne) AddUpdateAt(v uint32) *EventCouponUpsertOne {
	return u.Update(func(s *EventCouponUpsert) {
		s.AddUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *EventCouponUpsertOne) UpdateUpdateAt() *EventCouponUpsertOne {
	return u.Update(func(s *EventCouponUpsert) {
		s.UpdateUpdateAt()
	})
}

// SetDeleteAt sets the "delete_at" field.
func (u *EventCouponUpsertOne) SetDeleteAt(v uint32) *EventCouponUpsertOne {
	return u.Update(func(s *EventCouponUpsert) {
		s.SetDeleteAt(v)
	})
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *EventCouponUpsertOne) AddDeleteAt(v uint32) *EventCouponUpsertOne {
	return u.Update(func(s *EventCouponUpsert) {
		s.AddDeleteAt(v)
	})
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *EventCouponUpsertOne) UpdateDeleteAt() *EventCouponUpsertOne {
	return u.Update(func(s *EventCouponUpsert) {
		s.UpdateDeleteAt()
	})
}

// Exec executes the query.
func (u *EventCouponUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EventCouponCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EventCouponUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *EventCouponUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: EventCouponUpsertOne.ID is not supported by MySQL driver. Use EventCouponUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *EventCouponUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// EventCouponCreateBulk is the builder for creating many EventCoupon entities in bulk.
type EventCouponCreateBulk struct {
	config
	builders []*EventCouponCreate
	conflict []sql.ConflictOption
}

// Save creates the EventCoupon entities in the database.
func (eccb *EventCouponCreateBulk) Save(ctx context.Context) ([]*EventCoupon, error) {
	specs := make([]*sqlgraph.CreateSpec, len(eccb.builders))
	nodes := make([]*EventCoupon, len(eccb.builders))
	mutators := make([]Mutator, len(eccb.builders))
	for i := range eccb.builders {
		func(i int, root context.Context) {
			builder := eccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EventCouponMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, eccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = eccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, eccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, eccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (eccb *EventCouponCreateBulk) SaveX(ctx context.Context) []*EventCoupon {
	v, err := eccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (eccb *EventCouponCreateBulk) Exec(ctx context.Context) error {
	_, err := eccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eccb *EventCouponCreateBulk) ExecX(ctx context.Context) {
	if err := eccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.EventCoupon.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EventCouponUpsert) {
//			SetAppID(v+v).
//		}).
//		Exec(ctx)
//
func (eccb *EventCouponCreateBulk) OnConflict(opts ...sql.ConflictOption) *EventCouponUpsertBulk {
	eccb.conflict = opts
	return &EventCouponUpsertBulk{
		create: eccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.EventCoupon.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (eccb *EventCouponCreateBulk) OnConflictColumns(columns ...string) *EventCouponUpsertBulk {
	eccb.conflict = append(eccb.conflict, sql.ConflictColumns(columns...))
	return &EventCouponUpsertBulk{
		create: eccb,
	}
}

// EventCouponUpsertBulk is the builder for "upsert"-ing
// a bulk of EventCoupon nodes.
type EventCouponUpsertBulk struct {
	create *EventCouponCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.EventCoupon.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(eventcoupon.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *EventCouponUpsertBulk) UpdateNewValues() *EventCouponUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(eventcoupon.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.EventCoupon.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *EventCouponUpsertBulk) Ignore() *EventCouponUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EventCouponUpsertBulk) DoNothing() *EventCouponUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EventCouponCreateBulk.OnConflict
// documentation for more info.
func (u *EventCouponUpsertBulk) Update(set func(*EventCouponUpsert)) *EventCouponUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EventCouponUpsert{UpdateSet: update})
	}))
	return u
}

// SetAppID sets the "app_id" field.
func (u *EventCouponUpsertBulk) SetAppID(v uuid.UUID) *EventCouponUpsertBulk {
	return u.Update(func(s *EventCouponUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *EventCouponUpsertBulk) UpdateAppID() *EventCouponUpsertBulk {
	return u.Update(func(s *EventCouponUpsert) {
		s.UpdateAppID()
	})
}

// SetActivityID sets the "activity_id" field.
func (u *EventCouponUpsertBulk) SetActivityID(v uuid.UUID) *EventCouponUpsertBulk {
	return u.Update(func(s *EventCouponUpsert) {
		s.SetActivityID(v)
	})
}

// UpdateActivityID sets the "activity_id" field to the value that was provided on create.
func (u *EventCouponUpsertBulk) UpdateActivityID() *EventCouponUpsertBulk {
	return u.Update(func(s *EventCouponUpsert) {
		s.UpdateActivityID()
	})
}

// SetType sets the "type" field.
func (u *EventCouponUpsertBulk) SetType(v string) *EventCouponUpsertBulk {
	return u.Update(func(s *EventCouponUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *EventCouponUpsertBulk) UpdateType() *EventCouponUpsertBulk {
	return u.Update(func(s *EventCouponUpsert) {
		s.UpdateType()
	})
}

// SetCouponID sets the "coupon_id" field.
func (u *EventCouponUpsertBulk) SetCouponID(v uuid.UUID) *EventCouponUpsertBulk {
	return u.Update(func(s *EventCouponUpsert) {
		s.SetCouponID(v)
	})
}

// UpdateCouponID sets the "coupon_id" field to the value that was provided on create.
func (u *EventCouponUpsertBulk) UpdateCouponID() *EventCouponUpsertBulk {
	return u.Update(func(s *EventCouponUpsert) {
		s.UpdateCouponID()
	})
}

// SetEvent sets the "event" field.
func (u *EventCouponUpsertBulk) SetEvent(v string) *EventCouponUpsertBulk {
	return u.Update(func(s *EventCouponUpsert) {
		s.SetEvent(v)
	})
}

// UpdateEvent sets the "event" field to the value that was provided on create.
func (u *EventCouponUpsertBulk) UpdateEvent() *EventCouponUpsertBulk {
	return u.Update(func(s *EventCouponUpsert) {
		s.UpdateEvent()
	})
}

// SetCreateAt sets the "create_at" field.
func (u *EventCouponUpsertBulk) SetCreateAt(v uint32) *EventCouponUpsertBulk {
	return u.Update(func(s *EventCouponUpsert) {
		s.SetCreateAt(v)
	})
}

// AddCreateAt adds v to the "create_at" field.
func (u *EventCouponUpsertBulk) AddCreateAt(v uint32) *EventCouponUpsertBulk {
	return u.Update(func(s *EventCouponUpsert) {
		s.AddCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *EventCouponUpsertBulk) UpdateCreateAt() *EventCouponUpsertBulk {
	return u.Update(func(s *EventCouponUpsert) {
		s.UpdateCreateAt()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *EventCouponUpsertBulk) SetUpdateAt(v uint32) *EventCouponUpsertBulk {
	return u.Update(func(s *EventCouponUpsert) {
		s.SetUpdateAt(v)
	})
}

// AddUpdateAt adds v to the "update_at" field.
func (u *EventCouponUpsertBulk) AddUpdateAt(v uint32) *EventCouponUpsertBulk {
	return u.Update(func(s *EventCouponUpsert) {
		s.AddUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *EventCouponUpsertBulk) UpdateUpdateAt() *EventCouponUpsertBulk {
	return u.Update(func(s *EventCouponUpsert) {
		s.UpdateUpdateAt()
	})
}

// SetDeleteAt sets the "delete_at" field.
func (u *EventCouponUpsertBulk) SetDeleteAt(v uint32) *EventCouponUpsertBulk {
	return u.Update(func(s *EventCouponUpsert) {
		s.SetDeleteAt(v)
	})
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *EventCouponUpsertBulk) AddDeleteAt(v uint32) *EventCouponUpsertBulk {
	return u.Update(func(s *EventCouponUpsert) {
		s.AddDeleteAt(v)
	})
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *EventCouponUpsertBulk) UpdateDeleteAt() *EventCouponUpsertBulk {
	return u.Update(func(s *EventCouponUpsert) {
		s.UpdateDeleteAt()
	})
}

// Exec executes the query.
func (u *EventCouponUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the EventCouponCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EventCouponCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EventCouponUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
