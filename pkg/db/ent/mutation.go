// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/activity"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/appcommissionsetting"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/appcouponsetting"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/appinvitationsetting"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/apppurchaseamountsetting"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/appuserinvitationsetting"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/appuserpurchaseamountsetting"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/commissioncoinsetting"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/couponallocated"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/couponpool"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/defaultkpisetting"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/discountpool"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/eventcoupon"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/predicate"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/registrationinvitation"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/userinvitationcode"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/userkpisetting"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/userspecialreduction"
	"github.com/google/uuid"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeActivity                     = "Activity"
	TypeAppCommissionSetting         = "AppCommissionSetting"
	TypeAppCouponSetting             = "AppCouponSetting"
	TypeAppInvitationSetting         = "AppInvitationSetting"
	TypeAppPurchaseAmountSetting     = "AppPurchaseAmountSetting"
	TypeAppUserInvitationSetting     = "AppUserInvitationSetting"
	TypeAppUserPurchaseAmountSetting = "AppUserPurchaseAmountSetting"
	TypeCommissionCoinSetting        = "CommissionCoinSetting"
	TypeCouponAllocated              = "CouponAllocated"
	TypeCouponPool                   = "CouponPool"
	TypeDefaultKpiSetting            = "DefaultKpiSetting"
	TypeDiscountPool                 = "DiscountPool"
	TypeEventCoupon                  = "EventCoupon"
	TypeRegistrationInvitation       = "RegistrationInvitation"
	TypeUserInvitationCode           = "UserInvitationCode"
	TypeUserKpiSetting               = "UserKpiSetting"
	TypeUserSpecialReduction         = "UserSpecialReduction"
)

// ActivityMutation represents an operation that mutates the Activity nodes in the graph.
type ActivityMutation struct {
	config
	op              Op
	typ             string
	id              *uuid.UUID
	app_id          *uuid.UUID
	created_by      *uuid.UUID
	name            *string
	start           *uint32
	addstart        *int32
	end             *uint32
	addend          *int32
	system_activity *bool
	create_at       *uint32
	addcreate_at    *int32
	update_at       *uint32
	addupdate_at    *int32
	delete_at       *uint32
	adddelete_at    *int32
	clearedFields   map[string]struct{}
	done            bool
	oldValue        func(context.Context) (*Activity, error)
	predicates      []predicate.Activity
}

var _ ent.Mutation = (*ActivityMutation)(nil)

// activityOption allows management of the mutation configuration using functional options.
type activityOption func(*ActivityMutation)

// newActivityMutation creates new mutation for the Activity entity.
func newActivityMutation(c config, op Op, opts ...activityOption) *ActivityMutation {
	m := &ActivityMutation{
		config:        c,
		op:            op,
		typ:           TypeActivity,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withActivityID sets the ID field of the mutation.
func withActivityID(id uuid.UUID) activityOption {
	return func(m *ActivityMutation) {
		var (
			err   error
			once  sync.Once
			value *Activity
		)
		m.oldValue = func(ctx context.Context) (*Activity, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Activity.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withActivity sets the old Activity of the mutation.
func withActivity(node *Activity) activityOption {
	return func(m *ActivityMutation) {
		m.oldValue = func(context.Context) (*Activity, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ActivityMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ActivityMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Activity entities.
func (m *ActivityMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ActivityMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ActivityMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Activity.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAppID sets the "app_id" field.
func (m *ActivityMutation) SetAppID(u uuid.UUID) {
	m.app_id = &u
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *ActivityMutation) AppID() (r uuid.UUID, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the Activity entity.
// If the Activity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActivityMutation) OldAppID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ResetAppID resets all changes to the "app_id" field.
func (m *ActivityMutation) ResetAppID() {
	m.app_id = nil
}

// SetCreatedBy sets the "created_by" field.
func (m *ActivityMutation) SetCreatedBy(u uuid.UUID) {
	m.created_by = &u
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *ActivityMutation) CreatedBy() (r uuid.UUID, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the Activity entity.
// If the Activity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActivityMutation) OldCreatedBy(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *ActivityMutation) ResetCreatedBy() {
	m.created_by = nil
}

// SetName sets the "name" field.
func (m *ActivityMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ActivityMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Activity entity.
// If the Activity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActivityMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ActivityMutation) ResetName() {
	m.name = nil
}

// SetStart sets the "start" field.
func (m *ActivityMutation) SetStart(u uint32) {
	m.start = &u
	m.addstart = nil
}

// Start returns the value of the "start" field in the mutation.
func (m *ActivityMutation) Start() (r uint32, exists bool) {
	v := m.start
	if v == nil {
		return
	}
	return *v, true
}

// OldStart returns the old "start" field's value of the Activity entity.
// If the Activity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActivityMutation) OldStart(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStart is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStart requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStart: %w", err)
	}
	return oldValue.Start, nil
}

// AddStart adds u to the "start" field.
func (m *ActivityMutation) AddStart(u int32) {
	if m.addstart != nil {
		*m.addstart += u
	} else {
		m.addstart = &u
	}
}

// AddedStart returns the value that was added to the "start" field in this mutation.
func (m *ActivityMutation) AddedStart() (r int32, exists bool) {
	v := m.addstart
	if v == nil {
		return
	}
	return *v, true
}

// ResetStart resets all changes to the "start" field.
func (m *ActivityMutation) ResetStart() {
	m.start = nil
	m.addstart = nil
}

// SetEnd sets the "end" field.
func (m *ActivityMutation) SetEnd(u uint32) {
	m.end = &u
	m.addend = nil
}

// End returns the value of the "end" field in the mutation.
func (m *ActivityMutation) End() (r uint32, exists bool) {
	v := m.end
	if v == nil {
		return
	}
	return *v, true
}

// OldEnd returns the old "end" field's value of the Activity entity.
// If the Activity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActivityMutation) OldEnd(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEnd is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEnd requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnd: %w", err)
	}
	return oldValue.End, nil
}

// AddEnd adds u to the "end" field.
func (m *ActivityMutation) AddEnd(u int32) {
	if m.addend != nil {
		*m.addend += u
	} else {
		m.addend = &u
	}
}

// AddedEnd returns the value that was added to the "end" field in this mutation.
func (m *ActivityMutation) AddedEnd() (r int32, exists bool) {
	v := m.addend
	if v == nil {
		return
	}
	return *v, true
}

// ResetEnd resets all changes to the "end" field.
func (m *ActivityMutation) ResetEnd() {
	m.end = nil
	m.addend = nil
}

// SetSystemActivity sets the "system_activity" field.
func (m *ActivityMutation) SetSystemActivity(b bool) {
	m.system_activity = &b
}

// SystemActivity returns the value of the "system_activity" field in the mutation.
func (m *ActivityMutation) SystemActivity() (r bool, exists bool) {
	v := m.system_activity
	if v == nil {
		return
	}
	return *v, true
}

// OldSystemActivity returns the old "system_activity" field's value of the Activity entity.
// If the Activity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActivityMutation) OldSystemActivity(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSystemActivity is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSystemActivity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSystemActivity: %w", err)
	}
	return oldValue.SystemActivity, nil
}

// ResetSystemActivity resets all changes to the "system_activity" field.
func (m *ActivityMutation) ResetSystemActivity() {
	m.system_activity = nil
}

// SetCreateAt sets the "create_at" field.
func (m *ActivityMutation) SetCreateAt(u uint32) {
	m.create_at = &u
	m.addcreate_at = nil
}

// CreateAt returns the value of the "create_at" field in the mutation.
func (m *ActivityMutation) CreateAt() (r uint32, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateAt returns the old "create_at" field's value of the Activity entity.
// If the Activity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActivityMutation) OldCreateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}
	return oldValue.CreateAt, nil
}

// AddCreateAt adds u to the "create_at" field.
func (m *ActivityMutation) AddCreateAt(u int32) {
	if m.addcreate_at != nil {
		*m.addcreate_at += u
	} else {
		m.addcreate_at = &u
	}
}

// AddedCreateAt returns the value that was added to the "create_at" field in this mutation.
func (m *ActivityMutation) AddedCreateAt() (r int32, exists bool) {
	v := m.addcreate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateAt resets all changes to the "create_at" field.
func (m *ActivityMutation) ResetCreateAt() {
	m.create_at = nil
	m.addcreate_at = nil
}

// SetUpdateAt sets the "update_at" field.
func (m *ActivityMutation) SetUpdateAt(u uint32) {
	m.update_at = &u
	m.addupdate_at = nil
}

// UpdateAt returns the value of the "update_at" field in the mutation.
func (m *ActivityMutation) UpdateAt() (r uint32, exists bool) {
	v := m.update_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateAt returns the old "update_at" field's value of the Activity entity.
// If the Activity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActivityMutation) OldUpdateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateAt: %w", err)
	}
	return oldValue.UpdateAt, nil
}

// AddUpdateAt adds u to the "update_at" field.
func (m *ActivityMutation) AddUpdateAt(u int32) {
	if m.addupdate_at != nil {
		*m.addupdate_at += u
	} else {
		m.addupdate_at = &u
	}
}

// AddedUpdateAt returns the value that was added to the "update_at" field in this mutation.
func (m *ActivityMutation) AddedUpdateAt() (r int32, exists bool) {
	v := m.addupdate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateAt resets all changes to the "update_at" field.
func (m *ActivityMutation) ResetUpdateAt() {
	m.update_at = nil
	m.addupdate_at = nil
}

// SetDeleteAt sets the "delete_at" field.
func (m *ActivityMutation) SetDeleteAt(u uint32) {
	m.delete_at = &u
	m.adddelete_at = nil
}

// DeleteAt returns the value of the "delete_at" field in the mutation.
func (m *ActivityMutation) DeleteAt() (r uint32, exists bool) {
	v := m.delete_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteAt returns the old "delete_at" field's value of the Activity entity.
// If the Activity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActivityMutation) OldDeleteAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteAt: %w", err)
	}
	return oldValue.DeleteAt, nil
}

// AddDeleteAt adds u to the "delete_at" field.
func (m *ActivityMutation) AddDeleteAt(u int32) {
	if m.adddelete_at != nil {
		*m.adddelete_at += u
	} else {
		m.adddelete_at = &u
	}
}

// AddedDeleteAt returns the value that was added to the "delete_at" field in this mutation.
func (m *ActivityMutation) AddedDeleteAt() (r int32, exists bool) {
	v := m.adddelete_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeleteAt resets all changes to the "delete_at" field.
func (m *ActivityMutation) ResetDeleteAt() {
	m.delete_at = nil
	m.adddelete_at = nil
}

// Where appends a list predicates to the ActivityMutation builder.
func (m *ActivityMutation) Where(ps ...predicate.Activity) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ActivityMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Activity).
func (m *ActivityMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ActivityMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.app_id != nil {
		fields = append(fields, activity.FieldAppID)
	}
	if m.created_by != nil {
		fields = append(fields, activity.FieldCreatedBy)
	}
	if m.name != nil {
		fields = append(fields, activity.FieldName)
	}
	if m.start != nil {
		fields = append(fields, activity.FieldStart)
	}
	if m.end != nil {
		fields = append(fields, activity.FieldEnd)
	}
	if m.system_activity != nil {
		fields = append(fields, activity.FieldSystemActivity)
	}
	if m.create_at != nil {
		fields = append(fields, activity.FieldCreateAt)
	}
	if m.update_at != nil {
		fields = append(fields, activity.FieldUpdateAt)
	}
	if m.delete_at != nil {
		fields = append(fields, activity.FieldDeleteAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ActivityMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case activity.FieldAppID:
		return m.AppID()
	case activity.FieldCreatedBy:
		return m.CreatedBy()
	case activity.FieldName:
		return m.Name()
	case activity.FieldStart:
		return m.Start()
	case activity.FieldEnd:
		return m.End()
	case activity.FieldSystemActivity:
		return m.SystemActivity()
	case activity.FieldCreateAt:
		return m.CreateAt()
	case activity.FieldUpdateAt:
		return m.UpdateAt()
	case activity.FieldDeleteAt:
		return m.DeleteAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ActivityMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case activity.FieldAppID:
		return m.OldAppID(ctx)
	case activity.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case activity.FieldName:
		return m.OldName(ctx)
	case activity.FieldStart:
		return m.OldStart(ctx)
	case activity.FieldEnd:
		return m.OldEnd(ctx)
	case activity.FieldSystemActivity:
		return m.OldSystemActivity(ctx)
	case activity.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case activity.FieldUpdateAt:
		return m.OldUpdateAt(ctx)
	case activity.FieldDeleteAt:
		return m.OldDeleteAt(ctx)
	}
	return nil, fmt.Errorf("unknown Activity field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ActivityMutation) SetField(name string, value ent.Value) error {
	switch name {
	case activity.FieldAppID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case activity.FieldCreatedBy:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case activity.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case activity.FieldStart:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStart(v)
		return nil
	case activity.FieldEnd:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnd(v)
		return nil
	case activity.FieldSystemActivity:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSystemActivity(v)
		return nil
	case activity.FieldCreateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateAt(v)
		return nil
	case activity.FieldUpdateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateAt(v)
		return nil
	case activity.FieldDeleteAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown Activity field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ActivityMutation) AddedFields() []string {
	var fields []string
	if m.addstart != nil {
		fields = append(fields, activity.FieldStart)
	}
	if m.addend != nil {
		fields = append(fields, activity.FieldEnd)
	}
	if m.addcreate_at != nil {
		fields = append(fields, activity.FieldCreateAt)
	}
	if m.addupdate_at != nil {
		fields = append(fields, activity.FieldUpdateAt)
	}
	if m.adddelete_at != nil {
		fields = append(fields, activity.FieldDeleteAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ActivityMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case activity.FieldStart:
		return m.AddedStart()
	case activity.FieldEnd:
		return m.AddedEnd()
	case activity.FieldCreateAt:
		return m.AddedCreateAt()
	case activity.FieldUpdateAt:
		return m.AddedUpdateAt()
	case activity.FieldDeleteAt:
		return m.AddedDeleteAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ActivityMutation) AddField(name string, value ent.Value) error {
	switch name {
	case activity.FieldStart:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStart(v)
		return nil
	case activity.FieldEnd:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddEnd(v)
		return nil
	case activity.FieldCreateAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateAt(v)
		return nil
	case activity.FieldUpdateAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateAt(v)
		return nil
	case activity.FieldDeleteAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown Activity numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ActivityMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ActivityMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ActivityMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Activity nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ActivityMutation) ResetField(name string) error {
	switch name {
	case activity.FieldAppID:
		m.ResetAppID()
		return nil
	case activity.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case activity.FieldName:
		m.ResetName()
		return nil
	case activity.FieldStart:
		m.ResetStart()
		return nil
	case activity.FieldEnd:
		m.ResetEnd()
		return nil
	case activity.FieldSystemActivity:
		m.ResetSystemActivity()
		return nil
	case activity.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case activity.FieldUpdateAt:
		m.ResetUpdateAt()
		return nil
	case activity.FieldDeleteAt:
		m.ResetDeleteAt()
		return nil
	}
	return fmt.Errorf("unknown Activity field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ActivityMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ActivityMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ActivityMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ActivityMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ActivityMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ActivityMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ActivityMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Activity unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ActivityMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Activity edge %s", name)
}

// AppCommissionSettingMutation represents an operation that mutates the AppCommissionSetting nodes in the graph.
type AppCommissionSettingMutation struct {
	config
	op                  Op
	typ                 string
	id                  *uuid.UUID
	app_id              *uuid.UUID
	_type               *string
	level               *uint32
	addlevel            *int32
	invitation_discount *bool
	unique_setting      *bool
	create_at           *uint32
	addcreate_at        *int32
	update_at           *uint32
	addupdate_at        *int32
	delete_at           *uint32
	adddelete_at        *int32
	clearedFields       map[string]struct{}
	done                bool
	oldValue            func(context.Context) (*AppCommissionSetting, error)
	predicates          []predicate.AppCommissionSetting
}

var _ ent.Mutation = (*AppCommissionSettingMutation)(nil)

// appcommissionsettingOption allows management of the mutation configuration using functional options.
type appcommissionsettingOption func(*AppCommissionSettingMutation)

// newAppCommissionSettingMutation creates new mutation for the AppCommissionSetting entity.
func newAppCommissionSettingMutation(c config, op Op, opts ...appcommissionsettingOption) *AppCommissionSettingMutation {
	m := &AppCommissionSettingMutation{
		config:        c,
		op:            op,
		typ:           TypeAppCommissionSetting,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAppCommissionSettingID sets the ID field of the mutation.
func withAppCommissionSettingID(id uuid.UUID) appcommissionsettingOption {
	return func(m *AppCommissionSettingMutation) {
		var (
			err   error
			once  sync.Once
			value *AppCommissionSetting
		)
		m.oldValue = func(ctx context.Context) (*AppCommissionSetting, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().AppCommissionSetting.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAppCommissionSetting sets the old AppCommissionSetting of the mutation.
func withAppCommissionSetting(node *AppCommissionSetting) appcommissionsettingOption {
	return func(m *AppCommissionSettingMutation) {
		m.oldValue = func(context.Context) (*AppCommissionSetting, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AppCommissionSettingMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AppCommissionSettingMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of AppCommissionSetting entities.
func (m *AppCommissionSettingMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AppCommissionSettingMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AppCommissionSettingMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().AppCommissionSetting.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAppID sets the "app_id" field.
func (m *AppCommissionSettingMutation) SetAppID(u uuid.UUID) {
	m.app_id = &u
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *AppCommissionSettingMutation) AppID() (r uuid.UUID, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the AppCommissionSetting entity.
// If the AppCommissionSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppCommissionSettingMutation) OldAppID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ResetAppID resets all changes to the "app_id" field.
func (m *AppCommissionSettingMutation) ResetAppID() {
	m.app_id = nil
}

// SetType sets the "type" field.
func (m *AppCommissionSettingMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *AppCommissionSettingMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the AppCommissionSetting entity.
// If the AppCommissionSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppCommissionSettingMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *AppCommissionSettingMutation) ResetType() {
	m._type = nil
}

// SetLevel sets the "level" field.
func (m *AppCommissionSettingMutation) SetLevel(u uint32) {
	m.level = &u
	m.addlevel = nil
}

// Level returns the value of the "level" field in the mutation.
func (m *AppCommissionSettingMutation) Level() (r uint32, exists bool) {
	v := m.level
	if v == nil {
		return
	}
	return *v, true
}

// OldLevel returns the old "level" field's value of the AppCommissionSetting entity.
// If the AppCommissionSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppCommissionSettingMutation) OldLevel(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLevel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLevel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLevel: %w", err)
	}
	return oldValue.Level, nil
}

// AddLevel adds u to the "level" field.
func (m *AppCommissionSettingMutation) AddLevel(u int32) {
	if m.addlevel != nil {
		*m.addlevel += u
	} else {
		m.addlevel = &u
	}
}

// AddedLevel returns the value that was added to the "level" field in this mutation.
func (m *AppCommissionSettingMutation) AddedLevel() (r int32, exists bool) {
	v := m.addlevel
	if v == nil {
		return
	}
	return *v, true
}

// ResetLevel resets all changes to the "level" field.
func (m *AppCommissionSettingMutation) ResetLevel() {
	m.level = nil
	m.addlevel = nil
}

// SetInvitationDiscount sets the "invitation_discount" field.
func (m *AppCommissionSettingMutation) SetInvitationDiscount(b bool) {
	m.invitation_discount = &b
}

// InvitationDiscount returns the value of the "invitation_discount" field in the mutation.
func (m *AppCommissionSettingMutation) InvitationDiscount() (r bool, exists bool) {
	v := m.invitation_discount
	if v == nil {
		return
	}
	return *v, true
}

// OldInvitationDiscount returns the old "invitation_discount" field's value of the AppCommissionSetting entity.
// If the AppCommissionSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppCommissionSettingMutation) OldInvitationDiscount(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInvitationDiscount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInvitationDiscount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInvitationDiscount: %w", err)
	}
	return oldValue.InvitationDiscount, nil
}

// ResetInvitationDiscount resets all changes to the "invitation_discount" field.
func (m *AppCommissionSettingMutation) ResetInvitationDiscount() {
	m.invitation_discount = nil
}

// SetUniqueSetting sets the "unique_setting" field.
func (m *AppCommissionSettingMutation) SetUniqueSetting(b bool) {
	m.unique_setting = &b
}

// UniqueSetting returns the value of the "unique_setting" field in the mutation.
func (m *AppCommissionSettingMutation) UniqueSetting() (r bool, exists bool) {
	v := m.unique_setting
	if v == nil {
		return
	}
	return *v, true
}

// OldUniqueSetting returns the old "unique_setting" field's value of the AppCommissionSetting entity.
// If the AppCommissionSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppCommissionSettingMutation) OldUniqueSetting(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUniqueSetting is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUniqueSetting requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUniqueSetting: %w", err)
	}
	return oldValue.UniqueSetting, nil
}

// ResetUniqueSetting resets all changes to the "unique_setting" field.
func (m *AppCommissionSettingMutation) ResetUniqueSetting() {
	m.unique_setting = nil
}

// SetCreateAt sets the "create_at" field.
func (m *AppCommissionSettingMutation) SetCreateAt(u uint32) {
	m.create_at = &u
	m.addcreate_at = nil
}

// CreateAt returns the value of the "create_at" field in the mutation.
func (m *AppCommissionSettingMutation) CreateAt() (r uint32, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateAt returns the old "create_at" field's value of the AppCommissionSetting entity.
// If the AppCommissionSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppCommissionSettingMutation) OldCreateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}
	return oldValue.CreateAt, nil
}

// AddCreateAt adds u to the "create_at" field.
func (m *AppCommissionSettingMutation) AddCreateAt(u int32) {
	if m.addcreate_at != nil {
		*m.addcreate_at += u
	} else {
		m.addcreate_at = &u
	}
}

// AddedCreateAt returns the value that was added to the "create_at" field in this mutation.
func (m *AppCommissionSettingMutation) AddedCreateAt() (r int32, exists bool) {
	v := m.addcreate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateAt resets all changes to the "create_at" field.
func (m *AppCommissionSettingMutation) ResetCreateAt() {
	m.create_at = nil
	m.addcreate_at = nil
}

// SetUpdateAt sets the "update_at" field.
func (m *AppCommissionSettingMutation) SetUpdateAt(u uint32) {
	m.update_at = &u
	m.addupdate_at = nil
}

// UpdateAt returns the value of the "update_at" field in the mutation.
func (m *AppCommissionSettingMutation) UpdateAt() (r uint32, exists bool) {
	v := m.update_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateAt returns the old "update_at" field's value of the AppCommissionSetting entity.
// If the AppCommissionSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppCommissionSettingMutation) OldUpdateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateAt: %w", err)
	}
	return oldValue.UpdateAt, nil
}

// AddUpdateAt adds u to the "update_at" field.
func (m *AppCommissionSettingMutation) AddUpdateAt(u int32) {
	if m.addupdate_at != nil {
		*m.addupdate_at += u
	} else {
		m.addupdate_at = &u
	}
}

// AddedUpdateAt returns the value that was added to the "update_at" field in this mutation.
func (m *AppCommissionSettingMutation) AddedUpdateAt() (r int32, exists bool) {
	v := m.addupdate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateAt resets all changes to the "update_at" field.
func (m *AppCommissionSettingMutation) ResetUpdateAt() {
	m.update_at = nil
	m.addupdate_at = nil
}

// SetDeleteAt sets the "delete_at" field.
func (m *AppCommissionSettingMutation) SetDeleteAt(u uint32) {
	m.delete_at = &u
	m.adddelete_at = nil
}

// DeleteAt returns the value of the "delete_at" field in the mutation.
func (m *AppCommissionSettingMutation) DeleteAt() (r uint32, exists bool) {
	v := m.delete_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteAt returns the old "delete_at" field's value of the AppCommissionSetting entity.
// If the AppCommissionSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppCommissionSettingMutation) OldDeleteAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteAt: %w", err)
	}
	return oldValue.DeleteAt, nil
}

// AddDeleteAt adds u to the "delete_at" field.
func (m *AppCommissionSettingMutation) AddDeleteAt(u int32) {
	if m.adddelete_at != nil {
		*m.adddelete_at += u
	} else {
		m.adddelete_at = &u
	}
}

// AddedDeleteAt returns the value that was added to the "delete_at" field in this mutation.
func (m *AppCommissionSettingMutation) AddedDeleteAt() (r int32, exists bool) {
	v := m.adddelete_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeleteAt resets all changes to the "delete_at" field.
func (m *AppCommissionSettingMutation) ResetDeleteAt() {
	m.delete_at = nil
	m.adddelete_at = nil
}

// Where appends a list predicates to the AppCommissionSettingMutation builder.
func (m *AppCommissionSettingMutation) Where(ps ...predicate.AppCommissionSetting) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *AppCommissionSettingMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (AppCommissionSetting).
func (m *AppCommissionSettingMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AppCommissionSettingMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.app_id != nil {
		fields = append(fields, appcommissionsetting.FieldAppID)
	}
	if m._type != nil {
		fields = append(fields, appcommissionsetting.FieldType)
	}
	if m.level != nil {
		fields = append(fields, appcommissionsetting.FieldLevel)
	}
	if m.invitation_discount != nil {
		fields = append(fields, appcommissionsetting.FieldInvitationDiscount)
	}
	if m.unique_setting != nil {
		fields = append(fields, appcommissionsetting.FieldUniqueSetting)
	}
	if m.create_at != nil {
		fields = append(fields, appcommissionsetting.FieldCreateAt)
	}
	if m.update_at != nil {
		fields = append(fields, appcommissionsetting.FieldUpdateAt)
	}
	if m.delete_at != nil {
		fields = append(fields, appcommissionsetting.FieldDeleteAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AppCommissionSettingMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case appcommissionsetting.FieldAppID:
		return m.AppID()
	case appcommissionsetting.FieldType:
		return m.GetType()
	case appcommissionsetting.FieldLevel:
		return m.Level()
	case appcommissionsetting.FieldInvitationDiscount:
		return m.InvitationDiscount()
	case appcommissionsetting.FieldUniqueSetting:
		return m.UniqueSetting()
	case appcommissionsetting.FieldCreateAt:
		return m.CreateAt()
	case appcommissionsetting.FieldUpdateAt:
		return m.UpdateAt()
	case appcommissionsetting.FieldDeleteAt:
		return m.DeleteAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AppCommissionSettingMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case appcommissionsetting.FieldAppID:
		return m.OldAppID(ctx)
	case appcommissionsetting.FieldType:
		return m.OldType(ctx)
	case appcommissionsetting.FieldLevel:
		return m.OldLevel(ctx)
	case appcommissionsetting.FieldInvitationDiscount:
		return m.OldInvitationDiscount(ctx)
	case appcommissionsetting.FieldUniqueSetting:
		return m.OldUniqueSetting(ctx)
	case appcommissionsetting.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case appcommissionsetting.FieldUpdateAt:
		return m.OldUpdateAt(ctx)
	case appcommissionsetting.FieldDeleteAt:
		return m.OldDeleteAt(ctx)
	}
	return nil, fmt.Errorf("unknown AppCommissionSetting field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AppCommissionSettingMutation) SetField(name string, value ent.Value) error {
	switch name {
	case appcommissionsetting.FieldAppID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case appcommissionsetting.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case appcommissionsetting.FieldLevel:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLevel(v)
		return nil
	case appcommissionsetting.FieldInvitationDiscount:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInvitationDiscount(v)
		return nil
	case appcommissionsetting.FieldUniqueSetting:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUniqueSetting(v)
		return nil
	case appcommissionsetting.FieldCreateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateAt(v)
		return nil
	case appcommissionsetting.FieldUpdateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateAt(v)
		return nil
	case appcommissionsetting.FieldDeleteAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown AppCommissionSetting field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AppCommissionSettingMutation) AddedFields() []string {
	var fields []string
	if m.addlevel != nil {
		fields = append(fields, appcommissionsetting.FieldLevel)
	}
	if m.addcreate_at != nil {
		fields = append(fields, appcommissionsetting.FieldCreateAt)
	}
	if m.addupdate_at != nil {
		fields = append(fields, appcommissionsetting.FieldUpdateAt)
	}
	if m.adddelete_at != nil {
		fields = append(fields, appcommissionsetting.FieldDeleteAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AppCommissionSettingMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case appcommissionsetting.FieldLevel:
		return m.AddedLevel()
	case appcommissionsetting.FieldCreateAt:
		return m.AddedCreateAt()
	case appcommissionsetting.FieldUpdateAt:
		return m.AddedUpdateAt()
	case appcommissionsetting.FieldDeleteAt:
		return m.AddedDeleteAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AppCommissionSettingMutation) AddField(name string, value ent.Value) error {
	switch name {
	case appcommissionsetting.FieldLevel:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLevel(v)
		return nil
	case appcommissionsetting.FieldCreateAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateAt(v)
		return nil
	case appcommissionsetting.FieldUpdateAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateAt(v)
		return nil
	case appcommissionsetting.FieldDeleteAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown AppCommissionSetting numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AppCommissionSettingMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AppCommissionSettingMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AppCommissionSettingMutation) ClearField(name string) error {
	return fmt.Errorf("unknown AppCommissionSetting nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AppCommissionSettingMutation) ResetField(name string) error {
	switch name {
	case appcommissionsetting.FieldAppID:
		m.ResetAppID()
		return nil
	case appcommissionsetting.FieldType:
		m.ResetType()
		return nil
	case appcommissionsetting.FieldLevel:
		m.ResetLevel()
		return nil
	case appcommissionsetting.FieldInvitationDiscount:
		m.ResetInvitationDiscount()
		return nil
	case appcommissionsetting.FieldUniqueSetting:
		m.ResetUniqueSetting()
		return nil
	case appcommissionsetting.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case appcommissionsetting.FieldUpdateAt:
		m.ResetUpdateAt()
		return nil
	case appcommissionsetting.FieldDeleteAt:
		m.ResetDeleteAt()
		return nil
	}
	return fmt.Errorf("unknown AppCommissionSetting field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AppCommissionSettingMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AppCommissionSettingMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AppCommissionSettingMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AppCommissionSettingMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AppCommissionSettingMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AppCommissionSettingMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AppCommissionSettingMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown AppCommissionSetting unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AppCommissionSettingMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown AppCommissionSetting edge %s", name)
}

// AppCouponSettingMutation represents an operation that mutates the AppCouponSetting nodes in the graph.
type AppCouponSettingMutation struct {
	config
	op                  Op
	typ                 string
	id                  *uuid.UUID
	app_id              *uuid.UUID
	domination_limit    *uint64
	adddomination_limit *int64
	total_limit         *int32
	addtotal_limit      *int32
	create_at           *uint32
	addcreate_at        *int32
	update_at           *uint32
	addupdate_at        *int32
	delete_at           *uint32
	adddelete_at        *int32
	clearedFields       map[string]struct{}
	done                bool
	oldValue            func(context.Context) (*AppCouponSetting, error)
	predicates          []predicate.AppCouponSetting
}

var _ ent.Mutation = (*AppCouponSettingMutation)(nil)

// appcouponsettingOption allows management of the mutation configuration using functional options.
type appcouponsettingOption func(*AppCouponSettingMutation)

// newAppCouponSettingMutation creates new mutation for the AppCouponSetting entity.
func newAppCouponSettingMutation(c config, op Op, opts ...appcouponsettingOption) *AppCouponSettingMutation {
	m := &AppCouponSettingMutation{
		config:        c,
		op:            op,
		typ:           TypeAppCouponSetting,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAppCouponSettingID sets the ID field of the mutation.
func withAppCouponSettingID(id uuid.UUID) appcouponsettingOption {
	return func(m *AppCouponSettingMutation) {
		var (
			err   error
			once  sync.Once
			value *AppCouponSetting
		)
		m.oldValue = func(ctx context.Context) (*AppCouponSetting, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().AppCouponSetting.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAppCouponSetting sets the old AppCouponSetting of the mutation.
func withAppCouponSetting(node *AppCouponSetting) appcouponsettingOption {
	return func(m *AppCouponSettingMutation) {
		m.oldValue = func(context.Context) (*AppCouponSetting, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AppCouponSettingMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AppCouponSettingMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of AppCouponSetting entities.
func (m *AppCouponSettingMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AppCouponSettingMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AppCouponSettingMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().AppCouponSetting.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAppID sets the "app_id" field.
func (m *AppCouponSettingMutation) SetAppID(u uuid.UUID) {
	m.app_id = &u
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *AppCouponSettingMutation) AppID() (r uuid.UUID, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the AppCouponSetting entity.
// If the AppCouponSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppCouponSettingMutation) OldAppID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ResetAppID resets all changes to the "app_id" field.
func (m *AppCouponSettingMutation) ResetAppID() {
	m.app_id = nil
}

// SetDominationLimit sets the "domination_limit" field.
func (m *AppCouponSettingMutation) SetDominationLimit(u uint64) {
	m.domination_limit = &u
	m.adddomination_limit = nil
}

// DominationLimit returns the value of the "domination_limit" field in the mutation.
func (m *AppCouponSettingMutation) DominationLimit() (r uint64, exists bool) {
	v := m.domination_limit
	if v == nil {
		return
	}
	return *v, true
}

// OldDominationLimit returns the old "domination_limit" field's value of the AppCouponSetting entity.
// If the AppCouponSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppCouponSettingMutation) OldDominationLimit(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDominationLimit is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDominationLimit requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDominationLimit: %w", err)
	}
	return oldValue.DominationLimit, nil
}

// AddDominationLimit adds u to the "domination_limit" field.
func (m *AppCouponSettingMutation) AddDominationLimit(u int64) {
	if m.adddomination_limit != nil {
		*m.adddomination_limit += u
	} else {
		m.adddomination_limit = &u
	}
}

// AddedDominationLimit returns the value that was added to the "domination_limit" field in this mutation.
func (m *AppCouponSettingMutation) AddedDominationLimit() (r int64, exists bool) {
	v := m.adddomination_limit
	if v == nil {
		return
	}
	return *v, true
}

// ResetDominationLimit resets all changes to the "domination_limit" field.
func (m *AppCouponSettingMutation) ResetDominationLimit() {
	m.domination_limit = nil
	m.adddomination_limit = nil
}

// SetTotalLimit sets the "total_limit" field.
func (m *AppCouponSettingMutation) SetTotalLimit(i int32) {
	m.total_limit = &i
	m.addtotal_limit = nil
}

// TotalLimit returns the value of the "total_limit" field in the mutation.
func (m *AppCouponSettingMutation) TotalLimit() (r int32, exists bool) {
	v := m.total_limit
	if v == nil {
		return
	}
	return *v, true
}

// OldTotalLimit returns the old "total_limit" field's value of the AppCouponSetting entity.
// If the AppCouponSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppCouponSettingMutation) OldTotalLimit(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTotalLimit is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTotalLimit requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTotalLimit: %w", err)
	}
	return oldValue.TotalLimit, nil
}

// AddTotalLimit adds i to the "total_limit" field.
func (m *AppCouponSettingMutation) AddTotalLimit(i int32) {
	if m.addtotal_limit != nil {
		*m.addtotal_limit += i
	} else {
		m.addtotal_limit = &i
	}
}

// AddedTotalLimit returns the value that was added to the "total_limit" field in this mutation.
func (m *AppCouponSettingMutation) AddedTotalLimit() (r int32, exists bool) {
	v := m.addtotal_limit
	if v == nil {
		return
	}
	return *v, true
}

// ResetTotalLimit resets all changes to the "total_limit" field.
func (m *AppCouponSettingMutation) ResetTotalLimit() {
	m.total_limit = nil
	m.addtotal_limit = nil
}

// SetCreateAt sets the "create_at" field.
func (m *AppCouponSettingMutation) SetCreateAt(u uint32) {
	m.create_at = &u
	m.addcreate_at = nil
}

// CreateAt returns the value of the "create_at" field in the mutation.
func (m *AppCouponSettingMutation) CreateAt() (r uint32, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateAt returns the old "create_at" field's value of the AppCouponSetting entity.
// If the AppCouponSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppCouponSettingMutation) OldCreateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}
	return oldValue.CreateAt, nil
}

// AddCreateAt adds u to the "create_at" field.
func (m *AppCouponSettingMutation) AddCreateAt(u int32) {
	if m.addcreate_at != nil {
		*m.addcreate_at += u
	} else {
		m.addcreate_at = &u
	}
}

// AddedCreateAt returns the value that was added to the "create_at" field in this mutation.
func (m *AppCouponSettingMutation) AddedCreateAt() (r int32, exists bool) {
	v := m.addcreate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateAt resets all changes to the "create_at" field.
func (m *AppCouponSettingMutation) ResetCreateAt() {
	m.create_at = nil
	m.addcreate_at = nil
}

// SetUpdateAt sets the "update_at" field.
func (m *AppCouponSettingMutation) SetUpdateAt(u uint32) {
	m.update_at = &u
	m.addupdate_at = nil
}

// UpdateAt returns the value of the "update_at" field in the mutation.
func (m *AppCouponSettingMutation) UpdateAt() (r uint32, exists bool) {
	v := m.update_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateAt returns the old "update_at" field's value of the AppCouponSetting entity.
// If the AppCouponSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppCouponSettingMutation) OldUpdateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateAt: %w", err)
	}
	return oldValue.UpdateAt, nil
}

// AddUpdateAt adds u to the "update_at" field.
func (m *AppCouponSettingMutation) AddUpdateAt(u int32) {
	if m.addupdate_at != nil {
		*m.addupdate_at += u
	} else {
		m.addupdate_at = &u
	}
}

// AddedUpdateAt returns the value that was added to the "update_at" field in this mutation.
func (m *AppCouponSettingMutation) AddedUpdateAt() (r int32, exists bool) {
	v := m.addupdate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateAt resets all changes to the "update_at" field.
func (m *AppCouponSettingMutation) ResetUpdateAt() {
	m.update_at = nil
	m.addupdate_at = nil
}

// SetDeleteAt sets the "delete_at" field.
func (m *AppCouponSettingMutation) SetDeleteAt(u uint32) {
	m.delete_at = &u
	m.adddelete_at = nil
}

// DeleteAt returns the value of the "delete_at" field in the mutation.
func (m *AppCouponSettingMutation) DeleteAt() (r uint32, exists bool) {
	v := m.delete_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteAt returns the old "delete_at" field's value of the AppCouponSetting entity.
// If the AppCouponSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppCouponSettingMutation) OldDeleteAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteAt: %w", err)
	}
	return oldValue.DeleteAt, nil
}

// AddDeleteAt adds u to the "delete_at" field.
func (m *AppCouponSettingMutation) AddDeleteAt(u int32) {
	if m.adddelete_at != nil {
		*m.adddelete_at += u
	} else {
		m.adddelete_at = &u
	}
}

// AddedDeleteAt returns the value that was added to the "delete_at" field in this mutation.
func (m *AppCouponSettingMutation) AddedDeleteAt() (r int32, exists bool) {
	v := m.adddelete_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeleteAt resets all changes to the "delete_at" field.
func (m *AppCouponSettingMutation) ResetDeleteAt() {
	m.delete_at = nil
	m.adddelete_at = nil
}

// Where appends a list predicates to the AppCouponSettingMutation builder.
func (m *AppCouponSettingMutation) Where(ps ...predicate.AppCouponSetting) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *AppCouponSettingMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (AppCouponSetting).
func (m *AppCouponSettingMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AppCouponSettingMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.app_id != nil {
		fields = append(fields, appcouponsetting.FieldAppID)
	}
	if m.domination_limit != nil {
		fields = append(fields, appcouponsetting.FieldDominationLimit)
	}
	if m.total_limit != nil {
		fields = append(fields, appcouponsetting.FieldTotalLimit)
	}
	if m.create_at != nil {
		fields = append(fields, appcouponsetting.FieldCreateAt)
	}
	if m.update_at != nil {
		fields = append(fields, appcouponsetting.FieldUpdateAt)
	}
	if m.delete_at != nil {
		fields = append(fields, appcouponsetting.FieldDeleteAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AppCouponSettingMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case appcouponsetting.FieldAppID:
		return m.AppID()
	case appcouponsetting.FieldDominationLimit:
		return m.DominationLimit()
	case appcouponsetting.FieldTotalLimit:
		return m.TotalLimit()
	case appcouponsetting.FieldCreateAt:
		return m.CreateAt()
	case appcouponsetting.FieldUpdateAt:
		return m.UpdateAt()
	case appcouponsetting.FieldDeleteAt:
		return m.DeleteAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AppCouponSettingMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case appcouponsetting.FieldAppID:
		return m.OldAppID(ctx)
	case appcouponsetting.FieldDominationLimit:
		return m.OldDominationLimit(ctx)
	case appcouponsetting.FieldTotalLimit:
		return m.OldTotalLimit(ctx)
	case appcouponsetting.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case appcouponsetting.FieldUpdateAt:
		return m.OldUpdateAt(ctx)
	case appcouponsetting.FieldDeleteAt:
		return m.OldDeleteAt(ctx)
	}
	return nil, fmt.Errorf("unknown AppCouponSetting field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AppCouponSettingMutation) SetField(name string, value ent.Value) error {
	switch name {
	case appcouponsetting.FieldAppID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case appcouponsetting.FieldDominationLimit:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDominationLimit(v)
		return nil
	case appcouponsetting.FieldTotalLimit:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTotalLimit(v)
		return nil
	case appcouponsetting.FieldCreateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateAt(v)
		return nil
	case appcouponsetting.FieldUpdateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateAt(v)
		return nil
	case appcouponsetting.FieldDeleteAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown AppCouponSetting field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AppCouponSettingMutation) AddedFields() []string {
	var fields []string
	if m.adddomination_limit != nil {
		fields = append(fields, appcouponsetting.FieldDominationLimit)
	}
	if m.addtotal_limit != nil {
		fields = append(fields, appcouponsetting.FieldTotalLimit)
	}
	if m.addcreate_at != nil {
		fields = append(fields, appcouponsetting.FieldCreateAt)
	}
	if m.addupdate_at != nil {
		fields = append(fields, appcouponsetting.FieldUpdateAt)
	}
	if m.adddelete_at != nil {
		fields = append(fields, appcouponsetting.FieldDeleteAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AppCouponSettingMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case appcouponsetting.FieldDominationLimit:
		return m.AddedDominationLimit()
	case appcouponsetting.FieldTotalLimit:
		return m.AddedTotalLimit()
	case appcouponsetting.FieldCreateAt:
		return m.AddedCreateAt()
	case appcouponsetting.FieldUpdateAt:
		return m.AddedUpdateAt()
	case appcouponsetting.FieldDeleteAt:
		return m.AddedDeleteAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AppCouponSettingMutation) AddField(name string, value ent.Value) error {
	switch name {
	case appcouponsetting.FieldDominationLimit:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDominationLimit(v)
		return nil
	case appcouponsetting.FieldTotalLimit:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTotalLimit(v)
		return nil
	case appcouponsetting.FieldCreateAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateAt(v)
		return nil
	case appcouponsetting.FieldUpdateAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateAt(v)
		return nil
	case appcouponsetting.FieldDeleteAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown AppCouponSetting numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AppCouponSettingMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AppCouponSettingMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AppCouponSettingMutation) ClearField(name string) error {
	return fmt.Errorf("unknown AppCouponSetting nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AppCouponSettingMutation) ResetField(name string) error {
	switch name {
	case appcouponsetting.FieldAppID:
		m.ResetAppID()
		return nil
	case appcouponsetting.FieldDominationLimit:
		m.ResetDominationLimit()
		return nil
	case appcouponsetting.FieldTotalLimit:
		m.ResetTotalLimit()
		return nil
	case appcouponsetting.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case appcouponsetting.FieldUpdateAt:
		m.ResetUpdateAt()
		return nil
	case appcouponsetting.FieldDeleteAt:
		m.ResetDeleteAt()
		return nil
	}
	return fmt.Errorf("unknown AppCouponSetting field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AppCouponSettingMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AppCouponSettingMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AppCouponSettingMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AppCouponSettingMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AppCouponSettingMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AppCouponSettingMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AppCouponSettingMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown AppCouponSetting unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AppCouponSettingMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown AppCouponSetting edge %s", name)
}

// AppInvitationSettingMutation represents an operation that mutates the AppInvitationSetting nodes in the graph.
type AppInvitationSettingMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	app_id        *uuid.UUID
	count         *uint32
	addcount      *int32
	discount      *uint32
	adddiscount   *int32
	create_at     *uint32
	addcreate_at  *int32
	update_at     *uint32
	addupdate_at  *int32
	delete_at     *uint32
	adddelete_at  *int32
	title         *string
	badge_large   *string
	badge_small   *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*AppInvitationSetting, error)
	predicates    []predicate.AppInvitationSetting
}

var _ ent.Mutation = (*AppInvitationSettingMutation)(nil)

// appinvitationsettingOption allows management of the mutation configuration using functional options.
type appinvitationsettingOption func(*AppInvitationSettingMutation)

// newAppInvitationSettingMutation creates new mutation for the AppInvitationSetting entity.
func newAppInvitationSettingMutation(c config, op Op, opts ...appinvitationsettingOption) *AppInvitationSettingMutation {
	m := &AppInvitationSettingMutation{
		config:        c,
		op:            op,
		typ:           TypeAppInvitationSetting,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAppInvitationSettingID sets the ID field of the mutation.
func withAppInvitationSettingID(id uuid.UUID) appinvitationsettingOption {
	return func(m *AppInvitationSettingMutation) {
		var (
			err   error
			once  sync.Once
			value *AppInvitationSetting
		)
		m.oldValue = func(ctx context.Context) (*AppInvitationSetting, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().AppInvitationSetting.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAppInvitationSetting sets the old AppInvitationSetting of the mutation.
func withAppInvitationSetting(node *AppInvitationSetting) appinvitationsettingOption {
	return func(m *AppInvitationSettingMutation) {
		m.oldValue = func(context.Context) (*AppInvitationSetting, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AppInvitationSettingMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AppInvitationSettingMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of AppInvitationSetting entities.
func (m *AppInvitationSettingMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AppInvitationSettingMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AppInvitationSettingMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().AppInvitationSetting.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAppID sets the "app_id" field.
func (m *AppInvitationSettingMutation) SetAppID(u uuid.UUID) {
	m.app_id = &u
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *AppInvitationSettingMutation) AppID() (r uuid.UUID, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the AppInvitationSetting entity.
// If the AppInvitationSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppInvitationSettingMutation) OldAppID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ResetAppID resets all changes to the "app_id" field.
func (m *AppInvitationSettingMutation) ResetAppID() {
	m.app_id = nil
}

// SetCount sets the "count" field.
func (m *AppInvitationSettingMutation) SetCount(u uint32) {
	m.count = &u
	m.addcount = nil
}

// Count returns the value of the "count" field in the mutation.
func (m *AppInvitationSettingMutation) Count() (r uint32, exists bool) {
	v := m.count
	if v == nil {
		return
	}
	return *v, true
}

// OldCount returns the old "count" field's value of the AppInvitationSetting entity.
// If the AppInvitationSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppInvitationSettingMutation) OldCount(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCount: %w", err)
	}
	return oldValue.Count, nil
}

// AddCount adds u to the "count" field.
func (m *AppInvitationSettingMutation) AddCount(u int32) {
	if m.addcount != nil {
		*m.addcount += u
	} else {
		m.addcount = &u
	}
}

// AddedCount returns the value that was added to the "count" field in this mutation.
func (m *AppInvitationSettingMutation) AddedCount() (r int32, exists bool) {
	v := m.addcount
	if v == nil {
		return
	}
	return *v, true
}

// ResetCount resets all changes to the "count" field.
func (m *AppInvitationSettingMutation) ResetCount() {
	m.count = nil
	m.addcount = nil
}

// SetDiscount sets the "discount" field.
func (m *AppInvitationSettingMutation) SetDiscount(u uint32) {
	m.discount = &u
	m.adddiscount = nil
}

// Discount returns the value of the "discount" field in the mutation.
func (m *AppInvitationSettingMutation) Discount() (r uint32, exists bool) {
	v := m.discount
	if v == nil {
		return
	}
	return *v, true
}

// OldDiscount returns the old "discount" field's value of the AppInvitationSetting entity.
// If the AppInvitationSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppInvitationSettingMutation) OldDiscount(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDiscount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDiscount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDiscount: %w", err)
	}
	return oldValue.Discount, nil
}

// AddDiscount adds u to the "discount" field.
func (m *AppInvitationSettingMutation) AddDiscount(u int32) {
	if m.adddiscount != nil {
		*m.adddiscount += u
	} else {
		m.adddiscount = &u
	}
}

// AddedDiscount returns the value that was added to the "discount" field in this mutation.
func (m *AppInvitationSettingMutation) AddedDiscount() (r int32, exists bool) {
	v := m.adddiscount
	if v == nil {
		return
	}
	return *v, true
}

// ResetDiscount resets all changes to the "discount" field.
func (m *AppInvitationSettingMutation) ResetDiscount() {
	m.discount = nil
	m.adddiscount = nil
}

// SetCreateAt sets the "create_at" field.
func (m *AppInvitationSettingMutation) SetCreateAt(u uint32) {
	m.create_at = &u
	m.addcreate_at = nil
}

// CreateAt returns the value of the "create_at" field in the mutation.
func (m *AppInvitationSettingMutation) CreateAt() (r uint32, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateAt returns the old "create_at" field's value of the AppInvitationSetting entity.
// If the AppInvitationSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppInvitationSettingMutation) OldCreateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}
	return oldValue.CreateAt, nil
}

// AddCreateAt adds u to the "create_at" field.
func (m *AppInvitationSettingMutation) AddCreateAt(u int32) {
	if m.addcreate_at != nil {
		*m.addcreate_at += u
	} else {
		m.addcreate_at = &u
	}
}

// AddedCreateAt returns the value that was added to the "create_at" field in this mutation.
func (m *AppInvitationSettingMutation) AddedCreateAt() (r int32, exists bool) {
	v := m.addcreate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateAt resets all changes to the "create_at" field.
func (m *AppInvitationSettingMutation) ResetCreateAt() {
	m.create_at = nil
	m.addcreate_at = nil
}

// SetUpdateAt sets the "update_at" field.
func (m *AppInvitationSettingMutation) SetUpdateAt(u uint32) {
	m.update_at = &u
	m.addupdate_at = nil
}

// UpdateAt returns the value of the "update_at" field in the mutation.
func (m *AppInvitationSettingMutation) UpdateAt() (r uint32, exists bool) {
	v := m.update_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateAt returns the old "update_at" field's value of the AppInvitationSetting entity.
// If the AppInvitationSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppInvitationSettingMutation) OldUpdateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateAt: %w", err)
	}
	return oldValue.UpdateAt, nil
}

// AddUpdateAt adds u to the "update_at" field.
func (m *AppInvitationSettingMutation) AddUpdateAt(u int32) {
	if m.addupdate_at != nil {
		*m.addupdate_at += u
	} else {
		m.addupdate_at = &u
	}
}

// AddedUpdateAt returns the value that was added to the "update_at" field in this mutation.
func (m *AppInvitationSettingMutation) AddedUpdateAt() (r int32, exists bool) {
	v := m.addupdate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateAt resets all changes to the "update_at" field.
func (m *AppInvitationSettingMutation) ResetUpdateAt() {
	m.update_at = nil
	m.addupdate_at = nil
}

// SetDeleteAt sets the "delete_at" field.
func (m *AppInvitationSettingMutation) SetDeleteAt(u uint32) {
	m.delete_at = &u
	m.adddelete_at = nil
}

// DeleteAt returns the value of the "delete_at" field in the mutation.
func (m *AppInvitationSettingMutation) DeleteAt() (r uint32, exists bool) {
	v := m.delete_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteAt returns the old "delete_at" field's value of the AppInvitationSetting entity.
// If the AppInvitationSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppInvitationSettingMutation) OldDeleteAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteAt: %w", err)
	}
	return oldValue.DeleteAt, nil
}

// AddDeleteAt adds u to the "delete_at" field.
func (m *AppInvitationSettingMutation) AddDeleteAt(u int32) {
	if m.adddelete_at != nil {
		*m.adddelete_at += u
	} else {
		m.adddelete_at = &u
	}
}

// AddedDeleteAt returns the value that was added to the "delete_at" field in this mutation.
func (m *AppInvitationSettingMutation) AddedDeleteAt() (r int32, exists bool) {
	v := m.adddelete_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeleteAt resets all changes to the "delete_at" field.
func (m *AppInvitationSettingMutation) ResetDeleteAt() {
	m.delete_at = nil
	m.adddelete_at = nil
}

// SetTitle sets the "title" field.
func (m *AppInvitationSettingMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *AppInvitationSettingMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the AppInvitationSetting entity.
// If the AppInvitationSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppInvitationSettingMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *AppInvitationSettingMutation) ResetTitle() {
	m.title = nil
}

// SetBadgeLarge sets the "badge_large" field.
func (m *AppInvitationSettingMutation) SetBadgeLarge(s string) {
	m.badge_large = &s
}

// BadgeLarge returns the value of the "badge_large" field in the mutation.
func (m *AppInvitationSettingMutation) BadgeLarge() (r string, exists bool) {
	v := m.badge_large
	if v == nil {
		return
	}
	return *v, true
}

// OldBadgeLarge returns the old "badge_large" field's value of the AppInvitationSetting entity.
// If the AppInvitationSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppInvitationSettingMutation) OldBadgeLarge(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBadgeLarge is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBadgeLarge requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBadgeLarge: %w", err)
	}
	return oldValue.BadgeLarge, nil
}

// ResetBadgeLarge resets all changes to the "badge_large" field.
func (m *AppInvitationSettingMutation) ResetBadgeLarge() {
	m.badge_large = nil
}

// SetBadgeSmall sets the "badge_small" field.
func (m *AppInvitationSettingMutation) SetBadgeSmall(s string) {
	m.badge_small = &s
}

// BadgeSmall returns the value of the "badge_small" field in the mutation.
func (m *AppInvitationSettingMutation) BadgeSmall() (r string, exists bool) {
	v := m.badge_small
	if v == nil {
		return
	}
	return *v, true
}

// OldBadgeSmall returns the old "badge_small" field's value of the AppInvitationSetting entity.
// If the AppInvitationSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppInvitationSettingMutation) OldBadgeSmall(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBadgeSmall is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBadgeSmall requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBadgeSmall: %w", err)
	}
	return oldValue.BadgeSmall, nil
}

// ResetBadgeSmall resets all changes to the "badge_small" field.
func (m *AppInvitationSettingMutation) ResetBadgeSmall() {
	m.badge_small = nil
}

// Where appends a list predicates to the AppInvitationSettingMutation builder.
func (m *AppInvitationSettingMutation) Where(ps ...predicate.AppInvitationSetting) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *AppInvitationSettingMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (AppInvitationSetting).
func (m *AppInvitationSettingMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AppInvitationSettingMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.app_id != nil {
		fields = append(fields, appinvitationsetting.FieldAppID)
	}
	if m.count != nil {
		fields = append(fields, appinvitationsetting.FieldCount)
	}
	if m.discount != nil {
		fields = append(fields, appinvitationsetting.FieldDiscount)
	}
	if m.create_at != nil {
		fields = append(fields, appinvitationsetting.FieldCreateAt)
	}
	if m.update_at != nil {
		fields = append(fields, appinvitationsetting.FieldUpdateAt)
	}
	if m.delete_at != nil {
		fields = append(fields, appinvitationsetting.FieldDeleteAt)
	}
	if m.title != nil {
		fields = append(fields, appinvitationsetting.FieldTitle)
	}
	if m.badge_large != nil {
		fields = append(fields, appinvitationsetting.FieldBadgeLarge)
	}
	if m.badge_small != nil {
		fields = append(fields, appinvitationsetting.FieldBadgeSmall)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AppInvitationSettingMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case appinvitationsetting.FieldAppID:
		return m.AppID()
	case appinvitationsetting.FieldCount:
		return m.Count()
	case appinvitationsetting.FieldDiscount:
		return m.Discount()
	case appinvitationsetting.FieldCreateAt:
		return m.CreateAt()
	case appinvitationsetting.FieldUpdateAt:
		return m.UpdateAt()
	case appinvitationsetting.FieldDeleteAt:
		return m.DeleteAt()
	case appinvitationsetting.FieldTitle:
		return m.Title()
	case appinvitationsetting.FieldBadgeLarge:
		return m.BadgeLarge()
	case appinvitationsetting.FieldBadgeSmall:
		return m.BadgeSmall()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AppInvitationSettingMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case appinvitationsetting.FieldAppID:
		return m.OldAppID(ctx)
	case appinvitationsetting.FieldCount:
		return m.OldCount(ctx)
	case appinvitationsetting.FieldDiscount:
		return m.OldDiscount(ctx)
	case appinvitationsetting.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case appinvitationsetting.FieldUpdateAt:
		return m.OldUpdateAt(ctx)
	case appinvitationsetting.FieldDeleteAt:
		return m.OldDeleteAt(ctx)
	case appinvitationsetting.FieldTitle:
		return m.OldTitle(ctx)
	case appinvitationsetting.FieldBadgeLarge:
		return m.OldBadgeLarge(ctx)
	case appinvitationsetting.FieldBadgeSmall:
		return m.OldBadgeSmall(ctx)
	}
	return nil, fmt.Errorf("unknown AppInvitationSetting field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AppInvitationSettingMutation) SetField(name string, value ent.Value) error {
	switch name {
	case appinvitationsetting.FieldAppID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case appinvitationsetting.FieldCount:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCount(v)
		return nil
	case appinvitationsetting.FieldDiscount:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDiscount(v)
		return nil
	case appinvitationsetting.FieldCreateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateAt(v)
		return nil
	case appinvitationsetting.FieldUpdateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateAt(v)
		return nil
	case appinvitationsetting.FieldDeleteAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteAt(v)
		return nil
	case appinvitationsetting.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case appinvitationsetting.FieldBadgeLarge:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBadgeLarge(v)
		return nil
	case appinvitationsetting.FieldBadgeSmall:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBadgeSmall(v)
		return nil
	}
	return fmt.Errorf("unknown AppInvitationSetting field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AppInvitationSettingMutation) AddedFields() []string {
	var fields []string
	if m.addcount != nil {
		fields = append(fields, appinvitationsetting.FieldCount)
	}
	if m.adddiscount != nil {
		fields = append(fields, appinvitationsetting.FieldDiscount)
	}
	if m.addcreate_at != nil {
		fields = append(fields, appinvitationsetting.FieldCreateAt)
	}
	if m.addupdate_at != nil {
		fields = append(fields, appinvitationsetting.FieldUpdateAt)
	}
	if m.adddelete_at != nil {
		fields = append(fields, appinvitationsetting.FieldDeleteAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AppInvitationSettingMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case appinvitationsetting.FieldCount:
		return m.AddedCount()
	case appinvitationsetting.FieldDiscount:
		return m.AddedDiscount()
	case appinvitationsetting.FieldCreateAt:
		return m.AddedCreateAt()
	case appinvitationsetting.FieldUpdateAt:
		return m.AddedUpdateAt()
	case appinvitationsetting.FieldDeleteAt:
		return m.AddedDeleteAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AppInvitationSettingMutation) AddField(name string, value ent.Value) error {
	switch name {
	case appinvitationsetting.FieldCount:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCount(v)
		return nil
	case appinvitationsetting.FieldDiscount:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDiscount(v)
		return nil
	case appinvitationsetting.FieldCreateAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateAt(v)
		return nil
	case appinvitationsetting.FieldUpdateAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateAt(v)
		return nil
	case appinvitationsetting.FieldDeleteAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown AppInvitationSetting numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AppInvitationSettingMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AppInvitationSettingMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AppInvitationSettingMutation) ClearField(name string) error {
	return fmt.Errorf("unknown AppInvitationSetting nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AppInvitationSettingMutation) ResetField(name string) error {
	switch name {
	case appinvitationsetting.FieldAppID:
		m.ResetAppID()
		return nil
	case appinvitationsetting.FieldCount:
		m.ResetCount()
		return nil
	case appinvitationsetting.FieldDiscount:
		m.ResetDiscount()
		return nil
	case appinvitationsetting.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case appinvitationsetting.FieldUpdateAt:
		m.ResetUpdateAt()
		return nil
	case appinvitationsetting.FieldDeleteAt:
		m.ResetDeleteAt()
		return nil
	case appinvitationsetting.FieldTitle:
		m.ResetTitle()
		return nil
	case appinvitationsetting.FieldBadgeLarge:
		m.ResetBadgeLarge()
		return nil
	case appinvitationsetting.FieldBadgeSmall:
		m.ResetBadgeSmall()
		return nil
	}
	return fmt.Errorf("unknown AppInvitationSetting field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AppInvitationSettingMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AppInvitationSettingMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AppInvitationSettingMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AppInvitationSettingMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AppInvitationSettingMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AppInvitationSettingMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AppInvitationSettingMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown AppInvitationSetting unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AppInvitationSettingMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown AppInvitationSetting edge %s", name)
}

// AppPurchaseAmountSettingMutation represents an operation that mutates the AppPurchaseAmountSetting nodes in the graph.
type AppPurchaseAmountSettingMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	app_id        *uuid.UUID
	title         *string
	badge_large   *string
	badge_small   *string
	amount        *uint64
	addamount     *int64
	percent       *uint32
	addpercent    *int32
	create_at     *uint32
	addcreate_at  *int32
	update_at     *uint32
	addupdate_at  *int32
	delete_at     *uint32
	adddelete_at  *int32
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*AppPurchaseAmountSetting, error)
	predicates    []predicate.AppPurchaseAmountSetting
}

var _ ent.Mutation = (*AppPurchaseAmountSettingMutation)(nil)

// apppurchaseamountsettingOption allows management of the mutation configuration using functional options.
type apppurchaseamountsettingOption func(*AppPurchaseAmountSettingMutation)

// newAppPurchaseAmountSettingMutation creates new mutation for the AppPurchaseAmountSetting entity.
func newAppPurchaseAmountSettingMutation(c config, op Op, opts ...apppurchaseamountsettingOption) *AppPurchaseAmountSettingMutation {
	m := &AppPurchaseAmountSettingMutation{
		config:        c,
		op:            op,
		typ:           TypeAppPurchaseAmountSetting,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAppPurchaseAmountSettingID sets the ID field of the mutation.
func withAppPurchaseAmountSettingID(id uuid.UUID) apppurchaseamountsettingOption {
	return func(m *AppPurchaseAmountSettingMutation) {
		var (
			err   error
			once  sync.Once
			value *AppPurchaseAmountSetting
		)
		m.oldValue = func(ctx context.Context) (*AppPurchaseAmountSetting, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().AppPurchaseAmountSetting.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAppPurchaseAmountSetting sets the old AppPurchaseAmountSetting of the mutation.
func withAppPurchaseAmountSetting(node *AppPurchaseAmountSetting) apppurchaseamountsettingOption {
	return func(m *AppPurchaseAmountSettingMutation) {
		m.oldValue = func(context.Context) (*AppPurchaseAmountSetting, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AppPurchaseAmountSettingMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AppPurchaseAmountSettingMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of AppPurchaseAmountSetting entities.
func (m *AppPurchaseAmountSettingMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AppPurchaseAmountSettingMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AppPurchaseAmountSettingMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().AppPurchaseAmountSetting.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAppID sets the "app_id" field.
func (m *AppPurchaseAmountSettingMutation) SetAppID(u uuid.UUID) {
	m.app_id = &u
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *AppPurchaseAmountSettingMutation) AppID() (r uuid.UUID, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the AppPurchaseAmountSetting entity.
// If the AppPurchaseAmountSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppPurchaseAmountSettingMutation) OldAppID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ResetAppID resets all changes to the "app_id" field.
func (m *AppPurchaseAmountSettingMutation) ResetAppID() {
	m.app_id = nil
}

// SetTitle sets the "title" field.
func (m *AppPurchaseAmountSettingMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *AppPurchaseAmountSettingMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the AppPurchaseAmountSetting entity.
// If the AppPurchaseAmountSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppPurchaseAmountSettingMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *AppPurchaseAmountSettingMutation) ResetTitle() {
	m.title = nil
}

// SetBadgeLarge sets the "badge_large" field.
func (m *AppPurchaseAmountSettingMutation) SetBadgeLarge(s string) {
	m.badge_large = &s
}

// BadgeLarge returns the value of the "badge_large" field in the mutation.
func (m *AppPurchaseAmountSettingMutation) BadgeLarge() (r string, exists bool) {
	v := m.badge_large
	if v == nil {
		return
	}
	return *v, true
}

// OldBadgeLarge returns the old "badge_large" field's value of the AppPurchaseAmountSetting entity.
// If the AppPurchaseAmountSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppPurchaseAmountSettingMutation) OldBadgeLarge(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBadgeLarge is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBadgeLarge requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBadgeLarge: %w", err)
	}
	return oldValue.BadgeLarge, nil
}

// ResetBadgeLarge resets all changes to the "badge_large" field.
func (m *AppPurchaseAmountSettingMutation) ResetBadgeLarge() {
	m.badge_large = nil
}

// SetBadgeSmall sets the "badge_small" field.
func (m *AppPurchaseAmountSettingMutation) SetBadgeSmall(s string) {
	m.badge_small = &s
}

// BadgeSmall returns the value of the "badge_small" field in the mutation.
func (m *AppPurchaseAmountSettingMutation) BadgeSmall() (r string, exists bool) {
	v := m.badge_small
	if v == nil {
		return
	}
	return *v, true
}

// OldBadgeSmall returns the old "badge_small" field's value of the AppPurchaseAmountSetting entity.
// If the AppPurchaseAmountSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppPurchaseAmountSettingMutation) OldBadgeSmall(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBadgeSmall is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBadgeSmall requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBadgeSmall: %w", err)
	}
	return oldValue.BadgeSmall, nil
}

// ResetBadgeSmall resets all changes to the "badge_small" field.
func (m *AppPurchaseAmountSettingMutation) ResetBadgeSmall() {
	m.badge_small = nil
}

// SetAmount sets the "amount" field.
func (m *AppPurchaseAmountSettingMutation) SetAmount(u uint64) {
	m.amount = &u
	m.addamount = nil
}

// Amount returns the value of the "amount" field in the mutation.
func (m *AppPurchaseAmountSettingMutation) Amount() (r uint64, exists bool) {
	v := m.amount
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount returns the old "amount" field's value of the AppPurchaseAmountSetting entity.
// If the AppPurchaseAmountSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppPurchaseAmountSettingMutation) OldAmount(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount: %w", err)
	}
	return oldValue.Amount, nil
}

// AddAmount adds u to the "amount" field.
func (m *AppPurchaseAmountSettingMutation) AddAmount(u int64) {
	if m.addamount != nil {
		*m.addamount += u
	} else {
		m.addamount = &u
	}
}

// AddedAmount returns the value that was added to the "amount" field in this mutation.
func (m *AppPurchaseAmountSettingMutation) AddedAmount() (r int64, exists bool) {
	v := m.addamount
	if v == nil {
		return
	}
	return *v, true
}

// ResetAmount resets all changes to the "amount" field.
func (m *AppPurchaseAmountSettingMutation) ResetAmount() {
	m.amount = nil
	m.addamount = nil
}

// SetPercent sets the "percent" field.
func (m *AppPurchaseAmountSettingMutation) SetPercent(u uint32) {
	m.percent = &u
	m.addpercent = nil
}

// Percent returns the value of the "percent" field in the mutation.
func (m *AppPurchaseAmountSettingMutation) Percent() (r uint32, exists bool) {
	v := m.percent
	if v == nil {
		return
	}
	return *v, true
}

// OldPercent returns the old "percent" field's value of the AppPurchaseAmountSetting entity.
// If the AppPurchaseAmountSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppPurchaseAmountSettingMutation) OldPercent(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPercent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPercent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPercent: %w", err)
	}
	return oldValue.Percent, nil
}

// AddPercent adds u to the "percent" field.
func (m *AppPurchaseAmountSettingMutation) AddPercent(u int32) {
	if m.addpercent != nil {
		*m.addpercent += u
	} else {
		m.addpercent = &u
	}
}

// AddedPercent returns the value that was added to the "percent" field in this mutation.
func (m *AppPurchaseAmountSettingMutation) AddedPercent() (r int32, exists bool) {
	v := m.addpercent
	if v == nil {
		return
	}
	return *v, true
}

// ResetPercent resets all changes to the "percent" field.
func (m *AppPurchaseAmountSettingMutation) ResetPercent() {
	m.percent = nil
	m.addpercent = nil
}

// SetCreateAt sets the "create_at" field.
func (m *AppPurchaseAmountSettingMutation) SetCreateAt(u uint32) {
	m.create_at = &u
	m.addcreate_at = nil
}

// CreateAt returns the value of the "create_at" field in the mutation.
func (m *AppPurchaseAmountSettingMutation) CreateAt() (r uint32, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateAt returns the old "create_at" field's value of the AppPurchaseAmountSetting entity.
// If the AppPurchaseAmountSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppPurchaseAmountSettingMutation) OldCreateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}
	return oldValue.CreateAt, nil
}

// AddCreateAt adds u to the "create_at" field.
func (m *AppPurchaseAmountSettingMutation) AddCreateAt(u int32) {
	if m.addcreate_at != nil {
		*m.addcreate_at += u
	} else {
		m.addcreate_at = &u
	}
}

// AddedCreateAt returns the value that was added to the "create_at" field in this mutation.
func (m *AppPurchaseAmountSettingMutation) AddedCreateAt() (r int32, exists bool) {
	v := m.addcreate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateAt resets all changes to the "create_at" field.
func (m *AppPurchaseAmountSettingMutation) ResetCreateAt() {
	m.create_at = nil
	m.addcreate_at = nil
}

// SetUpdateAt sets the "update_at" field.
func (m *AppPurchaseAmountSettingMutation) SetUpdateAt(u uint32) {
	m.update_at = &u
	m.addupdate_at = nil
}

// UpdateAt returns the value of the "update_at" field in the mutation.
func (m *AppPurchaseAmountSettingMutation) UpdateAt() (r uint32, exists bool) {
	v := m.update_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateAt returns the old "update_at" field's value of the AppPurchaseAmountSetting entity.
// If the AppPurchaseAmountSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppPurchaseAmountSettingMutation) OldUpdateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateAt: %w", err)
	}
	return oldValue.UpdateAt, nil
}

// AddUpdateAt adds u to the "update_at" field.
func (m *AppPurchaseAmountSettingMutation) AddUpdateAt(u int32) {
	if m.addupdate_at != nil {
		*m.addupdate_at += u
	} else {
		m.addupdate_at = &u
	}
}

// AddedUpdateAt returns the value that was added to the "update_at" field in this mutation.
func (m *AppPurchaseAmountSettingMutation) AddedUpdateAt() (r int32, exists bool) {
	v := m.addupdate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateAt resets all changes to the "update_at" field.
func (m *AppPurchaseAmountSettingMutation) ResetUpdateAt() {
	m.update_at = nil
	m.addupdate_at = nil
}

// SetDeleteAt sets the "delete_at" field.
func (m *AppPurchaseAmountSettingMutation) SetDeleteAt(u uint32) {
	m.delete_at = &u
	m.adddelete_at = nil
}

// DeleteAt returns the value of the "delete_at" field in the mutation.
func (m *AppPurchaseAmountSettingMutation) DeleteAt() (r uint32, exists bool) {
	v := m.delete_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteAt returns the old "delete_at" field's value of the AppPurchaseAmountSetting entity.
// If the AppPurchaseAmountSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppPurchaseAmountSettingMutation) OldDeleteAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteAt: %w", err)
	}
	return oldValue.DeleteAt, nil
}

// AddDeleteAt adds u to the "delete_at" field.
func (m *AppPurchaseAmountSettingMutation) AddDeleteAt(u int32) {
	if m.adddelete_at != nil {
		*m.adddelete_at += u
	} else {
		m.adddelete_at = &u
	}
}

// AddedDeleteAt returns the value that was added to the "delete_at" field in this mutation.
func (m *AppPurchaseAmountSettingMutation) AddedDeleteAt() (r int32, exists bool) {
	v := m.adddelete_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeleteAt resets all changes to the "delete_at" field.
func (m *AppPurchaseAmountSettingMutation) ResetDeleteAt() {
	m.delete_at = nil
	m.adddelete_at = nil
}

// Where appends a list predicates to the AppPurchaseAmountSettingMutation builder.
func (m *AppPurchaseAmountSettingMutation) Where(ps ...predicate.AppPurchaseAmountSetting) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *AppPurchaseAmountSettingMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (AppPurchaseAmountSetting).
func (m *AppPurchaseAmountSettingMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AppPurchaseAmountSettingMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.app_id != nil {
		fields = append(fields, apppurchaseamountsetting.FieldAppID)
	}
	if m.title != nil {
		fields = append(fields, apppurchaseamountsetting.FieldTitle)
	}
	if m.badge_large != nil {
		fields = append(fields, apppurchaseamountsetting.FieldBadgeLarge)
	}
	if m.badge_small != nil {
		fields = append(fields, apppurchaseamountsetting.FieldBadgeSmall)
	}
	if m.amount != nil {
		fields = append(fields, apppurchaseamountsetting.FieldAmount)
	}
	if m.percent != nil {
		fields = append(fields, apppurchaseamountsetting.FieldPercent)
	}
	if m.create_at != nil {
		fields = append(fields, apppurchaseamountsetting.FieldCreateAt)
	}
	if m.update_at != nil {
		fields = append(fields, apppurchaseamountsetting.FieldUpdateAt)
	}
	if m.delete_at != nil {
		fields = append(fields, apppurchaseamountsetting.FieldDeleteAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AppPurchaseAmountSettingMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case apppurchaseamountsetting.FieldAppID:
		return m.AppID()
	case apppurchaseamountsetting.FieldTitle:
		return m.Title()
	case apppurchaseamountsetting.FieldBadgeLarge:
		return m.BadgeLarge()
	case apppurchaseamountsetting.FieldBadgeSmall:
		return m.BadgeSmall()
	case apppurchaseamountsetting.FieldAmount:
		return m.Amount()
	case apppurchaseamountsetting.FieldPercent:
		return m.Percent()
	case apppurchaseamountsetting.FieldCreateAt:
		return m.CreateAt()
	case apppurchaseamountsetting.FieldUpdateAt:
		return m.UpdateAt()
	case apppurchaseamountsetting.FieldDeleteAt:
		return m.DeleteAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AppPurchaseAmountSettingMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case apppurchaseamountsetting.FieldAppID:
		return m.OldAppID(ctx)
	case apppurchaseamountsetting.FieldTitle:
		return m.OldTitle(ctx)
	case apppurchaseamountsetting.FieldBadgeLarge:
		return m.OldBadgeLarge(ctx)
	case apppurchaseamountsetting.FieldBadgeSmall:
		return m.OldBadgeSmall(ctx)
	case apppurchaseamountsetting.FieldAmount:
		return m.OldAmount(ctx)
	case apppurchaseamountsetting.FieldPercent:
		return m.OldPercent(ctx)
	case apppurchaseamountsetting.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case apppurchaseamountsetting.FieldUpdateAt:
		return m.OldUpdateAt(ctx)
	case apppurchaseamountsetting.FieldDeleteAt:
		return m.OldDeleteAt(ctx)
	}
	return nil, fmt.Errorf("unknown AppPurchaseAmountSetting field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AppPurchaseAmountSettingMutation) SetField(name string, value ent.Value) error {
	switch name {
	case apppurchaseamountsetting.FieldAppID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case apppurchaseamountsetting.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case apppurchaseamountsetting.FieldBadgeLarge:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBadgeLarge(v)
		return nil
	case apppurchaseamountsetting.FieldBadgeSmall:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBadgeSmall(v)
		return nil
	case apppurchaseamountsetting.FieldAmount:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount(v)
		return nil
	case apppurchaseamountsetting.FieldPercent:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPercent(v)
		return nil
	case apppurchaseamountsetting.FieldCreateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateAt(v)
		return nil
	case apppurchaseamountsetting.FieldUpdateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateAt(v)
		return nil
	case apppurchaseamountsetting.FieldDeleteAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown AppPurchaseAmountSetting field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AppPurchaseAmountSettingMutation) AddedFields() []string {
	var fields []string
	if m.addamount != nil {
		fields = append(fields, apppurchaseamountsetting.FieldAmount)
	}
	if m.addpercent != nil {
		fields = append(fields, apppurchaseamountsetting.FieldPercent)
	}
	if m.addcreate_at != nil {
		fields = append(fields, apppurchaseamountsetting.FieldCreateAt)
	}
	if m.addupdate_at != nil {
		fields = append(fields, apppurchaseamountsetting.FieldUpdateAt)
	}
	if m.adddelete_at != nil {
		fields = append(fields, apppurchaseamountsetting.FieldDeleteAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AppPurchaseAmountSettingMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case apppurchaseamountsetting.FieldAmount:
		return m.AddedAmount()
	case apppurchaseamountsetting.FieldPercent:
		return m.AddedPercent()
	case apppurchaseamountsetting.FieldCreateAt:
		return m.AddedCreateAt()
	case apppurchaseamountsetting.FieldUpdateAt:
		return m.AddedUpdateAt()
	case apppurchaseamountsetting.FieldDeleteAt:
		return m.AddedDeleteAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AppPurchaseAmountSettingMutation) AddField(name string, value ent.Value) error {
	switch name {
	case apppurchaseamountsetting.FieldAmount:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAmount(v)
		return nil
	case apppurchaseamountsetting.FieldPercent:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPercent(v)
		return nil
	case apppurchaseamountsetting.FieldCreateAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateAt(v)
		return nil
	case apppurchaseamountsetting.FieldUpdateAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateAt(v)
		return nil
	case apppurchaseamountsetting.FieldDeleteAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown AppPurchaseAmountSetting numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AppPurchaseAmountSettingMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AppPurchaseAmountSettingMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AppPurchaseAmountSettingMutation) ClearField(name string) error {
	return fmt.Errorf("unknown AppPurchaseAmountSetting nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AppPurchaseAmountSettingMutation) ResetField(name string) error {
	switch name {
	case apppurchaseamountsetting.FieldAppID:
		m.ResetAppID()
		return nil
	case apppurchaseamountsetting.FieldTitle:
		m.ResetTitle()
		return nil
	case apppurchaseamountsetting.FieldBadgeLarge:
		m.ResetBadgeLarge()
		return nil
	case apppurchaseamountsetting.FieldBadgeSmall:
		m.ResetBadgeSmall()
		return nil
	case apppurchaseamountsetting.FieldAmount:
		m.ResetAmount()
		return nil
	case apppurchaseamountsetting.FieldPercent:
		m.ResetPercent()
		return nil
	case apppurchaseamountsetting.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case apppurchaseamountsetting.FieldUpdateAt:
		m.ResetUpdateAt()
		return nil
	case apppurchaseamountsetting.FieldDeleteAt:
		m.ResetDeleteAt()
		return nil
	}
	return fmt.Errorf("unknown AppPurchaseAmountSetting field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AppPurchaseAmountSettingMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AppPurchaseAmountSettingMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AppPurchaseAmountSettingMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AppPurchaseAmountSettingMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AppPurchaseAmountSettingMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AppPurchaseAmountSettingMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AppPurchaseAmountSettingMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown AppPurchaseAmountSetting unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AppPurchaseAmountSettingMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown AppPurchaseAmountSetting edge %s", name)
}

// AppUserInvitationSettingMutation represents an operation that mutates the AppUserInvitationSetting nodes in the graph.
type AppUserInvitationSettingMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	app_id        *uuid.UUID
	user_id       *uuid.UUID
	count         *uint32
	addcount      *int32
	discount      *uint32
	adddiscount   *int32
	create_at     *uint32
	addcreate_at  *int32
	update_at     *uint32
	addupdate_at  *int32
	delete_at     *uint32
	adddelete_at  *int32
	title         *string
	badge_large   *string
	badge_small   *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*AppUserInvitationSetting, error)
	predicates    []predicate.AppUserInvitationSetting
}

var _ ent.Mutation = (*AppUserInvitationSettingMutation)(nil)

// appuserinvitationsettingOption allows management of the mutation configuration using functional options.
type appuserinvitationsettingOption func(*AppUserInvitationSettingMutation)

// newAppUserInvitationSettingMutation creates new mutation for the AppUserInvitationSetting entity.
func newAppUserInvitationSettingMutation(c config, op Op, opts ...appuserinvitationsettingOption) *AppUserInvitationSettingMutation {
	m := &AppUserInvitationSettingMutation{
		config:        c,
		op:            op,
		typ:           TypeAppUserInvitationSetting,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAppUserInvitationSettingID sets the ID field of the mutation.
func withAppUserInvitationSettingID(id uuid.UUID) appuserinvitationsettingOption {
	return func(m *AppUserInvitationSettingMutation) {
		var (
			err   error
			once  sync.Once
			value *AppUserInvitationSetting
		)
		m.oldValue = func(ctx context.Context) (*AppUserInvitationSetting, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().AppUserInvitationSetting.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAppUserInvitationSetting sets the old AppUserInvitationSetting of the mutation.
func withAppUserInvitationSetting(node *AppUserInvitationSetting) appuserinvitationsettingOption {
	return func(m *AppUserInvitationSettingMutation) {
		m.oldValue = func(context.Context) (*AppUserInvitationSetting, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AppUserInvitationSettingMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AppUserInvitationSettingMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of AppUserInvitationSetting entities.
func (m *AppUserInvitationSettingMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AppUserInvitationSettingMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AppUserInvitationSettingMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().AppUserInvitationSetting.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAppID sets the "app_id" field.
func (m *AppUserInvitationSettingMutation) SetAppID(u uuid.UUID) {
	m.app_id = &u
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *AppUserInvitationSettingMutation) AppID() (r uuid.UUID, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the AppUserInvitationSetting entity.
// If the AppUserInvitationSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppUserInvitationSettingMutation) OldAppID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ResetAppID resets all changes to the "app_id" field.
func (m *AppUserInvitationSettingMutation) ResetAppID() {
	m.app_id = nil
}

// SetUserID sets the "user_id" field.
func (m *AppUserInvitationSettingMutation) SetUserID(u uuid.UUID) {
	m.user_id = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *AppUserInvitationSettingMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the AppUserInvitationSetting entity.
// If the AppUserInvitationSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppUserInvitationSettingMutation) OldUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *AppUserInvitationSettingMutation) ResetUserID() {
	m.user_id = nil
}

// SetCount sets the "count" field.
func (m *AppUserInvitationSettingMutation) SetCount(u uint32) {
	m.count = &u
	m.addcount = nil
}

// Count returns the value of the "count" field in the mutation.
func (m *AppUserInvitationSettingMutation) Count() (r uint32, exists bool) {
	v := m.count
	if v == nil {
		return
	}
	return *v, true
}

// OldCount returns the old "count" field's value of the AppUserInvitationSetting entity.
// If the AppUserInvitationSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppUserInvitationSettingMutation) OldCount(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCount: %w", err)
	}
	return oldValue.Count, nil
}

// AddCount adds u to the "count" field.
func (m *AppUserInvitationSettingMutation) AddCount(u int32) {
	if m.addcount != nil {
		*m.addcount += u
	} else {
		m.addcount = &u
	}
}

// AddedCount returns the value that was added to the "count" field in this mutation.
func (m *AppUserInvitationSettingMutation) AddedCount() (r int32, exists bool) {
	v := m.addcount
	if v == nil {
		return
	}
	return *v, true
}

// ResetCount resets all changes to the "count" field.
func (m *AppUserInvitationSettingMutation) ResetCount() {
	m.count = nil
	m.addcount = nil
}

// SetDiscount sets the "discount" field.
func (m *AppUserInvitationSettingMutation) SetDiscount(u uint32) {
	m.discount = &u
	m.adddiscount = nil
}

// Discount returns the value of the "discount" field in the mutation.
func (m *AppUserInvitationSettingMutation) Discount() (r uint32, exists bool) {
	v := m.discount
	if v == nil {
		return
	}
	return *v, true
}

// OldDiscount returns the old "discount" field's value of the AppUserInvitationSetting entity.
// If the AppUserInvitationSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppUserInvitationSettingMutation) OldDiscount(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDiscount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDiscount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDiscount: %w", err)
	}
	return oldValue.Discount, nil
}

// AddDiscount adds u to the "discount" field.
func (m *AppUserInvitationSettingMutation) AddDiscount(u int32) {
	if m.adddiscount != nil {
		*m.adddiscount += u
	} else {
		m.adddiscount = &u
	}
}

// AddedDiscount returns the value that was added to the "discount" field in this mutation.
func (m *AppUserInvitationSettingMutation) AddedDiscount() (r int32, exists bool) {
	v := m.adddiscount
	if v == nil {
		return
	}
	return *v, true
}

// ResetDiscount resets all changes to the "discount" field.
func (m *AppUserInvitationSettingMutation) ResetDiscount() {
	m.discount = nil
	m.adddiscount = nil
}

// SetCreateAt sets the "create_at" field.
func (m *AppUserInvitationSettingMutation) SetCreateAt(u uint32) {
	m.create_at = &u
	m.addcreate_at = nil
}

// CreateAt returns the value of the "create_at" field in the mutation.
func (m *AppUserInvitationSettingMutation) CreateAt() (r uint32, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateAt returns the old "create_at" field's value of the AppUserInvitationSetting entity.
// If the AppUserInvitationSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppUserInvitationSettingMutation) OldCreateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}
	return oldValue.CreateAt, nil
}

// AddCreateAt adds u to the "create_at" field.
func (m *AppUserInvitationSettingMutation) AddCreateAt(u int32) {
	if m.addcreate_at != nil {
		*m.addcreate_at += u
	} else {
		m.addcreate_at = &u
	}
}

// AddedCreateAt returns the value that was added to the "create_at" field in this mutation.
func (m *AppUserInvitationSettingMutation) AddedCreateAt() (r int32, exists bool) {
	v := m.addcreate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateAt resets all changes to the "create_at" field.
func (m *AppUserInvitationSettingMutation) ResetCreateAt() {
	m.create_at = nil
	m.addcreate_at = nil
}

// SetUpdateAt sets the "update_at" field.
func (m *AppUserInvitationSettingMutation) SetUpdateAt(u uint32) {
	m.update_at = &u
	m.addupdate_at = nil
}

// UpdateAt returns the value of the "update_at" field in the mutation.
func (m *AppUserInvitationSettingMutation) UpdateAt() (r uint32, exists bool) {
	v := m.update_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateAt returns the old "update_at" field's value of the AppUserInvitationSetting entity.
// If the AppUserInvitationSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppUserInvitationSettingMutation) OldUpdateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateAt: %w", err)
	}
	return oldValue.UpdateAt, nil
}

// AddUpdateAt adds u to the "update_at" field.
func (m *AppUserInvitationSettingMutation) AddUpdateAt(u int32) {
	if m.addupdate_at != nil {
		*m.addupdate_at += u
	} else {
		m.addupdate_at = &u
	}
}

// AddedUpdateAt returns the value that was added to the "update_at" field in this mutation.
func (m *AppUserInvitationSettingMutation) AddedUpdateAt() (r int32, exists bool) {
	v := m.addupdate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateAt resets all changes to the "update_at" field.
func (m *AppUserInvitationSettingMutation) ResetUpdateAt() {
	m.update_at = nil
	m.addupdate_at = nil
}

// SetDeleteAt sets the "delete_at" field.
func (m *AppUserInvitationSettingMutation) SetDeleteAt(u uint32) {
	m.delete_at = &u
	m.adddelete_at = nil
}

// DeleteAt returns the value of the "delete_at" field in the mutation.
func (m *AppUserInvitationSettingMutation) DeleteAt() (r uint32, exists bool) {
	v := m.delete_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteAt returns the old "delete_at" field's value of the AppUserInvitationSetting entity.
// If the AppUserInvitationSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppUserInvitationSettingMutation) OldDeleteAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteAt: %w", err)
	}
	return oldValue.DeleteAt, nil
}

// AddDeleteAt adds u to the "delete_at" field.
func (m *AppUserInvitationSettingMutation) AddDeleteAt(u int32) {
	if m.adddelete_at != nil {
		*m.adddelete_at += u
	} else {
		m.adddelete_at = &u
	}
}

// AddedDeleteAt returns the value that was added to the "delete_at" field in this mutation.
func (m *AppUserInvitationSettingMutation) AddedDeleteAt() (r int32, exists bool) {
	v := m.adddelete_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeleteAt resets all changes to the "delete_at" field.
func (m *AppUserInvitationSettingMutation) ResetDeleteAt() {
	m.delete_at = nil
	m.adddelete_at = nil
}

// SetTitle sets the "title" field.
func (m *AppUserInvitationSettingMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *AppUserInvitationSettingMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the AppUserInvitationSetting entity.
// If the AppUserInvitationSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppUserInvitationSettingMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *AppUserInvitationSettingMutation) ResetTitle() {
	m.title = nil
}

// SetBadgeLarge sets the "badge_large" field.
func (m *AppUserInvitationSettingMutation) SetBadgeLarge(s string) {
	m.badge_large = &s
}

// BadgeLarge returns the value of the "badge_large" field in the mutation.
func (m *AppUserInvitationSettingMutation) BadgeLarge() (r string, exists bool) {
	v := m.badge_large
	if v == nil {
		return
	}
	return *v, true
}

// OldBadgeLarge returns the old "badge_large" field's value of the AppUserInvitationSetting entity.
// If the AppUserInvitationSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppUserInvitationSettingMutation) OldBadgeLarge(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBadgeLarge is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBadgeLarge requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBadgeLarge: %w", err)
	}
	return oldValue.BadgeLarge, nil
}

// ResetBadgeLarge resets all changes to the "badge_large" field.
func (m *AppUserInvitationSettingMutation) ResetBadgeLarge() {
	m.badge_large = nil
}

// SetBadgeSmall sets the "badge_small" field.
func (m *AppUserInvitationSettingMutation) SetBadgeSmall(s string) {
	m.badge_small = &s
}

// BadgeSmall returns the value of the "badge_small" field in the mutation.
func (m *AppUserInvitationSettingMutation) BadgeSmall() (r string, exists bool) {
	v := m.badge_small
	if v == nil {
		return
	}
	return *v, true
}

// OldBadgeSmall returns the old "badge_small" field's value of the AppUserInvitationSetting entity.
// If the AppUserInvitationSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppUserInvitationSettingMutation) OldBadgeSmall(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBadgeSmall is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBadgeSmall requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBadgeSmall: %w", err)
	}
	return oldValue.BadgeSmall, nil
}

// ResetBadgeSmall resets all changes to the "badge_small" field.
func (m *AppUserInvitationSettingMutation) ResetBadgeSmall() {
	m.badge_small = nil
}

// Where appends a list predicates to the AppUserInvitationSettingMutation builder.
func (m *AppUserInvitationSettingMutation) Where(ps ...predicate.AppUserInvitationSetting) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *AppUserInvitationSettingMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (AppUserInvitationSetting).
func (m *AppUserInvitationSettingMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AppUserInvitationSettingMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.app_id != nil {
		fields = append(fields, appuserinvitationsetting.FieldAppID)
	}
	if m.user_id != nil {
		fields = append(fields, appuserinvitationsetting.FieldUserID)
	}
	if m.count != nil {
		fields = append(fields, appuserinvitationsetting.FieldCount)
	}
	if m.discount != nil {
		fields = append(fields, appuserinvitationsetting.FieldDiscount)
	}
	if m.create_at != nil {
		fields = append(fields, appuserinvitationsetting.FieldCreateAt)
	}
	if m.update_at != nil {
		fields = append(fields, appuserinvitationsetting.FieldUpdateAt)
	}
	if m.delete_at != nil {
		fields = append(fields, appuserinvitationsetting.FieldDeleteAt)
	}
	if m.title != nil {
		fields = append(fields, appuserinvitationsetting.FieldTitle)
	}
	if m.badge_large != nil {
		fields = append(fields, appuserinvitationsetting.FieldBadgeLarge)
	}
	if m.badge_small != nil {
		fields = append(fields, appuserinvitationsetting.FieldBadgeSmall)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AppUserInvitationSettingMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case appuserinvitationsetting.FieldAppID:
		return m.AppID()
	case appuserinvitationsetting.FieldUserID:
		return m.UserID()
	case appuserinvitationsetting.FieldCount:
		return m.Count()
	case appuserinvitationsetting.FieldDiscount:
		return m.Discount()
	case appuserinvitationsetting.FieldCreateAt:
		return m.CreateAt()
	case appuserinvitationsetting.FieldUpdateAt:
		return m.UpdateAt()
	case appuserinvitationsetting.FieldDeleteAt:
		return m.DeleteAt()
	case appuserinvitationsetting.FieldTitle:
		return m.Title()
	case appuserinvitationsetting.FieldBadgeLarge:
		return m.BadgeLarge()
	case appuserinvitationsetting.FieldBadgeSmall:
		return m.BadgeSmall()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AppUserInvitationSettingMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case appuserinvitationsetting.FieldAppID:
		return m.OldAppID(ctx)
	case appuserinvitationsetting.FieldUserID:
		return m.OldUserID(ctx)
	case appuserinvitationsetting.FieldCount:
		return m.OldCount(ctx)
	case appuserinvitationsetting.FieldDiscount:
		return m.OldDiscount(ctx)
	case appuserinvitationsetting.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case appuserinvitationsetting.FieldUpdateAt:
		return m.OldUpdateAt(ctx)
	case appuserinvitationsetting.FieldDeleteAt:
		return m.OldDeleteAt(ctx)
	case appuserinvitationsetting.FieldTitle:
		return m.OldTitle(ctx)
	case appuserinvitationsetting.FieldBadgeLarge:
		return m.OldBadgeLarge(ctx)
	case appuserinvitationsetting.FieldBadgeSmall:
		return m.OldBadgeSmall(ctx)
	}
	return nil, fmt.Errorf("unknown AppUserInvitationSetting field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AppUserInvitationSettingMutation) SetField(name string, value ent.Value) error {
	switch name {
	case appuserinvitationsetting.FieldAppID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case appuserinvitationsetting.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case appuserinvitationsetting.FieldCount:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCount(v)
		return nil
	case appuserinvitationsetting.FieldDiscount:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDiscount(v)
		return nil
	case appuserinvitationsetting.FieldCreateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateAt(v)
		return nil
	case appuserinvitationsetting.FieldUpdateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateAt(v)
		return nil
	case appuserinvitationsetting.FieldDeleteAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteAt(v)
		return nil
	case appuserinvitationsetting.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case appuserinvitationsetting.FieldBadgeLarge:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBadgeLarge(v)
		return nil
	case appuserinvitationsetting.FieldBadgeSmall:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBadgeSmall(v)
		return nil
	}
	return fmt.Errorf("unknown AppUserInvitationSetting field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AppUserInvitationSettingMutation) AddedFields() []string {
	var fields []string
	if m.addcount != nil {
		fields = append(fields, appuserinvitationsetting.FieldCount)
	}
	if m.adddiscount != nil {
		fields = append(fields, appuserinvitationsetting.FieldDiscount)
	}
	if m.addcreate_at != nil {
		fields = append(fields, appuserinvitationsetting.FieldCreateAt)
	}
	if m.addupdate_at != nil {
		fields = append(fields, appuserinvitationsetting.FieldUpdateAt)
	}
	if m.adddelete_at != nil {
		fields = append(fields, appuserinvitationsetting.FieldDeleteAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AppUserInvitationSettingMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case appuserinvitationsetting.FieldCount:
		return m.AddedCount()
	case appuserinvitationsetting.FieldDiscount:
		return m.AddedDiscount()
	case appuserinvitationsetting.FieldCreateAt:
		return m.AddedCreateAt()
	case appuserinvitationsetting.FieldUpdateAt:
		return m.AddedUpdateAt()
	case appuserinvitationsetting.FieldDeleteAt:
		return m.AddedDeleteAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AppUserInvitationSettingMutation) AddField(name string, value ent.Value) error {
	switch name {
	case appuserinvitationsetting.FieldCount:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCount(v)
		return nil
	case appuserinvitationsetting.FieldDiscount:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDiscount(v)
		return nil
	case appuserinvitationsetting.FieldCreateAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateAt(v)
		return nil
	case appuserinvitationsetting.FieldUpdateAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateAt(v)
		return nil
	case appuserinvitationsetting.FieldDeleteAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown AppUserInvitationSetting numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AppUserInvitationSettingMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AppUserInvitationSettingMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AppUserInvitationSettingMutation) ClearField(name string) error {
	return fmt.Errorf("unknown AppUserInvitationSetting nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AppUserInvitationSettingMutation) ResetField(name string) error {
	switch name {
	case appuserinvitationsetting.FieldAppID:
		m.ResetAppID()
		return nil
	case appuserinvitationsetting.FieldUserID:
		m.ResetUserID()
		return nil
	case appuserinvitationsetting.FieldCount:
		m.ResetCount()
		return nil
	case appuserinvitationsetting.FieldDiscount:
		m.ResetDiscount()
		return nil
	case appuserinvitationsetting.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case appuserinvitationsetting.FieldUpdateAt:
		m.ResetUpdateAt()
		return nil
	case appuserinvitationsetting.FieldDeleteAt:
		m.ResetDeleteAt()
		return nil
	case appuserinvitationsetting.FieldTitle:
		m.ResetTitle()
		return nil
	case appuserinvitationsetting.FieldBadgeLarge:
		m.ResetBadgeLarge()
		return nil
	case appuserinvitationsetting.FieldBadgeSmall:
		m.ResetBadgeSmall()
		return nil
	}
	return fmt.Errorf("unknown AppUserInvitationSetting field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AppUserInvitationSettingMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AppUserInvitationSettingMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AppUserInvitationSettingMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AppUserInvitationSettingMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AppUserInvitationSettingMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AppUserInvitationSettingMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AppUserInvitationSettingMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown AppUserInvitationSetting unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AppUserInvitationSettingMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown AppUserInvitationSetting edge %s", name)
}

// AppUserPurchaseAmountSettingMutation represents an operation that mutates the AppUserPurchaseAmountSetting nodes in the graph.
type AppUserPurchaseAmountSettingMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	app_id        *uuid.UUID
	user_id       *uuid.UUID
	title         *string
	badge_large   *string
	badge_small   *string
	amount        *uint64
	addamount     *int64
	percent       *uint32
	addpercent    *int32
	create_at     *uint32
	addcreate_at  *int32
	update_at     *uint32
	addupdate_at  *int32
	delete_at     *uint32
	adddelete_at  *int32
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*AppUserPurchaseAmountSetting, error)
	predicates    []predicate.AppUserPurchaseAmountSetting
}

var _ ent.Mutation = (*AppUserPurchaseAmountSettingMutation)(nil)

// appuserpurchaseamountsettingOption allows management of the mutation configuration using functional options.
type appuserpurchaseamountsettingOption func(*AppUserPurchaseAmountSettingMutation)

// newAppUserPurchaseAmountSettingMutation creates new mutation for the AppUserPurchaseAmountSetting entity.
func newAppUserPurchaseAmountSettingMutation(c config, op Op, opts ...appuserpurchaseamountsettingOption) *AppUserPurchaseAmountSettingMutation {
	m := &AppUserPurchaseAmountSettingMutation{
		config:        c,
		op:            op,
		typ:           TypeAppUserPurchaseAmountSetting,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAppUserPurchaseAmountSettingID sets the ID field of the mutation.
func withAppUserPurchaseAmountSettingID(id uuid.UUID) appuserpurchaseamountsettingOption {
	return func(m *AppUserPurchaseAmountSettingMutation) {
		var (
			err   error
			once  sync.Once
			value *AppUserPurchaseAmountSetting
		)
		m.oldValue = func(ctx context.Context) (*AppUserPurchaseAmountSetting, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().AppUserPurchaseAmountSetting.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAppUserPurchaseAmountSetting sets the old AppUserPurchaseAmountSetting of the mutation.
func withAppUserPurchaseAmountSetting(node *AppUserPurchaseAmountSetting) appuserpurchaseamountsettingOption {
	return func(m *AppUserPurchaseAmountSettingMutation) {
		m.oldValue = func(context.Context) (*AppUserPurchaseAmountSetting, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AppUserPurchaseAmountSettingMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AppUserPurchaseAmountSettingMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of AppUserPurchaseAmountSetting entities.
func (m *AppUserPurchaseAmountSettingMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AppUserPurchaseAmountSettingMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AppUserPurchaseAmountSettingMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().AppUserPurchaseAmountSetting.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAppID sets the "app_id" field.
func (m *AppUserPurchaseAmountSettingMutation) SetAppID(u uuid.UUID) {
	m.app_id = &u
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *AppUserPurchaseAmountSettingMutation) AppID() (r uuid.UUID, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the AppUserPurchaseAmountSetting entity.
// If the AppUserPurchaseAmountSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppUserPurchaseAmountSettingMutation) OldAppID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ResetAppID resets all changes to the "app_id" field.
func (m *AppUserPurchaseAmountSettingMutation) ResetAppID() {
	m.app_id = nil
}

// SetUserID sets the "user_id" field.
func (m *AppUserPurchaseAmountSettingMutation) SetUserID(u uuid.UUID) {
	m.user_id = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *AppUserPurchaseAmountSettingMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the AppUserPurchaseAmountSetting entity.
// If the AppUserPurchaseAmountSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppUserPurchaseAmountSettingMutation) OldUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *AppUserPurchaseAmountSettingMutation) ResetUserID() {
	m.user_id = nil
}

// SetTitle sets the "title" field.
func (m *AppUserPurchaseAmountSettingMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *AppUserPurchaseAmountSettingMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the AppUserPurchaseAmountSetting entity.
// If the AppUserPurchaseAmountSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppUserPurchaseAmountSettingMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *AppUserPurchaseAmountSettingMutation) ResetTitle() {
	m.title = nil
}

// SetBadgeLarge sets the "badge_large" field.
func (m *AppUserPurchaseAmountSettingMutation) SetBadgeLarge(s string) {
	m.badge_large = &s
}

// BadgeLarge returns the value of the "badge_large" field in the mutation.
func (m *AppUserPurchaseAmountSettingMutation) BadgeLarge() (r string, exists bool) {
	v := m.badge_large
	if v == nil {
		return
	}
	return *v, true
}

// OldBadgeLarge returns the old "badge_large" field's value of the AppUserPurchaseAmountSetting entity.
// If the AppUserPurchaseAmountSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppUserPurchaseAmountSettingMutation) OldBadgeLarge(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBadgeLarge is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBadgeLarge requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBadgeLarge: %w", err)
	}
	return oldValue.BadgeLarge, nil
}

// ResetBadgeLarge resets all changes to the "badge_large" field.
func (m *AppUserPurchaseAmountSettingMutation) ResetBadgeLarge() {
	m.badge_large = nil
}

// SetBadgeSmall sets the "badge_small" field.
func (m *AppUserPurchaseAmountSettingMutation) SetBadgeSmall(s string) {
	m.badge_small = &s
}

// BadgeSmall returns the value of the "badge_small" field in the mutation.
func (m *AppUserPurchaseAmountSettingMutation) BadgeSmall() (r string, exists bool) {
	v := m.badge_small
	if v == nil {
		return
	}
	return *v, true
}

// OldBadgeSmall returns the old "badge_small" field's value of the AppUserPurchaseAmountSetting entity.
// If the AppUserPurchaseAmountSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppUserPurchaseAmountSettingMutation) OldBadgeSmall(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBadgeSmall is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBadgeSmall requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBadgeSmall: %w", err)
	}
	return oldValue.BadgeSmall, nil
}

// ResetBadgeSmall resets all changes to the "badge_small" field.
func (m *AppUserPurchaseAmountSettingMutation) ResetBadgeSmall() {
	m.badge_small = nil
}

// SetAmount sets the "amount" field.
func (m *AppUserPurchaseAmountSettingMutation) SetAmount(u uint64) {
	m.amount = &u
	m.addamount = nil
}

// Amount returns the value of the "amount" field in the mutation.
func (m *AppUserPurchaseAmountSettingMutation) Amount() (r uint64, exists bool) {
	v := m.amount
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount returns the old "amount" field's value of the AppUserPurchaseAmountSetting entity.
// If the AppUserPurchaseAmountSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppUserPurchaseAmountSettingMutation) OldAmount(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount: %w", err)
	}
	return oldValue.Amount, nil
}

// AddAmount adds u to the "amount" field.
func (m *AppUserPurchaseAmountSettingMutation) AddAmount(u int64) {
	if m.addamount != nil {
		*m.addamount += u
	} else {
		m.addamount = &u
	}
}

// AddedAmount returns the value that was added to the "amount" field in this mutation.
func (m *AppUserPurchaseAmountSettingMutation) AddedAmount() (r int64, exists bool) {
	v := m.addamount
	if v == nil {
		return
	}
	return *v, true
}

// ResetAmount resets all changes to the "amount" field.
func (m *AppUserPurchaseAmountSettingMutation) ResetAmount() {
	m.amount = nil
	m.addamount = nil
}

// SetPercent sets the "percent" field.
func (m *AppUserPurchaseAmountSettingMutation) SetPercent(u uint32) {
	m.percent = &u
	m.addpercent = nil
}

// Percent returns the value of the "percent" field in the mutation.
func (m *AppUserPurchaseAmountSettingMutation) Percent() (r uint32, exists bool) {
	v := m.percent
	if v == nil {
		return
	}
	return *v, true
}

// OldPercent returns the old "percent" field's value of the AppUserPurchaseAmountSetting entity.
// If the AppUserPurchaseAmountSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppUserPurchaseAmountSettingMutation) OldPercent(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPercent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPercent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPercent: %w", err)
	}
	return oldValue.Percent, nil
}

// AddPercent adds u to the "percent" field.
func (m *AppUserPurchaseAmountSettingMutation) AddPercent(u int32) {
	if m.addpercent != nil {
		*m.addpercent += u
	} else {
		m.addpercent = &u
	}
}

// AddedPercent returns the value that was added to the "percent" field in this mutation.
func (m *AppUserPurchaseAmountSettingMutation) AddedPercent() (r int32, exists bool) {
	v := m.addpercent
	if v == nil {
		return
	}
	return *v, true
}

// ResetPercent resets all changes to the "percent" field.
func (m *AppUserPurchaseAmountSettingMutation) ResetPercent() {
	m.percent = nil
	m.addpercent = nil
}

// SetCreateAt sets the "create_at" field.
func (m *AppUserPurchaseAmountSettingMutation) SetCreateAt(u uint32) {
	m.create_at = &u
	m.addcreate_at = nil
}

// CreateAt returns the value of the "create_at" field in the mutation.
func (m *AppUserPurchaseAmountSettingMutation) CreateAt() (r uint32, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateAt returns the old "create_at" field's value of the AppUserPurchaseAmountSetting entity.
// If the AppUserPurchaseAmountSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppUserPurchaseAmountSettingMutation) OldCreateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}
	return oldValue.CreateAt, nil
}

// AddCreateAt adds u to the "create_at" field.
func (m *AppUserPurchaseAmountSettingMutation) AddCreateAt(u int32) {
	if m.addcreate_at != nil {
		*m.addcreate_at += u
	} else {
		m.addcreate_at = &u
	}
}

// AddedCreateAt returns the value that was added to the "create_at" field in this mutation.
func (m *AppUserPurchaseAmountSettingMutation) AddedCreateAt() (r int32, exists bool) {
	v := m.addcreate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateAt resets all changes to the "create_at" field.
func (m *AppUserPurchaseAmountSettingMutation) ResetCreateAt() {
	m.create_at = nil
	m.addcreate_at = nil
}

// SetUpdateAt sets the "update_at" field.
func (m *AppUserPurchaseAmountSettingMutation) SetUpdateAt(u uint32) {
	m.update_at = &u
	m.addupdate_at = nil
}

// UpdateAt returns the value of the "update_at" field in the mutation.
func (m *AppUserPurchaseAmountSettingMutation) UpdateAt() (r uint32, exists bool) {
	v := m.update_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateAt returns the old "update_at" field's value of the AppUserPurchaseAmountSetting entity.
// If the AppUserPurchaseAmountSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppUserPurchaseAmountSettingMutation) OldUpdateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateAt: %w", err)
	}
	return oldValue.UpdateAt, nil
}

// AddUpdateAt adds u to the "update_at" field.
func (m *AppUserPurchaseAmountSettingMutation) AddUpdateAt(u int32) {
	if m.addupdate_at != nil {
		*m.addupdate_at += u
	} else {
		m.addupdate_at = &u
	}
}

// AddedUpdateAt returns the value that was added to the "update_at" field in this mutation.
func (m *AppUserPurchaseAmountSettingMutation) AddedUpdateAt() (r int32, exists bool) {
	v := m.addupdate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateAt resets all changes to the "update_at" field.
func (m *AppUserPurchaseAmountSettingMutation) ResetUpdateAt() {
	m.update_at = nil
	m.addupdate_at = nil
}

// SetDeleteAt sets the "delete_at" field.
func (m *AppUserPurchaseAmountSettingMutation) SetDeleteAt(u uint32) {
	m.delete_at = &u
	m.adddelete_at = nil
}

// DeleteAt returns the value of the "delete_at" field in the mutation.
func (m *AppUserPurchaseAmountSettingMutation) DeleteAt() (r uint32, exists bool) {
	v := m.delete_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteAt returns the old "delete_at" field's value of the AppUserPurchaseAmountSetting entity.
// If the AppUserPurchaseAmountSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppUserPurchaseAmountSettingMutation) OldDeleteAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteAt: %w", err)
	}
	return oldValue.DeleteAt, nil
}

// AddDeleteAt adds u to the "delete_at" field.
func (m *AppUserPurchaseAmountSettingMutation) AddDeleteAt(u int32) {
	if m.adddelete_at != nil {
		*m.adddelete_at += u
	} else {
		m.adddelete_at = &u
	}
}

// AddedDeleteAt returns the value that was added to the "delete_at" field in this mutation.
func (m *AppUserPurchaseAmountSettingMutation) AddedDeleteAt() (r int32, exists bool) {
	v := m.adddelete_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeleteAt resets all changes to the "delete_at" field.
func (m *AppUserPurchaseAmountSettingMutation) ResetDeleteAt() {
	m.delete_at = nil
	m.adddelete_at = nil
}

// Where appends a list predicates to the AppUserPurchaseAmountSettingMutation builder.
func (m *AppUserPurchaseAmountSettingMutation) Where(ps ...predicate.AppUserPurchaseAmountSetting) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *AppUserPurchaseAmountSettingMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (AppUserPurchaseAmountSetting).
func (m *AppUserPurchaseAmountSettingMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AppUserPurchaseAmountSettingMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.app_id != nil {
		fields = append(fields, appuserpurchaseamountsetting.FieldAppID)
	}
	if m.user_id != nil {
		fields = append(fields, appuserpurchaseamountsetting.FieldUserID)
	}
	if m.title != nil {
		fields = append(fields, appuserpurchaseamountsetting.FieldTitle)
	}
	if m.badge_large != nil {
		fields = append(fields, appuserpurchaseamountsetting.FieldBadgeLarge)
	}
	if m.badge_small != nil {
		fields = append(fields, appuserpurchaseamountsetting.FieldBadgeSmall)
	}
	if m.amount != nil {
		fields = append(fields, appuserpurchaseamountsetting.FieldAmount)
	}
	if m.percent != nil {
		fields = append(fields, appuserpurchaseamountsetting.FieldPercent)
	}
	if m.create_at != nil {
		fields = append(fields, appuserpurchaseamountsetting.FieldCreateAt)
	}
	if m.update_at != nil {
		fields = append(fields, appuserpurchaseamountsetting.FieldUpdateAt)
	}
	if m.delete_at != nil {
		fields = append(fields, appuserpurchaseamountsetting.FieldDeleteAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AppUserPurchaseAmountSettingMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case appuserpurchaseamountsetting.FieldAppID:
		return m.AppID()
	case appuserpurchaseamountsetting.FieldUserID:
		return m.UserID()
	case appuserpurchaseamountsetting.FieldTitle:
		return m.Title()
	case appuserpurchaseamountsetting.FieldBadgeLarge:
		return m.BadgeLarge()
	case appuserpurchaseamountsetting.FieldBadgeSmall:
		return m.BadgeSmall()
	case appuserpurchaseamountsetting.FieldAmount:
		return m.Amount()
	case appuserpurchaseamountsetting.FieldPercent:
		return m.Percent()
	case appuserpurchaseamountsetting.FieldCreateAt:
		return m.CreateAt()
	case appuserpurchaseamountsetting.FieldUpdateAt:
		return m.UpdateAt()
	case appuserpurchaseamountsetting.FieldDeleteAt:
		return m.DeleteAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AppUserPurchaseAmountSettingMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case appuserpurchaseamountsetting.FieldAppID:
		return m.OldAppID(ctx)
	case appuserpurchaseamountsetting.FieldUserID:
		return m.OldUserID(ctx)
	case appuserpurchaseamountsetting.FieldTitle:
		return m.OldTitle(ctx)
	case appuserpurchaseamountsetting.FieldBadgeLarge:
		return m.OldBadgeLarge(ctx)
	case appuserpurchaseamountsetting.FieldBadgeSmall:
		return m.OldBadgeSmall(ctx)
	case appuserpurchaseamountsetting.FieldAmount:
		return m.OldAmount(ctx)
	case appuserpurchaseamountsetting.FieldPercent:
		return m.OldPercent(ctx)
	case appuserpurchaseamountsetting.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case appuserpurchaseamountsetting.FieldUpdateAt:
		return m.OldUpdateAt(ctx)
	case appuserpurchaseamountsetting.FieldDeleteAt:
		return m.OldDeleteAt(ctx)
	}
	return nil, fmt.Errorf("unknown AppUserPurchaseAmountSetting field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AppUserPurchaseAmountSettingMutation) SetField(name string, value ent.Value) error {
	switch name {
	case appuserpurchaseamountsetting.FieldAppID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case appuserpurchaseamountsetting.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case appuserpurchaseamountsetting.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case appuserpurchaseamountsetting.FieldBadgeLarge:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBadgeLarge(v)
		return nil
	case appuserpurchaseamountsetting.FieldBadgeSmall:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBadgeSmall(v)
		return nil
	case appuserpurchaseamountsetting.FieldAmount:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount(v)
		return nil
	case appuserpurchaseamountsetting.FieldPercent:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPercent(v)
		return nil
	case appuserpurchaseamountsetting.FieldCreateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateAt(v)
		return nil
	case appuserpurchaseamountsetting.FieldUpdateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateAt(v)
		return nil
	case appuserpurchaseamountsetting.FieldDeleteAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown AppUserPurchaseAmountSetting field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AppUserPurchaseAmountSettingMutation) AddedFields() []string {
	var fields []string
	if m.addamount != nil {
		fields = append(fields, appuserpurchaseamountsetting.FieldAmount)
	}
	if m.addpercent != nil {
		fields = append(fields, appuserpurchaseamountsetting.FieldPercent)
	}
	if m.addcreate_at != nil {
		fields = append(fields, appuserpurchaseamountsetting.FieldCreateAt)
	}
	if m.addupdate_at != nil {
		fields = append(fields, appuserpurchaseamountsetting.FieldUpdateAt)
	}
	if m.adddelete_at != nil {
		fields = append(fields, appuserpurchaseamountsetting.FieldDeleteAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AppUserPurchaseAmountSettingMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case appuserpurchaseamountsetting.FieldAmount:
		return m.AddedAmount()
	case appuserpurchaseamountsetting.FieldPercent:
		return m.AddedPercent()
	case appuserpurchaseamountsetting.FieldCreateAt:
		return m.AddedCreateAt()
	case appuserpurchaseamountsetting.FieldUpdateAt:
		return m.AddedUpdateAt()
	case appuserpurchaseamountsetting.FieldDeleteAt:
		return m.AddedDeleteAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AppUserPurchaseAmountSettingMutation) AddField(name string, value ent.Value) error {
	switch name {
	case appuserpurchaseamountsetting.FieldAmount:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAmount(v)
		return nil
	case appuserpurchaseamountsetting.FieldPercent:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPercent(v)
		return nil
	case appuserpurchaseamountsetting.FieldCreateAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateAt(v)
		return nil
	case appuserpurchaseamountsetting.FieldUpdateAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateAt(v)
		return nil
	case appuserpurchaseamountsetting.FieldDeleteAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown AppUserPurchaseAmountSetting numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AppUserPurchaseAmountSettingMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AppUserPurchaseAmountSettingMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AppUserPurchaseAmountSettingMutation) ClearField(name string) error {
	return fmt.Errorf("unknown AppUserPurchaseAmountSetting nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AppUserPurchaseAmountSettingMutation) ResetField(name string) error {
	switch name {
	case appuserpurchaseamountsetting.FieldAppID:
		m.ResetAppID()
		return nil
	case appuserpurchaseamountsetting.FieldUserID:
		m.ResetUserID()
		return nil
	case appuserpurchaseamountsetting.FieldTitle:
		m.ResetTitle()
		return nil
	case appuserpurchaseamountsetting.FieldBadgeLarge:
		m.ResetBadgeLarge()
		return nil
	case appuserpurchaseamountsetting.FieldBadgeSmall:
		m.ResetBadgeSmall()
		return nil
	case appuserpurchaseamountsetting.FieldAmount:
		m.ResetAmount()
		return nil
	case appuserpurchaseamountsetting.FieldPercent:
		m.ResetPercent()
		return nil
	case appuserpurchaseamountsetting.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case appuserpurchaseamountsetting.FieldUpdateAt:
		m.ResetUpdateAt()
		return nil
	case appuserpurchaseamountsetting.FieldDeleteAt:
		m.ResetDeleteAt()
		return nil
	}
	return fmt.Errorf("unknown AppUserPurchaseAmountSetting field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AppUserPurchaseAmountSettingMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AppUserPurchaseAmountSettingMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AppUserPurchaseAmountSettingMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AppUserPurchaseAmountSettingMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AppUserPurchaseAmountSettingMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AppUserPurchaseAmountSettingMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AppUserPurchaseAmountSettingMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown AppUserPurchaseAmountSetting unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AppUserPurchaseAmountSettingMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown AppUserPurchaseAmountSetting edge %s", name)
}

// CommissionCoinSettingMutation represents an operation that mutates the CommissionCoinSetting nodes in the graph.
type CommissionCoinSettingMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	coin_type_id  *uuid.UUID
	using         *bool
	create_at     *uint32
	addcreate_at  *int32
	update_at     *uint32
	addupdate_at  *int32
	delete_at     *uint32
	adddelete_at  *int32
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*CommissionCoinSetting, error)
	predicates    []predicate.CommissionCoinSetting
}

var _ ent.Mutation = (*CommissionCoinSettingMutation)(nil)

// commissioncoinsettingOption allows management of the mutation configuration using functional options.
type commissioncoinsettingOption func(*CommissionCoinSettingMutation)

// newCommissionCoinSettingMutation creates new mutation for the CommissionCoinSetting entity.
func newCommissionCoinSettingMutation(c config, op Op, opts ...commissioncoinsettingOption) *CommissionCoinSettingMutation {
	m := &CommissionCoinSettingMutation{
		config:        c,
		op:            op,
		typ:           TypeCommissionCoinSetting,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCommissionCoinSettingID sets the ID field of the mutation.
func withCommissionCoinSettingID(id uuid.UUID) commissioncoinsettingOption {
	return func(m *CommissionCoinSettingMutation) {
		var (
			err   error
			once  sync.Once
			value *CommissionCoinSetting
		)
		m.oldValue = func(ctx context.Context) (*CommissionCoinSetting, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CommissionCoinSetting.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCommissionCoinSetting sets the old CommissionCoinSetting of the mutation.
func withCommissionCoinSetting(node *CommissionCoinSetting) commissioncoinsettingOption {
	return func(m *CommissionCoinSettingMutation) {
		m.oldValue = func(context.Context) (*CommissionCoinSetting, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CommissionCoinSettingMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CommissionCoinSettingMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of CommissionCoinSetting entities.
func (m *CommissionCoinSettingMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CommissionCoinSettingMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CommissionCoinSettingMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CommissionCoinSetting.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCoinTypeID sets the "coin_type_id" field.
func (m *CommissionCoinSettingMutation) SetCoinTypeID(u uuid.UUID) {
	m.coin_type_id = &u
}

// CoinTypeID returns the value of the "coin_type_id" field in the mutation.
func (m *CommissionCoinSettingMutation) CoinTypeID() (r uuid.UUID, exists bool) {
	v := m.coin_type_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCoinTypeID returns the old "coin_type_id" field's value of the CommissionCoinSetting entity.
// If the CommissionCoinSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommissionCoinSettingMutation) OldCoinTypeID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCoinTypeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCoinTypeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCoinTypeID: %w", err)
	}
	return oldValue.CoinTypeID, nil
}

// ResetCoinTypeID resets all changes to the "coin_type_id" field.
func (m *CommissionCoinSettingMutation) ResetCoinTypeID() {
	m.coin_type_id = nil
}

// SetUsing sets the "using" field.
func (m *CommissionCoinSettingMutation) SetUsing(b bool) {
	m.using = &b
}

// Using returns the value of the "using" field in the mutation.
func (m *CommissionCoinSettingMutation) Using() (r bool, exists bool) {
	v := m.using
	if v == nil {
		return
	}
	return *v, true
}

// OldUsing returns the old "using" field's value of the CommissionCoinSetting entity.
// If the CommissionCoinSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommissionCoinSettingMutation) OldUsing(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsing is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsing requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsing: %w", err)
	}
	return oldValue.Using, nil
}

// ResetUsing resets all changes to the "using" field.
func (m *CommissionCoinSettingMutation) ResetUsing() {
	m.using = nil
}

// SetCreateAt sets the "create_at" field.
func (m *CommissionCoinSettingMutation) SetCreateAt(u uint32) {
	m.create_at = &u
	m.addcreate_at = nil
}

// CreateAt returns the value of the "create_at" field in the mutation.
func (m *CommissionCoinSettingMutation) CreateAt() (r uint32, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateAt returns the old "create_at" field's value of the CommissionCoinSetting entity.
// If the CommissionCoinSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommissionCoinSettingMutation) OldCreateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}
	return oldValue.CreateAt, nil
}

// AddCreateAt adds u to the "create_at" field.
func (m *CommissionCoinSettingMutation) AddCreateAt(u int32) {
	if m.addcreate_at != nil {
		*m.addcreate_at += u
	} else {
		m.addcreate_at = &u
	}
}

// AddedCreateAt returns the value that was added to the "create_at" field in this mutation.
func (m *CommissionCoinSettingMutation) AddedCreateAt() (r int32, exists bool) {
	v := m.addcreate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateAt resets all changes to the "create_at" field.
func (m *CommissionCoinSettingMutation) ResetCreateAt() {
	m.create_at = nil
	m.addcreate_at = nil
}

// SetUpdateAt sets the "update_at" field.
func (m *CommissionCoinSettingMutation) SetUpdateAt(u uint32) {
	m.update_at = &u
	m.addupdate_at = nil
}

// UpdateAt returns the value of the "update_at" field in the mutation.
func (m *CommissionCoinSettingMutation) UpdateAt() (r uint32, exists bool) {
	v := m.update_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateAt returns the old "update_at" field's value of the CommissionCoinSetting entity.
// If the CommissionCoinSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommissionCoinSettingMutation) OldUpdateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateAt: %w", err)
	}
	return oldValue.UpdateAt, nil
}

// AddUpdateAt adds u to the "update_at" field.
func (m *CommissionCoinSettingMutation) AddUpdateAt(u int32) {
	if m.addupdate_at != nil {
		*m.addupdate_at += u
	} else {
		m.addupdate_at = &u
	}
}

// AddedUpdateAt returns the value that was added to the "update_at" field in this mutation.
func (m *CommissionCoinSettingMutation) AddedUpdateAt() (r int32, exists bool) {
	v := m.addupdate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateAt resets all changes to the "update_at" field.
func (m *CommissionCoinSettingMutation) ResetUpdateAt() {
	m.update_at = nil
	m.addupdate_at = nil
}

// SetDeleteAt sets the "delete_at" field.
func (m *CommissionCoinSettingMutation) SetDeleteAt(u uint32) {
	m.delete_at = &u
	m.adddelete_at = nil
}

// DeleteAt returns the value of the "delete_at" field in the mutation.
func (m *CommissionCoinSettingMutation) DeleteAt() (r uint32, exists bool) {
	v := m.delete_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteAt returns the old "delete_at" field's value of the CommissionCoinSetting entity.
// If the CommissionCoinSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommissionCoinSettingMutation) OldDeleteAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteAt: %w", err)
	}
	return oldValue.DeleteAt, nil
}

// AddDeleteAt adds u to the "delete_at" field.
func (m *CommissionCoinSettingMutation) AddDeleteAt(u int32) {
	if m.adddelete_at != nil {
		*m.adddelete_at += u
	} else {
		m.adddelete_at = &u
	}
}

// AddedDeleteAt returns the value that was added to the "delete_at" field in this mutation.
func (m *CommissionCoinSettingMutation) AddedDeleteAt() (r int32, exists bool) {
	v := m.adddelete_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeleteAt resets all changes to the "delete_at" field.
func (m *CommissionCoinSettingMutation) ResetDeleteAt() {
	m.delete_at = nil
	m.adddelete_at = nil
}

// Where appends a list predicates to the CommissionCoinSettingMutation builder.
func (m *CommissionCoinSettingMutation) Where(ps ...predicate.CommissionCoinSetting) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *CommissionCoinSettingMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (CommissionCoinSetting).
func (m *CommissionCoinSettingMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CommissionCoinSettingMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.coin_type_id != nil {
		fields = append(fields, commissioncoinsetting.FieldCoinTypeID)
	}
	if m.using != nil {
		fields = append(fields, commissioncoinsetting.FieldUsing)
	}
	if m.create_at != nil {
		fields = append(fields, commissioncoinsetting.FieldCreateAt)
	}
	if m.update_at != nil {
		fields = append(fields, commissioncoinsetting.FieldUpdateAt)
	}
	if m.delete_at != nil {
		fields = append(fields, commissioncoinsetting.FieldDeleteAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CommissionCoinSettingMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case commissioncoinsetting.FieldCoinTypeID:
		return m.CoinTypeID()
	case commissioncoinsetting.FieldUsing:
		return m.Using()
	case commissioncoinsetting.FieldCreateAt:
		return m.CreateAt()
	case commissioncoinsetting.FieldUpdateAt:
		return m.UpdateAt()
	case commissioncoinsetting.FieldDeleteAt:
		return m.DeleteAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CommissionCoinSettingMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case commissioncoinsetting.FieldCoinTypeID:
		return m.OldCoinTypeID(ctx)
	case commissioncoinsetting.FieldUsing:
		return m.OldUsing(ctx)
	case commissioncoinsetting.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case commissioncoinsetting.FieldUpdateAt:
		return m.OldUpdateAt(ctx)
	case commissioncoinsetting.FieldDeleteAt:
		return m.OldDeleteAt(ctx)
	}
	return nil, fmt.Errorf("unknown CommissionCoinSetting field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CommissionCoinSettingMutation) SetField(name string, value ent.Value) error {
	switch name {
	case commissioncoinsetting.FieldCoinTypeID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCoinTypeID(v)
		return nil
	case commissioncoinsetting.FieldUsing:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsing(v)
		return nil
	case commissioncoinsetting.FieldCreateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateAt(v)
		return nil
	case commissioncoinsetting.FieldUpdateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateAt(v)
		return nil
	case commissioncoinsetting.FieldDeleteAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown CommissionCoinSetting field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CommissionCoinSettingMutation) AddedFields() []string {
	var fields []string
	if m.addcreate_at != nil {
		fields = append(fields, commissioncoinsetting.FieldCreateAt)
	}
	if m.addupdate_at != nil {
		fields = append(fields, commissioncoinsetting.FieldUpdateAt)
	}
	if m.adddelete_at != nil {
		fields = append(fields, commissioncoinsetting.FieldDeleteAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CommissionCoinSettingMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case commissioncoinsetting.FieldCreateAt:
		return m.AddedCreateAt()
	case commissioncoinsetting.FieldUpdateAt:
		return m.AddedUpdateAt()
	case commissioncoinsetting.FieldDeleteAt:
		return m.AddedDeleteAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CommissionCoinSettingMutation) AddField(name string, value ent.Value) error {
	switch name {
	case commissioncoinsetting.FieldCreateAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateAt(v)
		return nil
	case commissioncoinsetting.FieldUpdateAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateAt(v)
		return nil
	case commissioncoinsetting.FieldDeleteAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown CommissionCoinSetting numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CommissionCoinSettingMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CommissionCoinSettingMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CommissionCoinSettingMutation) ClearField(name string) error {
	return fmt.Errorf("unknown CommissionCoinSetting nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CommissionCoinSettingMutation) ResetField(name string) error {
	switch name {
	case commissioncoinsetting.FieldCoinTypeID:
		m.ResetCoinTypeID()
		return nil
	case commissioncoinsetting.FieldUsing:
		m.ResetUsing()
		return nil
	case commissioncoinsetting.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case commissioncoinsetting.FieldUpdateAt:
		m.ResetUpdateAt()
		return nil
	case commissioncoinsetting.FieldDeleteAt:
		m.ResetDeleteAt()
		return nil
	}
	return fmt.Errorf("unknown CommissionCoinSetting field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CommissionCoinSettingMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CommissionCoinSettingMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CommissionCoinSettingMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CommissionCoinSettingMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CommissionCoinSettingMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CommissionCoinSettingMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CommissionCoinSettingMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown CommissionCoinSetting unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CommissionCoinSettingMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown CommissionCoinSetting edge %s", name)
}

// CouponAllocatedMutation represents an operation that mutates the CouponAllocated nodes in the graph.
type CouponAllocatedMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	app_id        *uuid.UUID
	user_id       *uuid.UUID
	_type         *string
	coupon_id     *uuid.UUID
	create_at     *uint32
	addcreate_at  *int32
	update_at     *uint32
	addupdate_at  *int32
	delete_at     *uint32
	adddelete_at  *int32
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*CouponAllocated, error)
	predicates    []predicate.CouponAllocated
}

var _ ent.Mutation = (*CouponAllocatedMutation)(nil)

// couponallocatedOption allows management of the mutation configuration using functional options.
type couponallocatedOption func(*CouponAllocatedMutation)

// newCouponAllocatedMutation creates new mutation for the CouponAllocated entity.
func newCouponAllocatedMutation(c config, op Op, opts ...couponallocatedOption) *CouponAllocatedMutation {
	m := &CouponAllocatedMutation{
		config:        c,
		op:            op,
		typ:           TypeCouponAllocated,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCouponAllocatedID sets the ID field of the mutation.
func withCouponAllocatedID(id uuid.UUID) couponallocatedOption {
	return func(m *CouponAllocatedMutation) {
		var (
			err   error
			once  sync.Once
			value *CouponAllocated
		)
		m.oldValue = func(ctx context.Context) (*CouponAllocated, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CouponAllocated.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCouponAllocated sets the old CouponAllocated of the mutation.
func withCouponAllocated(node *CouponAllocated) couponallocatedOption {
	return func(m *CouponAllocatedMutation) {
		m.oldValue = func(context.Context) (*CouponAllocated, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CouponAllocatedMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CouponAllocatedMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of CouponAllocated entities.
func (m *CouponAllocatedMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CouponAllocatedMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CouponAllocatedMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CouponAllocated.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAppID sets the "app_id" field.
func (m *CouponAllocatedMutation) SetAppID(u uuid.UUID) {
	m.app_id = &u
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *CouponAllocatedMutation) AppID() (r uuid.UUID, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the CouponAllocated entity.
// If the CouponAllocated object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponAllocatedMutation) OldAppID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ResetAppID resets all changes to the "app_id" field.
func (m *CouponAllocatedMutation) ResetAppID() {
	m.app_id = nil
}

// SetUserID sets the "user_id" field.
func (m *CouponAllocatedMutation) SetUserID(u uuid.UUID) {
	m.user_id = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *CouponAllocatedMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the CouponAllocated entity.
// If the CouponAllocated object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponAllocatedMutation) OldUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *CouponAllocatedMutation) ResetUserID() {
	m.user_id = nil
}

// SetType sets the "type" field.
func (m *CouponAllocatedMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *CouponAllocatedMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the CouponAllocated entity.
// If the CouponAllocated object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponAllocatedMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *CouponAllocatedMutation) ResetType() {
	m._type = nil
}

// SetCouponID sets the "coupon_id" field.
func (m *CouponAllocatedMutation) SetCouponID(u uuid.UUID) {
	m.coupon_id = &u
}

// CouponID returns the value of the "coupon_id" field in the mutation.
func (m *CouponAllocatedMutation) CouponID() (r uuid.UUID, exists bool) {
	v := m.coupon_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCouponID returns the old "coupon_id" field's value of the CouponAllocated entity.
// If the CouponAllocated object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponAllocatedMutation) OldCouponID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCouponID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCouponID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCouponID: %w", err)
	}
	return oldValue.CouponID, nil
}

// ResetCouponID resets all changes to the "coupon_id" field.
func (m *CouponAllocatedMutation) ResetCouponID() {
	m.coupon_id = nil
}

// SetCreateAt sets the "create_at" field.
func (m *CouponAllocatedMutation) SetCreateAt(u uint32) {
	m.create_at = &u
	m.addcreate_at = nil
}

// CreateAt returns the value of the "create_at" field in the mutation.
func (m *CouponAllocatedMutation) CreateAt() (r uint32, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateAt returns the old "create_at" field's value of the CouponAllocated entity.
// If the CouponAllocated object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponAllocatedMutation) OldCreateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}
	return oldValue.CreateAt, nil
}

// AddCreateAt adds u to the "create_at" field.
func (m *CouponAllocatedMutation) AddCreateAt(u int32) {
	if m.addcreate_at != nil {
		*m.addcreate_at += u
	} else {
		m.addcreate_at = &u
	}
}

// AddedCreateAt returns the value that was added to the "create_at" field in this mutation.
func (m *CouponAllocatedMutation) AddedCreateAt() (r int32, exists bool) {
	v := m.addcreate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateAt resets all changes to the "create_at" field.
func (m *CouponAllocatedMutation) ResetCreateAt() {
	m.create_at = nil
	m.addcreate_at = nil
}

// SetUpdateAt sets the "update_at" field.
func (m *CouponAllocatedMutation) SetUpdateAt(u uint32) {
	m.update_at = &u
	m.addupdate_at = nil
}

// UpdateAt returns the value of the "update_at" field in the mutation.
func (m *CouponAllocatedMutation) UpdateAt() (r uint32, exists bool) {
	v := m.update_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateAt returns the old "update_at" field's value of the CouponAllocated entity.
// If the CouponAllocated object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponAllocatedMutation) OldUpdateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateAt: %w", err)
	}
	return oldValue.UpdateAt, nil
}

// AddUpdateAt adds u to the "update_at" field.
func (m *CouponAllocatedMutation) AddUpdateAt(u int32) {
	if m.addupdate_at != nil {
		*m.addupdate_at += u
	} else {
		m.addupdate_at = &u
	}
}

// AddedUpdateAt returns the value that was added to the "update_at" field in this mutation.
func (m *CouponAllocatedMutation) AddedUpdateAt() (r int32, exists bool) {
	v := m.addupdate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateAt resets all changes to the "update_at" field.
func (m *CouponAllocatedMutation) ResetUpdateAt() {
	m.update_at = nil
	m.addupdate_at = nil
}

// SetDeleteAt sets the "delete_at" field.
func (m *CouponAllocatedMutation) SetDeleteAt(u uint32) {
	m.delete_at = &u
	m.adddelete_at = nil
}

// DeleteAt returns the value of the "delete_at" field in the mutation.
func (m *CouponAllocatedMutation) DeleteAt() (r uint32, exists bool) {
	v := m.delete_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteAt returns the old "delete_at" field's value of the CouponAllocated entity.
// If the CouponAllocated object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponAllocatedMutation) OldDeleteAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteAt: %w", err)
	}
	return oldValue.DeleteAt, nil
}

// AddDeleteAt adds u to the "delete_at" field.
func (m *CouponAllocatedMutation) AddDeleteAt(u int32) {
	if m.adddelete_at != nil {
		*m.adddelete_at += u
	} else {
		m.adddelete_at = &u
	}
}

// AddedDeleteAt returns the value that was added to the "delete_at" field in this mutation.
func (m *CouponAllocatedMutation) AddedDeleteAt() (r int32, exists bool) {
	v := m.adddelete_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeleteAt resets all changes to the "delete_at" field.
func (m *CouponAllocatedMutation) ResetDeleteAt() {
	m.delete_at = nil
	m.adddelete_at = nil
}

// Where appends a list predicates to the CouponAllocatedMutation builder.
func (m *CouponAllocatedMutation) Where(ps ...predicate.CouponAllocated) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *CouponAllocatedMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (CouponAllocated).
func (m *CouponAllocatedMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CouponAllocatedMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.app_id != nil {
		fields = append(fields, couponallocated.FieldAppID)
	}
	if m.user_id != nil {
		fields = append(fields, couponallocated.FieldUserID)
	}
	if m._type != nil {
		fields = append(fields, couponallocated.FieldType)
	}
	if m.coupon_id != nil {
		fields = append(fields, couponallocated.FieldCouponID)
	}
	if m.create_at != nil {
		fields = append(fields, couponallocated.FieldCreateAt)
	}
	if m.update_at != nil {
		fields = append(fields, couponallocated.FieldUpdateAt)
	}
	if m.delete_at != nil {
		fields = append(fields, couponallocated.FieldDeleteAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CouponAllocatedMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case couponallocated.FieldAppID:
		return m.AppID()
	case couponallocated.FieldUserID:
		return m.UserID()
	case couponallocated.FieldType:
		return m.GetType()
	case couponallocated.FieldCouponID:
		return m.CouponID()
	case couponallocated.FieldCreateAt:
		return m.CreateAt()
	case couponallocated.FieldUpdateAt:
		return m.UpdateAt()
	case couponallocated.FieldDeleteAt:
		return m.DeleteAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CouponAllocatedMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case couponallocated.FieldAppID:
		return m.OldAppID(ctx)
	case couponallocated.FieldUserID:
		return m.OldUserID(ctx)
	case couponallocated.FieldType:
		return m.OldType(ctx)
	case couponallocated.FieldCouponID:
		return m.OldCouponID(ctx)
	case couponallocated.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case couponallocated.FieldUpdateAt:
		return m.OldUpdateAt(ctx)
	case couponallocated.FieldDeleteAt:
		return m.OldDeleteAt(ctx)
	}
	return nil, fmt.Errorf("unknown CouponAllocated field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CouponAllocatedMutation) SetField(name string, value ent.Value) error {
	switch name {
	case couponallocated.FieldAppID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case couponallocated.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case couponallocated.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case couponallocated.FieldCouponID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCouponID(v)
		return nil
	case couponallocated.FieldCreateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateAt(v)
		return nil
	case couponallocated.FieldUpdateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateAt(v)
		return nil
	case couponallocated.FieldDeleteAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown CouponAllocated field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CouponAllocatedMutation) AddedFields() []string {
	var fields []string
	if m.addcreate_at != nil {
		fields = append(fields, couponallocated.FieldCreateAt)
	}
	if m.addupdate_at != nil {
		fields = append(fields, couponallocated.FieldUpdateAt)
	}
	if m.adddelete_at != nil {
		fields = append(fields, couponallocated.FieldDeleteAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CouponAllocatedMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case couponallocated.FieldCreateAt:
		return m.AddedCreateAt()
	case couponallocated.FieldUpdateAt:
		return m.AddedUpdateAt()
	case couponallocated.FieldDeleteAt:
		return m.AddedDeleteAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CouponAllocatedMutation) AddField(name string, value ent.Value) error {
	switch name {
	case couponallocated.FieldCreateAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateAt(v)
		return nil
	case couponallocated.FieldUpdateAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateAt(v)
		return nil
	case couponallocated.FieldDeleteAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown CouponAllocated numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CouponAllocatedMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CouponAllocatedMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CouponAllocatedMutation) ClearField(name string) error {
	return fmt.Errorf("unknown CouponAllocated nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CouponAllocatedMutation) ResetField(name string) error {
	switch name {
	case couponallocated.FieldAppID:
		m.ResetAppID()
		return nil
	case couponallocated.FieldUserID:
		m.ResetUserID()
		return nil
	case couponallocated.FieldType:
		m.ResetType()
		return nil
	case couponallocated.FieldCouponID:
		m.ResetCouponID()
		return nil
	case couponallocated.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case couponallocated.FieldUpdateAt:
		m.ResetUpdateAt()
		return nil
	case couponallocated.FieldDeleteAt:
		m.ResetDeleteAt()
		return nil
	}
	return fmt.Errorf("unknown CouponAllocated field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CouponAllocatedMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CouponAllocatedMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CouponAllocatedMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CouponAllocatedMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CouponAllocatedMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CouponAllocatedMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CouponAllocatedMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown CouponAllocated unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CouponAllocatedMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown CouponAllocated edge %s", name)
}

// CouponPoolMutation represents an operation that mutates the CouponPool nodes in the graph.
type CouponPoolMutation struct {
	config
	op                 Op
	typ                string
	id                 *uuid.UUID
	app_id             *uuid.UUID
	denomination       *uint64
	adddenomination    *int64
	circulation        *int32
	addcirculation     *int32
	release_by_user_id *uuid.UUID
	start              *uint32
	addstart           *int32
	duration_days      *int32
	addduration_days   *int32
	message            *string
	name               *string
	create_at          *uint32
	addcreate_at       *int32
	update_at          *uint32
	addupdate_at       *int32
	delete_at          *uint32
	adddelete_at       *int32
	clearedFields      map[string]struct{}
	done               bool
	oldValue           func(context.Context) (*CouponPool, error)
	predicates         []predicate.CouponPool
}

var _ ent.Mutation = (*CouponPoolMutation)(nil)

// couponpoolOption allows management of the mutation configuration using functional options.
type couponpoolOption func(*CouponPoolMutation)

// newCouponPoolMutation creates new mutation for the CouponPool entity.
func newCouponPoolMutation(c config, op Op, opts ...couponpoolOption) *CouponPoolMutation {
	m := &CouponPoolMutation{
		config:        c,
		op:            op,
		typ:           TypeCouponPool,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCouponPoolID sets the ID field of the mutation.
func withCouponPoolID(id uuid.UUID) couponpoolOption {
	return func(m *CouponPoolMutation) {
		var (
			err   error
			once  sync.Once
			value *CouponPool
		)
		m.oldValue = func(ctx context.Context) (*CouponPool, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CouponPool.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCouponPool sets the old CouponPool of the mutation.
func withCouponPool(node *CouponPool) couponpoolOption {
	return func(m *CouponPoolMutation) {
		m.oldValue = func(context.Context) (*CouponPool, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CouponPoolMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CouponPoolMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of CouponPool entities.
func (m *CouponPoolMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CouponPoolMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CouponPoolMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CouponPool.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAppID sets the "app_id" field.
func (m *CouponPoolMutation) SetAppID(u uuid.UUID) {
	m.app_id = &u
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *CouponPoolMutation) AppID() (r uuid.UUID, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the CouponPool entity.
// If the CouponPool object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponPoolMutation) OldAppID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ResetAppID resets all changes to the "app_id" field.
func (m *CouponPoolMutation) ResetAppID() {
	m.app_id = nil
}

// SetDenomination sets the "denomination" field.
func (m *CouponPoolMutation) SetDenomination(u uint64) {
	m.denomination = &u
	m.adddenomination = nil
}

// Denomination returns the value of the "denomination" field in the mutation.
func (m *CouponPoolMutation) Denomination() (r uint64, exists bool) {
	v := m.denomination
	if v == nil {
		return
	}
	return *v, true
}

// OldDenomination returns the old "denomination" field's value of the CouponPool entity.
// If the CouponPool object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponPoolMutation) OldDenomination(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDenomination is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDenomination requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDenomination: %w", err)
	}
	return oldValue.Denomination, nil
}

// AddDenomination adds u to the "denomination" field.
func (m *CouponPoolMutation) AddDenomination(u int64) {
	if m.adddenomination != nil {
		*m.adddenomination += u
	} else {
		m.adddenomination = &u
	}
}

// AddedDenomination returns the value that was added to the "denomination" field in this mutation.
func (m *CouponPoolMutation) AddedDenomination() (r int64, exists bool) {
	v := m.adddenomination
	if v == nil {
		return
	}
	return *v, true
}

// ResetDenomination resets all changes to the "denomination" field.
func (m *CouponPoolMutation) ResetDenomination() {
	m.denomination = nil
	m.adddenomination = nil
}

// SetCirculation sets the "circulation" field.
func (m *CouponPoolMutation) SetCirculation(i int32) {
	m.circulation = &i
	m.addcirculation = nil
}

// Circulation returns the value of the "circulation" field in the mutation.
func (m *CouponPoolMutation) Circulation() (r int32, exists bool) {
	v := m.circulation
	if v == nil {
		return
	}
	return *v, true
}

// OldCirculation returns the old "circulation" field's value of the CouponPool entity.
// If the CouponPool object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponPoolMutation) OldCirculation(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCirculation is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCirculation requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCirculation: %w", err)
	}
	return oldValue.Circulation, nil
}

// AddCirculation adds i to the "circulation" field.
func (m *CouponPoolMutation) AddCirculation(i int32) {
	if m.addcirculation != nil {
		*m.addcirculation += i
	} else {
		m.addcirculation = &i
	}
}

// AddedCirculation returns the value that was added to the "circulation" field in this mutation.
func (m *CouponPoolMutation) AddedCirculation() (r int32, exists bool) {
	v := m.addcirculation
	if v == nil {
		return
	}
	return *v, true
}

// ResetCirculation resets all changes to the "circulation" field.
func (m *CouponPoolMutation) ResetCirculation() {
	m.circulation = nil
	m.addcirculation = nil
}

// SetReleaseByUserID sets the "release_by_user_id" field.
func (m *CouponPoolMutation) SetReleaseByUserID(u uuid.UUID) {
	m.release_by_user_id = &u
}

// ReleaseByUserID returns the value of the "release_by_user_id" field in the mutation.
func (m *CouponPoolMutation) ReleaseByUserID() (r uuid.UUID, exists bool) {
	v := m.release_by_user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldReleaseByUserID returns the old "release_by_user_id" field's value of the CouponPool entity.
// If the CouponPool object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponPoolMutation) OldReleaseByUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReleaseByUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReleaseByUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReleaseByUserID: %w", err)
	}
	return oldValue.ReleaseByUserID, nil
}

// ResetReleaseByUserID resets all changes to the "release_by_user_id" field.
func (m *CouponPoolMutation) ResetReleaseByUserID() {
	m.release_by_user_id = nil
}

// SetStart sets the "start" field.
func (m *CouponPoolMutation) SetStart(u uint32) {
	m.start = &u
	m.addstart = nil
}

// Start returns the value of the "start" field in the mutation.
func (m *CouponPoolMutation) Start() (r uint32, exists bool) {
	v := m.start
	if v == nil {
		return
	}
	return *v, true
}

// OldStart returns the old "start" field's value of the CouponPool entity.
// If the CouponPool object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponPoolMutation) OldStart(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStart is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStart requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStart: %w", err)
	}
	return oldValue.Start, nil
}

// AddStart adds u to the "start" field.
func (m *CouponPoolMutation) AddStart(u int32) {
	if m.addstart != nil {
		*m.addstart += u
	} else {
		m.addstart = &u
	}
}

// AddedStart returns the value that was added to the "start" field in this mutation.
func (m *CouponPoolMutation) AddedStart() (r int32, exists bool) {
	v := m.addstart
	if v == nil {
		return
	}
	return *v, true
}

// ResetStart resets all changes to the "start" field.
func (m *CouponPoolMutation) ResetStart() {
	m.start = nil
	m.addstart = nil
}

// SetDurationDays sets the "duration_days" field.
func (m *CouponPoolMutation) SetDurationDays(i int32) {
	m.duration_days = &i
	m.addduration_days = nil
}

// DurationDays returns the value of the "duration_days" field in the mutation.
func (m *CouponPoolMutation) DurationDays() (r int32, exists bool) {
	v := m.duration_days
	if v == nil {
		return
	}
	return *v, true
}

// OldDurationDays returns the old "duration_days" field's value of the CouponPool entity.
// If the CouponPool object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponPoolMutation) OldDurationDays(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDurationDays is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDurationDays requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDurationDays: %w", err)
	}
	return oldValue.DurationDays, nil
}

// AddDurationDays adds i to the "duration_days" field.
func (m *CouponPoolMutation) AddDurationDays(i int32) {
	if m.addduration_days != nil {
		*m.addduration_days += i
	} else {
		m.addduration_days = &i
	}
}

// AddedDurationDays returns the value that was added to the "duration_days" field in this mutation.
func (m *CouponPoolMutation) AddedDurationDays() (r int32, exists bool) {
	v := m.addduration_days
	if v == nil {
		return
	}
	return *v, true
}

// ResetDurationDays resets all changes to the "duration_days" field.
func (m *CouponPoolMutation) ResetDurationDays() {
	m.duration_days = nil
	m.addduration_days = nil
}

// SetMessage sets the "message" field.
func (m *CouponPoolMutation) SetMessage(s string) {
	m.message = &s
}

// Message returns the value of the "message" field in the mutation.
func (m *CouponPoolMutation) Message() (r string, exists bool) {
	v := m.message
	if v == nil {
		return
	}
	return *v, true
}

// OldMessage returns the old "message" field's value of the CouponPool entity.
// If the CouponPool object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponPoolMutation) OldMessage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMessage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMessage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMessage: %w", err)
	}
	return oldValue.Message, nil
}

// ResetMessage resets all changes to the "message" field.
func (m *CouponPoolMutation) ResetMessage() {
	m.message = nil
}

// SetName sets the "name" field.
func (m *CouponPoolMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *CouponPoolMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the CouponPool entity.
// If the CouponPool object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponPoolMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *CouponPoolMutation) ResetName() {
	m.name = nil
}

// SetCreateAt sets the "create_at" field.
func (m *CouponPoolMutation) SetCreateAt(u uint32) {
	m.create_at = &u
	m.addcreate_at = nil
}

// CreateAt returns the value of the "create_at" field in the mutation.
func (m *CouponPoolMutation) CreateAt() (r uint32, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateAt returns the old "create_at" field's value of the CouponPool entity.
// If the CouponPool object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponPoolMutation) OldCreateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}
	return oldValue.CreateAt, nil
}

// AddCreateAt adds u to the "create_at" field.
func (m *CouponPoolMutation) AddCreateAt(u int32) {
	if m.addcreate_at != nil {
		*m.addcreate_at += u
	} else {
		m.addcreate_at = &u
	}
}

// AddedCreateAt returns the value that was added to the "create_at" field in this mutation.
func (m *CouponPoolMutation) AddedCreateAt() (r int32, exists bool) {
	v := m.addcreate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateAt resets all changes to the "create_at" field.
func (m *CouponPoolMutation) ResetCreateAt() {
	m.create_at = nil
	m.addcreate_at = nil
}

// SetUpdateAt sets the "update_at" field.
func (m *CouponPoolMutation) SetUpdateAt(u uint32) {
	m.update_at = &u
	m.addupdate_at = nil
}

// UpdateAt returns the value of the "update_at" field in the mutation.
func (m *CouponPoolMutation) UpdateAt() (r uint32, exists bool) {
	v := m.update_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateAt returns the old "update_at" field's value of the CouponPool entity.
// If the CouponPool object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponPoolMutation) OldUpdateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateAt: %w", err)
	}
	return oldValue.UpdateAt, nil
}

// AddUpdateAt adds u to the "update_at" field.
func (m *CouponPoolMutation) AddUpdateAt(u int32) {
	if m.addupdate_at != nil {
		*m.addupdate_at += u
	} else {
		m.addupdate_at = &u
	}
}

// AddedUpdateAt returns the value that was added to the "update_at" field in this mutation.
func (m *CouponPoolMutation) AddedUpdateAt() (r int32, exists bool) {
	v := m.addupdate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateAt resets all changes to the "update_at" field.
func (m *CouponPoolMutation) ResetUpdateAt() {
	m.update_at = nil
	m.addupdate_at = nil
}

// SetDeleteAt sets the "delete_at" field.
func (m *CouponPoolMutation) SetDeleteAt(u uint32) {
	m.delete_at = &u
	m.adddelete_at = nil
}

// DeleteAt returns the value of the "delete_at" field in the mutation.
func (m *CouponPoolMutation) DeleteAt() (r uint32, exists bool) {
	v := m.delete_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteAt returns the old "delete_at" field's value of the CouponPool entity.
// If the CouponPool object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponPoolMutation) OldDeleteAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteAt: %w", err)
	}
	return oldValue.DeleteAt, nil
}

// AddDeleteAt adds u to the "delete_at" field.
func (m *CouponPoolMutation) AddDeleteAt(u int32) {
	if m.adddelete_at != nil {
		*m.adddelete_at += u
	} else {
		m.adddelete_at = &u
	}
}

// AddedDeleteAt returns the value that was added to the "delete_at" field in this mutation.
func (m *CouponPoolMutation) AddedDeleteAt() (r int32, exists bool) {
	v := m.adddelete_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeleteAt resets all changes to the "delete_at" field.
func (m *CouponPoolMutation) ResetDeleteAt() {
	m.delete_at = nil
	m.adddelete_at = nil
}

// Where appends a list predicates to the CouponPoolMutation builder.
func (m *CouponPoolMutation) Where(ps ...predicate.CouponPool) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *CouponPoolMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (CouponPool).
func (m *CouponPoolMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CouponPoolMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.app_id != nil {
		fields = append(fields, couponpool.FieldAppID)
	}
	if m.denomination != nil {
		fields = append(fields, couponpool.FieldDenomination)
	}
	if m.circulation != nil {
		fields = append(fields, couponpool.FieldCirculation)
	}
	if m.release_by_user_id != nil {
		fields = append(fields, couponpool.FieldReleaseByUserID)
	}
	if m.start != nil {
		fields = append(fields, couponpool.FieldStart)
	}
	if m.duration_days != nil {
		fields = append(fields, couponpool.FieldDurationDays)
	}
	if m.message != nil {
		fields = append(fields, couponpool.FieldMessage)
	}
	if m.name != nil {
		fields = append(fields, couponpool.FieldName)
	}
	if m.create_at != nil {
		fields = append(fields, couponpool.FieldCreateAt)
	}
	if m.update_at != nil {
		fields = append(fields, couponpool.FieldUpdateAt)
	}
	if m.delete_at != nil {
		fields = append(fields, couponpool.FieldDeleteAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CouponPoolMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case couponpool.FieldAppID:
		return m.AppID()
	case couponpool.FieldDenomination:
		return m.Denomination()
	case couponpool.FieldCirculation:
		return m.Circulation()
	case couponpool.FieldReleaseByUserID:
		return m.ReleaseByUserID()
	case couponpool.FieldStart:
		return m.Start()
	case couponpool.FieldDurationDays:
		return m.DurationDays()
	case couponpool.FieldMessage:
		return m.Message()
	case couponpool.FieldName:
		return m.Name()
	case couponpool.FieldCreateAt:
		return m.CreateAt()
	case couponpool.FieldUpdateAt:
		return m.UpdateAt()
	case couponpool.FieldDeleteAt:
		return m.DeleteAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CouponPoolMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case couponpool.FieldAppID:
		return m.OldAppID(ctx)
	case couponpool.FieldDenomination:
		return m.OldDenomination(ctx)
	case couponpool.FieldCirculation:
		return m.OldCirculation(ctx)
	case couponpool.FieldReleaseByUserID:
		return m.OldReleaseByUserID(ctx)
	case couponpool.FieldStart:
		return m.OldStart(ctx)
	case couponpool.FieldDurationDays:
		return m.OldDurationDays(ctx)
	case couponpool.FieldMessage:
		return m.OldMessage(ctx)
	case couponpool.FieldName:
		return m.OldName(ctx)
	case couponpool.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case couponpool.FieldUpdateAt:
		return m.OldUpdateAt(ctx)
	case couponpool.FieldDeleteAt:
		return m.OldDeleteAt(ctx)
	}
	return nil, fmt.Errorf("unknown CouponPool field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CouponPoolMutation) SetField(name string, value ent.Value) error {
	switch name {
	case couponpool.FieldAppID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case couponpool.FieldDenomination:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDenomination(v)
		return nil
	case couponpool.FieldCirculation:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCirculation(v)
		return nil
	case couponpool.FieldReleaseByUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReleaseByUserID(v)
		return nil
	case couponpool.FieldStart:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStart(v)
		return nil
	case couponpool.FieldDurationDays:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDurationDays(v)
		return nil
	case couponpool.FieldMessage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMessage(v)
		return nil
	case couponpool.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case couponpool.FieldCreateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateAt(v)
		return nil
	case couponpool.FieldUpdateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateAt(v)
		return nil
	case couponpool.FieldDeleteAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown CouponPool field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CouponPoolMutation) AddedFields() []string {
	var fields []string
	if m.adddenomination != nil {
		fields = append(fields, couponpool.FieldDenomination)
	}
	if m.addcirculation != nil {
		fields = append(fields, couponpool.FieldCirculation)
	}
	if m.addstart != nil {
		fields = append(fields, couponpool.FieldStart)
	}
	if m.addduration_days != nil {
		fields = append(fields, couponpool.FieldDurationDays)
	}
	if m.addcreate_at != nil {
		fields = append(fields, couponpool.FieldCreateAt)
	}
	if m.addupdate_at != nil {
		fields = append(fields, couponpool.FieldUpdateAt)
	}
	if m.adddelete_at != nil {
		fields = append(fields, couponpool.FieldDeleteAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CouponPoolMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case couponpool.FieldDenomination:
		return m.AddedDenomination()
	case couponpool.FieldCirculation:
		return m.AddedCirculation()
	case couponpool.FieldStart:
		return m.AddedStart()
	case couponpool.FieldDurationDays:
		return m.AddedDurationDays()
	case couponpool.FieldCreateAt:
		return m.AddedCreateAt()
	case couponpool.FieldUpdateAt:
		return m.AddedUpdateAt()
	case couponpool.FieldDeleteAt:
		return m.AddedDeleteAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CouponPoolMutation) AddField(name string, value ent.Value) error {
	switch name {
	case couponpool.FieldDenomination:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDenomination(v)
		return nil
	case couponpool.FieldCirculation:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCirculation(v)
		return nil
	case couponpool.FieldStart:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStart(v)
		return nil
	case couponpool.FieldDurationDays:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDurationDays(v)
		return nil
	case couponpool.FieldCreateAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateAt(v)
		return nil
	case couponpool.FieldUpdateAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateAt(v)
		return nil
	case couponpool.FieldDeleteAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown CouponPool numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CouponPoolMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CouponPoolMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CouponPoolMutation) ClearField(name string) error {
	return fmt.Errorf("unknown CouponPool nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CouponPoolMutation) ResetField(name string) error {
	switch name {
	case couponpool.FieldAppID:
		m.ResetAppID()
		return nil
	case couponpool.FieldDenomination:
		m.ResetDenomination()
		return nil
	case couponpool.FieldCirculation:
		m.ResetCirculation()
		return nil
	case couponpool.FieldReleaseByUserID:
		m.ResetReleaseByUserID()
		return nil
	case couponpool.FieldStart:
		m.ResetStart()
		return nil
	case couponpool.FieldDurationDays:
		m.ResetDurationDays()
		return nil
	case couponpool.FieldMessage:
		m.ResetMessage()
		return nil
	case couponpool.FieldName:
		m.ResetName()
		return nil
	case couponpool.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case couponpool.FieldUpdateAt:
		m.ResetUpdateAt()
		return nil
	case couponpool.FieldDeleteAt:
		m.ResetDeleteAt()
		return nil
	}
	return fmt.Errorf("unknown CouponPool field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CouponPoolMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CouponPoolMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CouponPoolMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CouponPoolMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CouponPoolMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CouponPoolMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CouponPoolMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown CouponPool unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CouponPoolMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown CouponPool edge %s", name)
}

// DefaultKpiSettingMutation represents an operation that mutates the DefaultKpiSetting nodes in the graph.
type DefaultKpiSettingMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	amount        *uint64
	addamount     *int64
	percent       *int32
	addpercent    *int32
	app_id        *uuid.UUID
	good_id       *uuid.UUID
	create_at     *uint32
	addcreate_at  *int32
	update_at     *uint32
	addupdate_at  *int32
	delete_at     *uint32
	adddelete_at  *int32
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*DefaultKpiSetting, error)
	predicates    []predicate.DefaultKpiSetting
}

var _ ent.Mutation = (*DefaultKpiSettingMutation)(nil)

// defaultkpisettingOption allows management of the mutation configuration using functional options.
type defaultkpisettingOption func(*DefaultKpiSettingMutation)

// newDefaultKpiSettingMutation creates new mutation for the DefaultKpiSetting entity.
func newDefaultKpiSettingMutation(c config, op Op, opts ...defaultkpisettingOption) *DefaultKpiSettingMutation {
	m := &DefaultKpiSettingMutation{
		config:        c,
		op:            op,
		typ:           TypeDefaultKpiSetting,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDefaultKpiSettingID sets the ID field of the mutation.
func withDefaultKpiSettingID(id uuid.UUID) defaultkpisettingOption {
	return func(m *DefaultKpiSettingMutation) {
		var (
			err   error
			once  sync.Once
			value *DefaultKpiSetting
		)
		m.oldValue = func(ctx context.Context) (*DefaultKpiSetting, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().DefaultKpiSetting.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDefaultKpiSetting sets the old DefaultKpiSetting of the mutation.
func withDefaultKpiSetting(node *DefaultKpiSetting) defaultkpisettingOption {
	return func(m *DefaultKpiSettingMutation) {
		m.oldValue = func(context.Context) (*DefaultKpiSetting, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DefaultKpiSettingMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DefaultKpiSettingMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of DefaultKpiSetting entities.
func (m *DefaultKpiSettingMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DefaultKpiSettingMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DefaultKpiSettingMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().DefaultKpiSetting.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAmount sets the "amount" field.
func (m *DefaultKpiSettingMutation) SetAmount(u uint64) {
	m.amount = &u
	m.addamount = nil
}

// Amount returns the value of the "amount" field in the mutation.
func (m *DefaultKpiSettingMutation) Amount() (r uint64, exists bool) {
	v := m.amount
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount returns the old "amount" field's value of the DefaultKpiSetting entity.
// If the DefaultKpiSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DefaultKpiSettingMutation) OldAmount(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount: %w", err)
	}
	return oldValue.Amount, nil
}

// AddAmount adds u to the "amount" field.
func (m *DefaultKpiSettingMutation) AddAmount(u int64) {
	if m.addamount != nil {
		*m.addamount += u
	} else {
		m.addamount = &u
	}
}

// AddedAmount returns the value that was added to the "amount" field in this mutation.
func (m *DefaultKpiSettingMutation) AddedAmount() (r int64, exists bool) {
	v := m.addamount
	if v == nil {
		return
	}
	return *v, true
}

// ResetAmount resets all changes to the "amount" field.
func (m *DefaultKpiSettingMutation) ResetAmount() {
	m.amount = nil
	m.addamount = nil
}

// SetPercent sets the "percent" field.
func (m *DefaultKpiSettingMutation) SetPercent(i int32) {
	m.percent = &i
	m.addpercent = nil
}

// Percent returns the value of the "percent" field in the mutation.
func (m *DefaultKpiSettingMutation) Percent() (r int32, exists bool) {
	v := m.percent
	if v == nil {
		return
	}
	return *v, true
}

// OldPercent returns the old "percent" field's value of the DefaultKpiSetting entity.
// If the DefaultKpiSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DefaultKpiSettingMutation) OldPercent(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPercent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPercent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPercent: %w", err)
	}
	return oldValue.Percent, nil
}

// AddPercent adds i to the "percent" field.
func (m *DefaultKpiSettingMutation) AddPercent(i int32) {
	if m.addpercent != nil {
		*m.addpercent += i
	} else {
		m.addpercent = &i
	}
}

// AddedPercent returns the value that was added to the "percent" field in this mutation.
func (m *DefaultKpiSettingMutation) AddedPercent() (r int32, exists bool) {
	v := m.addpercent
	if v == nil {
		return
	}
	return *v, true
}

// ResetPercent resets all changes to the "percent" field.
func (m *DefaultKpiSettingMutation) ResetPercent() {
	m.percent = nil
	m.addpercent = nil
}

// SetAppID sets the "app_id" field.
func (m *DefaultKpiSettingMutation) SetAppID(u uuid.UUID) {
	m.app_id = &u
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *DefaultKpiSettingMutation) AppID() (r uuid.UUID, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the DefaultKpiSetting entity.
// If the DefaultKpiSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DefaultKpiSettingMutation) OldAppID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ResetAppID resets all changes to the "app_id" field.
func (m *DefaultKpiSettingMutation) ResetAppID() {
	m.app_id = nil
}

// SetGoodID sets the "good_id" field.
func (m *DefaultKpiSettingMutation) SetGoodID(u uuid.UUID) {
	m.good_id = &u
}

// GoodID returns the value of the "good_id" field in the mutation.
func (m *DefaultKpiSettingMutation) GoodID() (r uuid.UUID, exists bool) {
	v := m.good_id
	if v == nil {
		return
	}
	return *v, true
}

// OldGoodID returns the old "good_id" field's value of the DefaultKpiSetting entity.
// If the DefaultKpiSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DefaultKpiSettingMutation) OldGoodID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGoodID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGoodID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGoodID: %w", err)
	}
	return oldValue.GoodID, nil
}

// ResetGoodID resets all changes to the "good_id" field.
func (m *DefaultKpiSettingMutation) ResetGoodID() {
	m.good_id = nil
}

// SetCreateAt sets the "create_at" field.
func (m *DefaultKpiSettingMutation) SetCreateAt(u uint32) {
	m.create_at = &u
	m.addcreate_at = nil
}

// CreateAt returns the value of the "create_at" field in the mutation.
func (m *DefaultKpiSettingMutation) CreateAt() (r uint32, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateAt returns the old "create_at" field's value of the DefaultKpiSetting entity.
// If the DefaultKpiSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DefaultKpiSettingMutation) OldCreateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}
	return oldValue.CreateAt, nil
}

// AddCreateAt adds u to the "create_at" field.
func (m *DefaultKpiSettingMutation) AddCreateAt(u int32) {
	if m.addcreate_at != nil {
		*m.addcreate_at += u
	} else {
		m.addcreate_at = &u
	}
}

// AddedCreateAt returns the value that was added to the "create_at" field in this mutation.
func (m *DefaultKpiSettingMutation) AddedCreateAt() (r int32, exists bool) {
	v := m.addcreate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateAt resets all changes to the "create_at" field.
func (m *DefaultKpiSettingMutation) ResetCreateAt() {
	m.create_at = nil
	m.addcreate_at = nil
}

// SetUpdateAt sets the "update_at" field.
func (m *DefaultKpiSettingMutation) SetUpdateAt(u uint32) {
	m.update_at = &u
	m.addupdate_at = nil
}

// UpdateAt returns the value of the "update_at" field in the mutation.
func (m *DefaultKpiSettingMutation) UpdateAt() (r uint32, exists bool) {
	v := m.update_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateAt returns the old "update_at" field's value of the DefaultKpiSetting entity.
// If the DefaultKpiSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DefaultKpiSettingMutation) OldUpdateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateAt: %w", err)
	}
	return oldValue.UpdateAt, nil
}

// AddUpdateAt adds u to the "update_at" field.
func (m *DefaultKpiSettingMutation) AddUpdateAt(u int32) {
	if m.addupdate_at != nil {
		*m.addupdate_at += u
	} else {
		m.addupdate_at = &u
	}
}

// AddedUpdateAt returns the value that was added to the "update_at" field in this mutation.
func (m *DefaultKpiSettingMutation) AddedUpdateAt() (r int32, exists bool) {
	v := m.addupdate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateAt resets all changes to the "update_at" field.
func (m *DefaultKpiSettingMutation) ResetUpdateAt() {
	m.update_at = nil
	m.addupdate_at = nil
}

// SetDeleteAt sets the "delete_at" field.
func (m *DefaultKpiSettingMutation) SetDeleteAt(u uint32) {
	m.delete_at = &u
	m.adddelete_at = nil
}

// DeleteAt returns the value of the "delete_at" field in the mutation.
func (m *DefaultKpiSettingMutation) DeleteAt() (r uint32, exists bool) {
	v := m.delete_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteAt returns the old "delete_at" field's value of the DefaultKpiSetting entity.
// If the DefaultKpiSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DefaultKpiSettingMutation) OldDeleteAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteAt: %w", err)
	}
	return oldValue.DeleteAt, nil
}

// AddDeleteAt adds u to the "delete_at" field.
func (m *DefaultKpiSettingMutation) AddDeleteAt(u int32) {
	if m.adddelete_at != nil {
		*m.adddelete_at += u
	} else {
		m.adddelete_at = &u
	}
}

// AddedDeleteAt returns the value that was added to the "delete_at" field in this mutation.
func (m *DefaultKpiSettingMutation) AddedDeleteAt() (r int32, exists bool) {
	v := m.adddelete_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeleteAt resets all changes to the "delete_at" field.
func (m *DefaultKpiSettingMutation) ResetDeleteAt() {
	m.delete_at = nil
	m.adddelete_at = nil
}

// Where appends a list predicates to the DefaultKpiSettingMutation builder.
func (m *DefaultKpiSettingMutation) Where(ps ...predicate.DefaultKpiSetting) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *DefaultKpiSettingMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (DefaultKpiSetting).
func (m *DefaultKpiSettingMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DefaultKpiSettingMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.amount != nil {
		fields = append(fields, defaultkpisetting.FieldAmount)
	}
	if m.percent != nil {
		fields = append(fields, defaultkpisetting.FieldPercent)
	}
	if m.app_id != nil {
		fields = append(fields, defaultkpisetting.FieldAppID)
	}
	if m.good_id != nil {
		fields = append(fields, defaultkpisetting.FieldGoodID)
	}
	if m.create_at != nil {
		fields = append(fields, defaultkpisetting.FieldCreateAt)
	}
	if m.update_at != nil {
		fields = append(fields, defaultkpisetting.FieldUpdateAt)
	}
	if m.delete_at != nil {
		fields = append(fields, defaultkpisetting.FieldDeleteAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DefaultKpiSettingMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case defaultkpisetting.FieldAmount:
		return m.Amount()
	case defaultkpisetting.FieldPercent:
		return m.Percent()
	case defaultkpisetting.FieldAppID:
		return m.AppID()
	case defaultkpisetting.FieldGoodID:
		return m.GoodID()
	case defaultkpisetting.FieldCreateAt:
		return m.CreateAt()
	case defaultkpisetting.FieldUpdateAt:
		return m.UpdateAt()
	case defaultkpisetting.FieldDeleteAt:
		return m.DeleteAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DefaultKpiSettingMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case defaultkpisetting.FieldAmount:
		return m.OldAmount(ctx)
	case defaultkpisetting.FieldPercent:
		return m.OldPercent(ctx)
	case defaultkpisetting.FieldAppID:
		return m.OldAppID(ctx)
	case defaultkpisetting.FieldGoodID:
		return m.OldGoodID(ctx)
	case defaultkpisetting.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case defaultkpisetting.FieldUpdateAt:
		return m.OldUpdateAt(ctx)
	case defaultkpisetting.FieldDeleteAt:
		return m.OldDeleteAt(ctx)
	}
	return nil, fmt.Errorf("unknown DefaultKpiSetting field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DefaultKpiSettingMutation) SetField(name string, value ent.Value) error {
	switch name {
	case defaultkpisetting.FieldAmount:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount(v)
		return nil
	case defaultkpisetting.FieldPercent:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPercent(v)
		return nil
	case defaultkpisetting.FieldAppID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case defaultkpisetting.FieldGoodID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGoodID(v)
		return nil
	case defaultkpisetting.FieldCreateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateAt(v)
		return nil
	case defaultkpisetting.FieldUpdateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateAt(v)
		return nil
	case defaultkpisetting.FieldDeleteAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown DefaultKpiSetting field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DefaultKpiSettingMutation) AddedFields() []string {
	var fields []string
	if m.addamount != nil {
		fields = append(fields, defaultkpisetting.FieldAmount)
	}
	if m.addpercent != nil {
		fields = append(fields, defaultkpisetting.FieldPercent)
	}
	if m.addcreate_at != nil {
		fields = append(fields, defaultkpisetting.FieldCreateAt)
	}
	if m.addupdate_at != nil {
		fields = append(fields, defaultkpisetting.FieldUpdateAt)
	}
	if m.adddelete_at != nil {
		fields = append(fields, defaultkpisetting.FieldDeleteAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DefaultKpiSettingMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case defaultkpisetting.FieldAmount:
		return m.AddedAmount()
	case defaultkpisetting.FieldPercent:
		return m.AddedPercent()
	case defaultkpisetting.FieldCreateAt:
		return m.AddedCreateAt()
	case defaultkpisetting.FieldUpdateAt:
		return m.AddedUpdateAt()
	case defaultkpisetting.FieldDeleteAt:
		return m.AddedDeleteAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DefaultKpiSettingMutation) AddField(name string, value ent.Value) error {
	switch name {
	case defaultkpisetting.FieldAmount:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAmount(v)
		return nil
	case defaultkpisetting.FieldPercent:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPercent(v)
		return nil
	case defaultkpisetting.FieldCreateAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateAt(v)
		return nil
	case defaultkpisetting.FieldUpdateAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateAt(v)
		return nil
	case defaultkpisetting.FieldDeleteAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown DefaultKpiSetting numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DefaultKpiSettingMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DefaultKpiSettingMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DefaultKpiSettingMutation) ClearField(name string) error {
	return fmt.Errorf("unknown DefaultKpiSetting nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DefaultKpiSettingMutation) ResetField(name string) error {
	switch name {
	case defaultkpisetting.FieldAmount:
		m.ResetAmount()
		return nil
	case defaultkpisetting.FieldPercent:
		m.ResetPercent()
		return nil
	case defaultkpisetting.FieldAppID:
		m.ResetAppID()
		return nil
	case defaultkpisetting.FieldGoodID:
		m.ResetGoodID()
		return nil
	case defaultkpisetting.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case defaultkpisetting.FieldUpdateAt:
		m.ResetUpdateAt()
		return nil
	case defaultkpisetting.FieldDeleteAt:
		m.ResetDeleteAt()
		return nil
	}
	return fmt.Errorf("unknown DefaultKpiSetting field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DefaultKpiSettingMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DefaultKpiSettingMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DefaultKpiSettingMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DefaultKpiSettingMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DefaultKpiSettingMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DefaultKpiSettingMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DefaultKpiSettingMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown DefaultKpiSetting unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DefaultKpiSettingMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown DefaultKpiSetting edge %s", name)
}

// DiscountPoolMutation represents an operation that mutates the DiscountPool nodes in the graph.
type DiscountPoolMutation struct {
	config
	op                 Op
	typ                string
	id                 *uuid.UUID
	app_id             *uuid.UUID
	discount           *uint32
	adddiscount        *int32
	release_by_user_id *uuid.UUID
	start              *uint32
	addstart           *int32
	duration_days      *int32
	addduration_days   *int32
	message            *string
	name               *string
	create_at          *uint32
	addcreate_at       *int32
	update_at          *uint32
	addupdate_at       *int32
	delete_at          *uint32
	adddelete_at       *int32
	clearedFields      map[string]struct{}
	done               bool
	oldValue           func(context.Context) (*DiscountPool, error)
	predicates         []predicate.DiscountPool
}

var _ ent.Mutation = (*DiscountPoolMutation)(nil)

// discountpoolOption allows management of the mutation configuration using functional options.
type discountpoolOption func(*DiscountPoolMutation)

// newDiscountPoolMutation creates new mutation for the DiscountPool entity.
func newDiscountPoolMutation(c config, op Op, opts ...discountpoolOption) *DiscountPoolMutation {
	m := &DiscountPoolMutation{
		config:        c,
		op:            op,
		typ:           TypeDiscountPool,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDiscountPoolID sets the ID field of the mutation.
func withDiscountPoolID(id uuid.UUID) discountpoolOption {
	return func(m *DiscountPoolMutation) {
		var (
			err   error
			once  sync.Once
			value *DiscountPool
		)
		m.oldValue = func(ctx context.Context) (*DiscountPool, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().DiscountPool.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDiscountPool sets the old DiscountPool of the mutation.
func withDiscountPool(node *DiscountPool) discountpoolOption {
	return func(m *DiscountPoolMutation) {
		m.oldValue = func(context.Context) (*DiscountPool, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DiscountPoolMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DiscountPoolMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of DiscountPool entities.
func (m *DiscountPoolMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DiscountPoolMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DiscountPoolMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().DiscountPool.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAppID sets the "app_id" field.
func (m *DiscountPoolMutation) SetAppID(u uuid.UUID) {
	m.app_id = &u
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *DiscountPoolMutation) AppID() (r uuid.UUID, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the DiscountPool entity.
// If the DiscountPool object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DiscountPoolMutation) OldAppID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ResetAppID resets all changes to the "app_id" field.
func (m *DiscountPoolMutation) ResetAppID() {
	m.app_id = nil
}

// SetDiscount sets the "discount" field.
func (m *DiscountPoolMutation) SetDiscount(u uint32) {
	m.discount = &u
	m.adddiscount = nil
}

// Discount returns the value of the "discount" field in the mutation.
func (m *DiscountPoolMutation) Discount() (r uint32, exists bool) {
	v := m.discount
	if v == nil {
		return
	}
	return *v, true
}

// OldDiscount returns the old "discount" field's value of the DiscountPool entity.
// If the DiscountPool object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DiscountPoolMutation) OldDiscount(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDiscount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDiscount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDiscount: %w", err)
	}
	return oldValue.Discount, nil
}

// AddDiscount adds u to the "discount" field.
func (m *DiscountPoolMutation) AddDiscount(u int32) {
	if m.adddiscount != nil {
		*m.adddiscount += u
	} else {
		m.adddiscount = &u
	}
}

// AddedDiscount returns the value that was added to the "discount" field in this mutation.
func (m *DiscountPoolMutation) AddedDiscount() (r int32, exists bool) {
	v := m.adddiscount
	if v == nil {
		return
	}
	return *v, true
}

// ResetDiscount resets all changes to the "discount" field.
func (m *DiscountPoolMutation) ResetDiscount() {
	m.discount = nil
	m.adddiscount = nil
}

// SetReleaseByUserID sets the "release_by_user_id" field.
func (m *DiscountPoolMutation) SetReleaseByUserID(u uuid.UUID) {
	m.release_by_user_id = &u
}

// ReleaseByUserID returns the value of the "release_by_user_id" field in the mutation.
func (m *DiscountPoolMutation) ReleaseByUserID() (r uuid.UUID, exists bool) {
	v := m.release_by_user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldReleaseByUserID returns the old "release_by_user_id" field's value of the DiscountPool entity.
// If the DiscountPool object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DiscountPoolMutation) OldReleaseByUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReleaseByUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReleaseByUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReleaseByUserID: %w", err)
	}
	return oldValue.ReleaseByUserID, nil
}

// ResetReleaseByUserID resets all changes to the "release_by_user_id" field.
func (m *DiscountPoolMutation) ResetReleaseByUserID() {
	m.release_by_user_id = nil
}

// SetStart sets the "start" field.
func (m *DiscountPoolMutation) SetStart(u uint32) {
	m.start = &u
	m.addstart = nil
}

// Start returns the value of the "start" field in the mutation.
func (m *DiscountPoolMutation) Start() (r uint32, exists bool) {
	v := m.start
	if v == nil {
		return
	}
	return *v, true
}

// OldStart returns the old "start" field's value of the DiscountPool entity.
// If the DiscountPool object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DiscountPoolMutation) OldStart(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStart is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStart requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStart: %w", err)
	}
	return oldValue.Start, nil
}

// AddStart adds u to the "start" field.
func (m *DiscountPoolMutation) AddStart(u int32) {
	if m.addstart != nil {
		*m.addstart += u
	} else {
		m.addstart = &u
	}
}

// AddedStart returns the value that was added to the "start" field in this mutation.
func (m *DiscountPoolMutation) AddedStart() (r int32, exists bool) {
	v := m.addstart
	if v == nil {
		return
	}
	return *v, true
}

// ResetStart resets all changes to the "start" field.
func (m *DiscountPoolMutation) ResetStart() {
	m.start = nil
	m.addstart = nil
}

// SetDurationDays sets the "duration_days" field.
func (m *DiscountPoolMutation) SetDurationDays(i int32) {
	m.duration_days = &i
	m.addduration_days = nil
}

// DurationDays returns the value of the "duration_days" field in the mutation.
func (m *DiscountPoolMutation) DurationDays() (r int32, exists bool) {
	v := m.duration_days
	if v == nil {
		return
	}
	return *v, true
}

// OldDurationDays returns the old "duration_days" field's value of the DiscountPool entity.
// If the DiscountPool object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DiscountPoolMutation) OldDurationDays(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDurationDays is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDurationDays requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDurationDays: %w", err)
	}
	return oldValue.DurationDays, nil
}

// AddDurationDays adds i to the "duration_days" field.
func (m *DiscountPoolMutation) AddDurationDays(i int32) {
	if m.addduration_days != nil {
		*m.addduration_days += i
	} else {
		m.addduration_days = &i
	}
}

// AddedDurationDays returns the value that was added to the "duration_days" field in this mutation.
func (m *DiscountPoolMutation) AddedDurationDays() (r int32, exists bool) {
	v := m.addduration_days
	if v == nil {
		return
	}
	return *v, true
}

// ResetDurationDays resets all changes to the "duration_days" field.
func (m *DiscountPoolMutation) ResetDurationDays() {
	m.duration_days = nil
	m.addduration_days = nil
}

// SetMessage sets the "message" field.
func (m *DiscountPoolMutation) SetMessage(s string) {
	m.message = &s
}

// Message returns the value of the "message" field in the mutation.
func (m *DiscountPoolMutation) Message() (r string, exists bool) {
	v := m.message
	if v == nil {
		return
	}
	return *v, true
}

// OldMessage returns the old "message" field's value of the DiscountPool entity.
// If the DiscountPool object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DiscountPoolMutation) OldMessage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMessage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMessage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMessage: %w", err)
	}
	return oldValue.Message, nil
}

// ResetMessage resets all changes to the "message" field.
func (m *DiscountPoolMutation) ResetMessage() {
	m.message = nil
}

// SetName sets the "name" field.
func (m *DiscountPoolMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *DiscountPoolMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the DiscountPool entity.
// If the DiscountPool object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DiscountPoolMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *DiscountPoolMutation) ResetName() {
	m.name = nil
}

// SetCreateAt sets the "create_at" field.
func (m *DiscountPoolMutation) SetCreateAt(u uint32) {
	m.create_at = &u
	m.addcreate_at = nil
}

// CreateAt returns the value of the "create_at" field in the mutation.
func (m *DiscountPoolMutation) CreateAt() (r uint32, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateAt returns the old "create_at" field's value of the DiscountPool entity.
// If the DiscountPool object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DiscountPoolMutation) OldCreateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}
	return oldValue.CreateAt, nil
}

// AddCreateAt adds u to the "create_at" field.
func (m *DiscountPoolMutation) AddCreateAt(u int32) {
	if m.addcreate_at != nil {
		*m.addcreate_at += u
	} else {
		m.addcreate_at = &u
	}
}

// AddedCreateAt returns the value that was added to the "create_at" field in this mutation.
func (m *DiscountPoolMutation) AddedCreateAt() (r int32, exists bool) {
	v := m.addcreate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateAt resets all changes to the "create_at" field.
func (m *DiscountPoolMutation) ResetCreateAt() {
	m.create_at = nil
	m.addcreate_at = nil
}

// SetUpdateAt sets the "update_at" field.
func (m *DiscountPoolMutation) SetUpdateAt(u uint32) {
	m.update_at = &u
	m.addupdate_at = nil
}

// UpdateAt returns the value of the "update_at" field in the mutation.
func (m *DiscountPoolMutation) UpdateAt() (r uint32, exists bool) {
	v := m.update_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateAt returns the old "update_at" field's value of the DiscountPool entity.
// If the DiscountPool object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DiscountPoolMutation) OldUpdateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateAt: %w", err)
	}
	return oldValue.UpdateAt, nil
}

// AddUpdateAt adds u to the "update_at" field.
func (m *DiscountPoolMutation) AddUpdateAt(u int32) {
	if m.addupdate_at != nil {
		*m.addupdate_at += u
	} else {
		m.addupdate_at = &u
	}
}

// AddedUpdateAt returns the value that was added to the "update_at" field in this mutation.
func (m *DiscountPoolMutation) AddedUpdateAt() (r int32, exists bool) {
	v := m.addupdate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateAt resets all changes to the "update_at" field.
func (m *DiscountPoolMutation) ResetUpdateAt() {
	m.update_at = nil
	m.addupdate_at = nil
}

// SetDeleteAt sets the "delete_at" field.
func (m *DiscountPoolMutation) SetDeleteAt(u uint32) {
	m.delete_at = &u
	m.adddelete_at = nil
}

// DeleteAt returns the value of the "delete_at" field in the mutation.
func (m *DiscountPoolMutation) DeleteAt() (r uint32, exists bool) {
	v := m.delete_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteAt returns the old "delete_at" field's value of the DiscountPool entity.
// If the DiscountPool object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DiscountPoolMutation) OldDeleteAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteAt: %w", err)
	}
	return oldValue.DeleteAt, nil
}

// AddDeleteAt adds u to the "delete_at" field.
func (m *DiscountPoolMutation) AddDeleteAt(u int32) {
	if m.adddelete_at != nil {
		*m.adddelete_at += u
	} else {
		m.adddelete_at = &u
	}
}

// AddedDeleteAt returns the value that was added to the "delete_at" field in this mutation.
func (m *DiscountPoolMutation) AddedDeleteAt() (r int32, exists bool) {
	v := m.adddelete_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeleteAt resets all changes to the "delete_at" field.
func (m *DiscountPoolMutation) ResetDeleteAt() {
	m.delete_at = nil
	m.adddelete_at = nil
}

// Where appends a list predicates to the DiscountPoolMutation builder.
func (m *DiscountPoolMutation) Where(ps ...predicate.DiscountPool) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *DiscountPoolMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (DiscountPool).
func (m *DiscountPoolMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DiscountPoolMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.app_id != nil {
		fields = append(fields, discountpool.FieldAppID)
	}
	if m.discount != nil {
		fields = append(fields, discountpool.FieldDiscount)
	}
	if m.release_by_user_id != nil {
		fields = append(fields, discountpool.FieldReleaseByUserID)
	}
	if m.start != nil {
		fields = append(fields, discountpool.FieldStart)
	}
	if m.duration_days != nil {
		fields = append(fields, discountpool.FieldDurationDays)
	}
	if m.message != nil {
		fields = append(fields, discountpool.FieldMessage)
	}
	if m.name != nil {
		fields = append(fields, discountpool.FieldName)
	}
	if m.create_at != nil {
		fields = append(fields, discountpool.FieldCreateAt)
	}
	if m.update_at != nil {
		fields = append(fields, discountpool.FieldUpdateAt)
	}
	if m.delete_at != nil {
		fields = append(fields, discountpool.FieldDeleteAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DiscountPoolMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case discountpool.FieldAppID:
		return m.AppID()
	case discountpool.FieldDiscount:
		return m.Discount()
	case discountpool.FieldReleaseByUserID:
		return m.ReleaseByUserID()
	case discountpool.FieldStart:
		return m.Start()
	case discountpool.FieldDurationDays:
		return m.DurationDays()
	case discountpool.FieldMessage:
		return m.Message()
	case discountpool.FieldName:
		return m.Name()
	case discountpool.FieldCreateAt:
		return m.CreateAt()
	case discountpool.FieldUpdateAt:
		return m.UpdateAt()
	case discountpool.FieldDeleteAt:
		return m.DeleteAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DiscountPoolMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case discountpool.FieldAppID:
		return m.OldAppID(ctx)
	case discountpool.FieldDiscount:
		return m.OldDiscount(ctx)
	case discountpool.FieldReleaseByUserID:
		return m.OldReleaseByUserID(ctx)
	case discountpool.FieldStart:
		return m.OldStart(ctx)
	case discountpool.FieldDurationDays:
		return m.OldDurationDays(ctx)
	case discountpool.FieldMessage:
		return m.OldMessage(ctx)
	case discountpool.FieldName:
		return m.OldName(ctx)
	case discountpool.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case discountpool.FieldUpdateAt:
		return m.OldUpdateAt(ctx)
	case discountpool.FieldDeleteAt:
		return m.OldDeleteAt(ctx)
	}
	return nil, fmt.Errorf("unknown DiscountPool field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DiscountPoolMutation) SetField(name string, value ent.Value) error {
	switch name {
	case discountpool.FieldAppID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case discountpool.FieldDiscount:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDiscount(v)
		return nil
	case discountpool.FieldReleaseByUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReleaseByUserID(v)
		return nil
	case discountpool.FieldStart:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStart(v)
		return nil
	case discountpool.FieldDurationDays:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDurationDays(v)
		return nil
	case discountpool.FieldMessage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMessage(v)
		return nil
	case discountpool.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case discountpool.FieldCreateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateAt(v)
		return nil
	case discountpool.FieldUpdateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateAt(v)
		return nil
	case discountpool.FieldDeleteAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown DiscountPool field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DiscountPoolMutation) AddedFields() []string {
	var fields []string
	if m.adddiscount != nil {
		fields = append(fields, discountpool.FieldDiscount)
	}
	if m.addstart != nil {
		fields = append(fields, discountpool.FieldStart)
	}
	if m.addduration_days != nil {
		fields = append(fields, discountpool.FieldDurationDays)
	}
	if m.addcreate_at != nil {
		fields = append(fields, discountpool.FieldCreateAt)
	}
	if m.addupdate_at != nil {
		fields = append(fields, discountpool.FieldUpdateAt)
	}
	if m.adddelete_at != nil {
		fields = append(fields, discountpool.FieldDeleteAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DiscountPoolMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case discountpool.FieldDiscount:
		return m.AddedDiscount()
	case discountpool.FieldStart:
		return m.AddedStart()
	case discountpool.FieldDurationDays:
		return m.AddedDurationDays()
	case discountpool.FieldCreateAt:
		return m.AddedCreateAt()
	case discountpool.FieldUpdateAt:
		return m.AddedUpdateAt()
	case discountpool.FieldDeleteAt:
		return m.AddedDeleteAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DiscountPoolMutation) AddField(name string, value ent.Value) error {
	switch name {
	case discountpool.FieldDiscount:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDiscount(v)
		return nil
	case discountpool.FieldStart:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStart(v)
		return nil
	case discountpool.FieldDurationDays:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDurationDays(v)
		return nil
	case discountpool.FieldCreateAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateAt(v)
		return nil
	case discountpool.FieldUpdateAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateAt(v)
		return nil
	case discountpool.FieldDeleteAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown DiscountPool numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DiscountPoolMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DiscountPoolMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DiscountPoolMutation) ClearField(name string) error {
	return fmt.Errorf("unknown DiscountPool nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DiscountPoolMutation) ResetField(name string) error {
	switch name {
	case discountpool.FieldAppID:
		m.ResetAppID()
		return nil
	case discountpool.FieldDiscount:
		m.ResetDiscount()
		return nil
	case discountpool.FieldReleaseByUserID:
		m.ResetReleaseByUserID()
		return nil
	case discountpool.FieldStart:
		m.ResetStart()
		return nil
	case discountpool.FieldDurationDays:
		m.ResetDurationDays()
		return nil
	case discountpool.FieldMessage:
		m.ResetMessage()
		return nil
	case discountpool.FieldName:
		m.ResetName()
		return nil
	case discountpool.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case discountpool.FieldUpdateAt:
		m.ResetUpdateAt()
		return nil
	case discountpool.FieldDeleteAt:
		m.ResetDeleteAt()
		return nil
	}
	return fmt.Errorf("unknown DiscountPool field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DiscountPoolMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DiscountPoolMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DiscountPoolMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DiscountPoolMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DiscountPoolMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DiscountPoolMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DiscountPoolMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown DiscountPool unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DiscountPoolMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown DiscountPool edge %s", name)
}

// EventCouponMutation represents an operation that mutates the EventCoupon nodes in the graph.
type EventCouponMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	app_id        *uuid.UUID
	activity_id   *uuid.UUID
	_type         *string
	coupon_id     *uuid.UUID
	event         *string
	count         *uint32
	addcount      *int32
	create_at     *uint32
	addcreate_at  *int32
	update_at     *uint32
	addupdate_at  *int32
	delete_at     *uint32
	adddelete_at  *int32
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*EventCoupon, error)
	predicates    []predicate.EventCoupon
}

var _ ent.Mutation = (*EventCouponMutation)(nil)

// eventcouponOption allows management of the mutation configuration using functional options.
type eventcouponOption func(*EventCouponMutation)

// newEventCouponMutation creates new mutation for the EventCoupon entity.
func newEventCouponMutation(c config, op Op, opts ...eventcouponOption) *EventCouponMutation {
	m := &EventCouponMutation{
		config:        c,
		op:            op,
		typ:           TypeEventCoupon,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEventCouponID sets the ID field of the mutation.
func withEventCouponID(id uuid.UUID) eventcouponOption {
	return func(m *EventCouponMutation) {
		var (
			err   error
			once  sync.Once
			value *EventCoupon
		)
		m.oldValue = func(ctx context.Context) (*EventCoupon, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().EventCoupon.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEventCoupon sets the old EventCoupon of the mutation.
func withEventCoupon(node *EventCoupon) eventcouponOption {
	return func(m *EventCouponMutation) {
		m.oldValue = func(context.Context) (*EventCoupon, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EventCouponMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EventCouponMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of EventCoupon entities.
func (m *EventCouponMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EventCouponMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EventCouponMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().EventCoupon.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAppID sets the "app_id" field.
func (m *EventCouponMutation) SetAppID(u uuid.UUID) {
	m.app_id = &u
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *EventCouponMutation) AppID() (r uuid.UUID, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the EventCoupon entity.
// If the EventCoupon object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventCouponMutation) OldAppID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ResetAppID resets all changes to the "app_id" field.
func (m *EventCouponMutation) ResetAppID() {
	m.app_id = nil
}

// SetActivityID sets the "activity_id" field.
func (m *EventCouponMutation) SetActivityID(u uuid.UUID) {
	m.activity_id = &u
}

// ActivityID returns the value of the "activity_id" field in the mutation.
func (m *EventCouponMutation) ActivityID() (r uuid.UUID, exists bool) {
	v := m.activity_id
	if v == nil {
		return
	}
	return *v, true
}

// OldActivityID returns the old "activity_id" field's value of the EventCoupon entity.
// If the EventCoupon object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventCouponMutation) OldActivityID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActivityID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActivityID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActivityID: %w", err)
	}
	return oldValue.ActivityID, nil
}

// ResetActivityID resets all changes to the "activity_id" field.
func (m *EventCouponMutation) ResetActivityID() {
	m.activity_id = nil
}

// SetType sets the "type" field.
func (m *EventCouponMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *EventCouponMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the EventCoupon entity.
// If the EventCoupon object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventCouponMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *EventCouponMutation) ResetType() {
	m._type = nil
}

// SetCouponID sets the "coupon_id" field.
func (m *EventCouponMutation) SetCouponID(u uuid.UUID) {
	m.coupon_id = &u
}

// CouponID returns the value of the "coupon_id" field in the mutation.
func (m *EventCouponMutation) CouponID() (r uuid.UUID, exists bool) {
	v := m.coupon_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCouponID returns the old "coupon_id" field's value of the EventCoupon entity.
// If the EventCoupon object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventCouponMutation) OldCouponID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCouponID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCouponID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCouponID: %w", err)
	}
	return oldValue.CouponID, nil
}

// ResetCouponID resets all changes to the "coupon_id" field.
func (m *EventCouponMutation) ResetCouponID() {
	m.coupon_id = nil
}

// SetEvent sets the "event" field.
func (m *EventCouponMutation) SetEvent(s string) {
	m.event = &s
}

// Event returns the value of the "event" field in the mutation.
func (m *EventCouponMutation) Event() (r string, exists bool) {
	v := m.event
	if v == nil {
		return
	}
	return *v, true
}

// OldEvent returns the old "event" field's value of the EventCoupon entity.
// If the EventCoupon object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventCouponMutation) OldEvent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEvent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEvent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEvent: %w", err)
	}
	return oldValue.Event, nil
}

// ResetEvent resets all changes to the "event" field.
func (m *EventCouponMutation) ResetEvent() {
	m.event = nil
}

// SetCount sets the "count" field.
func (m *EventCouponMutation) SetCount(u uint32) {
	m.count = &u
	m.addcount = nil
}

// Count returns the value of the "count" field in the mutation.
func (m *EventCouponMutation) Count() (r uint32, exists bool) {
	v := m.count
	if v == nil {
		return
	}
	return *v, true
}

// OldCount returns the old "count" field's value of the EventCoupon entity.
// If the EventCoupon object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventCouponMutation) OldCount(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCount: %w", err)
	}
	return oldValue.Count, nil
}

// AddCount adds u to the "count" field.
func (m *EventCouponMutation) AddCount(u int32) {
	if m.addcount != nil {
		*m.addcount += u
	} else {
		m.addcount = &u
	}
}

// AddedCount returns the value that was added to the "count" field in this mutation.
func (m *EventCouponMutation) AddedCount() (r int32, exists bool) {
	v := m.addcount
	if v == nil {
		return
	}
	return *v, true
}

// ResetCount resets all changes to the "count" field.
func (m *EventCouponMutation) ResetCount() {
	m.count = nil
	m.addcount = nil
}

// SetCreateAt sets the "create_at" field.
func (m *EventCouponMutation) SetCreateAt(u uint32) {
	m.create_at = &u
	m.addcreate_at = nil
}

// CreateAt returns the value of the "create_at" field in the mutation.
func (m *EventCouponMutation) CreateAt() (r uint32, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateAt returns the old "create_at" field's value of the EventCoupon entity.
// If the EventCoupon object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventCouponMutation) OldCreateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}
	return oldValue.CreateAt, nil
}

// AddCreateAt adds u to the "create_at" field.
func (m *EventCouponMutation) AddCreateAt(u int32) {
	if m.addcreate_at != nil {
		*m.addcreate_at += u
	} else {
		m.addcreate_at = &u
	}
}

// AddedCreateAt returns the value that was added to the "create_at" field in this mutation.
func (m *EventCouponMutation) AddedCreateAt() (r int32, exists bool) {
	v := m.addcreate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateAt resets all changes to the "create_at" field.
func (m *EventCouponMutation) ResetCreateAt() {
	m.create_at = nil
	m.addcreate_at = nil
}

// SetUpdateAt sets the "update_at" field.
func (m *EventCouponMutation) SetUpdateAt(u uint32) {
	m.update_at = &u
	m.addupdate_at = nil
}

// UpdateAt returns the value of the "update_at" field in the mutation.
func (m *EventCouponMutation) UpdateAt() (r uint32, exists bool) {
	v := m.update_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateAt returns the old "update_at" field's value of the EventCoupon entity.
// If the EventCoupon object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventCouponMutation) OldUpdateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateAt: %w", err)
	}
	return oldValue.UpdateAt, nil
}

// AddUpdateAt adds u to the "update_at" field.
func (m *EventCouponMutation) AddUpdateAt(u int32) {
	if m.addupdate_at != nil {
		*m.addupdate_at += u
	} else {
		m.addupdate_at = &u
	}
}

// AddedUpdateAt returns the value that was added to the "update_at" field in this mutation.
func (m *EventCouponMutation) AddedUpdateAt() (r int32, exists bool) {
	v := m.addupdate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateAt resets all changes to the "update_at" field.
func (m *EventCouponMutation) ResetUpdateAt() {
	m.update_at = nil
	m.addupdate_at = nil
}

// SetDeleteAt sets the "delete_at" field.
func (m *EventCouponMutation) SetDeleteAt(u uint32) {
	m.delete_at = &u
	m.adddelete_at = nil
}

// DeleteAt returns the value of the "delete_at" field in the mutation.
func (m *EventCouponMutation) DeleteAt() (r uint32, exists bool) {
	v := m.delete_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteAt returns the old "delete_at" field's value of the EventCoupon entity.
// If the EventCoupon object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventCouponMutation) OldDeleteAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteAt: %w", err)
	}
	return oldValue.DeleteAt, nil
}

// AddDeleteAt adds u to the "delete_at" field.
func (m *EventCouponMutation) AddDeleteAt(u int32) {
	if m.adddelete_at != nil {
		*m.adddelete_at += u
	} else {
		m.adddelete_at = &u
	}
}

// AddedDeleteAt returns the value that was added to the "delete_at" field in this mutation.
func (m *EventCouponMutation) AddedDeleteAt() (r int32, exists bool) {
	v := m.adddelete_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeleteAt resets all changes to the "delete_at" field.
func (m *EventCouponMutation) ResetDeleteAt() {
	m.delete_at = nil
	m.adddelete_at = nil
}

// Where appends a list predicates to the EventCouponMutation builder.
func (m *EventCouponMutation) Where(ps ...predicate.EventCoupon) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *EventCouponMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (EventCoupon).
func (m *EventCouponMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EventCouponMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.app_id != nil {
		fields = append(fields, eventcoupon.FieldAppID)
	}
	if m.activity_id != nil {
		fields = append(fields, eventcoupon.FieldActivityID)
	}
	if m._type != nil {
		fields = append(fields, eventcoupon.FieldType)
	}
	if m.coupon_id != nil {
		fields = append(fields, eventcoupon.FieldCouponID)
	}
	if m.event != nil {
		fields = append(fields, eventcoupon.FieldEvent)
	}
	if m.count != nil {
		fields = append(fields, eventcoupon.FieldCount)
	}
	if m.create_at != nil {
		fields = append(fields, eventcoupon.FieldCreateAt)
	}
	if m.update_at != nil {
		fields = append(fields, eventcoupon.FieldUpdateAt)
	}
	if m.delete_at != nil {
		fields = append(fields, eventcoupon.FieldDeleteAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EventCouponMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case eventcoupon.FieldAppID:
		return m.AppID()
	case eventcoupon.FieldActivityID:
		return m.ActivityID()
	case eventcoupon.FieldType:
		return m.GetType()
	case eventcoupon.FieldCouponID:
		return m.CouponID()
	case eventcoupon.FieldEvent:
		return m.Event()
	case eventcoupon.FieldCount:
		return m.Count()
	case eventcoupon.FieldCreateAt:
		return m.CreateAt()
	case eventcoupon.FieldUpdateAt:
		return m.UpdateAt()
	case eventcoupon.FieldDeleteAt:
		return m.DeleteAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EventCouponMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case eventcoupon.FieldAppID:
		return m.OldAppID(ctx)
	case eventcoupon.FieldActivityID:
		return m.OldActivityID(ctx)
	case eventcoupon.FieldType:
		return m.OldType(ctx)
	case eventcoupon.FieldCouponID:
		return m.OldCouponID(ctx)
	case eventcoupon.FieldEvent:
		return m.OldEvent(ctx)
	case eventcoupon.FieldCount:
		return m.OldCount(ctx)
	case eventcoupon.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case eventcoupon.FieldUpdateAt:
		return m.OldUpdateAt(ctx)
	case eventcoupon.FieldDeleteAt:
		return m.OldDeleteAt(ctx)
	}
	return nil, fmt.Errorf("unknown EventCoupon field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EventCouponMutation) SetField(name string, value ent.Value) error {
	switch name {
	case eventcoupon.FieldAppID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case eventcoupon.FieldActivityID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActivityID(v)
		return nil
	case eventcoupon.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case eventcoupon.FieldCouponID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCouponID(v)
		return nil
	case eventcoupon.FieldEvent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEvent(v)
		return nil
	case eventcoupon.FieldCount:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCount(v)
		return nil
	case eventcoupon.FieldCreateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateAt(v)
		return nil
	case eventcoupon.FieldUpdateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateAt(v)
		return nil
	case eventcoupon.FieldDeleteAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown EventCoupon field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EventCouponMutation) AddedFields() []string {
	var fields []string
	if m.addcount != nil {
		fields = append(fields, eventcoupon.FieldCount)
	}
	if m.addcreate_at != nil {
		fields = append(fields, eventcoupon.FieldCreateAt)
	}
	if m.addupdate_at != nil {
		fields = append(fields, eventcoupon.FieldUpdateAt)
	}
	if m.adddelete_at != nil {
		fields = append(fields, eventcoupon.FieldDeleteAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EventCouponMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case eventcoupon.FieldCount:
		return m.AddedCount()
	case eventcoupon.FieldCreateAt:
		return m.AddedCreateAt()
	case eventcoupon.FieldUpdateAt:
		return m.AddedUpdateAt()
	case eventcoupon.FieldDeleteAt:
		return m.AddedDeleteAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EventCouponMutation) AddField(name string, value ent.Value) error {
	switch name {
	case eventcoupon.FieldCount:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCount(v)
		return nil
	case eventcoupon.FieldCreateAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateAt(v)
		return nil
	case eventcoupon.FieldUpdateAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateAt(v)
		return nil
	case eventcoupon.FieldDeleteAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown EventCoupon numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EventCouponMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EventCouponMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EventCouponMutation) ClearField(name string) error {
	return fmt.Errorf("unknown EventCoupon nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EventCouponMutation) ResetField(name string) error {
	switch name {
	case eventcoupon.FieldAppID:
		m.ResetAppID()
		return nil
	case eventcoupon.FieldActivityID:
		m.ResetActivityID()
		return nil
	case eventcoupon.FieldType:
		m.ResetType()
		return nil
	case eventcoupon.FieldCouponID:
		m.ResetCouponID()
		return nil
	case eventcoupon.FieldEvent:
		m.ResetEvent()
		return nil
	case eventcoupon.FieldCount:
		m.ResetCount()
		return nil
	case eventcoupon.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case eventcoupon.FieldUpdateAt:
		m.ResetUpdateAt()
		return nil
	case eventcoupon.FieldDeleteAt:
		m.ResetDeleteAt()
		return nil
	}
	return fmt.Errorf("unknown EventCoupon field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EventCouponMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EventCouponMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EventCouponMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EventCouponMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EventCouponMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EventCouponMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EventCouponMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown EventCoupon unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EventCouponMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown EventCoupon edge %s", name)
}

// RegistrationInvitationMutation represents an operation that mutates the RegistrationInvitation nodes in the graph.
type RegistrationInvitationMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	create_at     *uint32
	addcreate_at  *int32
	update_at     *uint32
	addupdate_at  *int32
	delete_at     *uint32
	adddelete_at  *int32
	inviter_id    *uuid.UUID
	invitee_id    *uuid.UUID
	app_id        *uuid.UUID
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*RegistrationInvitation, error)
	predicates    []predicate.RegistrationInvitation
}

var _ ent.Mutation = (*RegistrationInvitationMutation)(nil)

// registrationinvitationOption allows management of the mutation configuration using functional options.
type registrationinvitationOption func(*RegistrationInvitationMutation)

// newRegistrationInvitationMutation creates new mutation for the RegistrationInvitation entity.
func newRegistrationInvitationMutation(c config, op Op, opts ...registrationinvitationOption) *RegistrationInvitationMutation {
	m := &RegistrationInvitationMutation{
		config:        c,
		op:            op,
		typ:           TypeRegistrationInvitation,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRegistrationInvitationID sets the ID field of the mutation.
func withRegistrationInvitationID(id uuid.UUID) registrationinvitationOption {
	return func(m *RegistrationInvitationMutation) {
		var (
			err   error
			once  sync.Once
			value *RegistrationInvitation
		)
		m.oldValue = func(ctx context.Context) (*RegistrationInvitation, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().RegistrationInvitation.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRegistrationInvitation sets the old RegistrationInvitation of the mutation.
func withRegistrationInvitation(node *RegistrationInvitation) registrationinvitationOption {
	return func(m *RegistrationInvitationMutation) {
		m.oldValue = func(context.Context) (*RegistrationInvitation, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RegistrationInvitationMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RegistrationInvitationMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of RegistrationInvitation entities.
func (m *RegistrationInvitationMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RegistrationInvitationMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RegistrationInvitationMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().RegistrationInvitation.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateAt sets the "create_at" field.
func (m *RegistrationInvitationMutation) SetCreateAt(u uint32) {
	m.create_at = &u
	m.addcreate_at = nil
}

// CreateAt returns the value of the "create_at" field in the mutation.
func (m *RegistrationInvitationMutation) CreateAt() (r uint32, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateAt returns the old "create_at" field's value of the RegistrationInvitation entity.
// If the RegistrationInvitation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RegistrationInvitationMutation) OldCreateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}
	return oldValue.CreateAt, nil
}

// AddCreateAt adds u to the "create_at" field.
func (m *RegistrationInvitationMutation) AddCreateAt(u int32) {
	if m.addcreate_at != nil {
		*m.addcreate_at += u
	} else {
		m.addcreate_at = &u
	}
}

// AddedCreateAt returns the value that was added to the "create_at" field in this mutation.
func (m *RegistrationInvitationMutation) AddedCreateAt() (r int32, exists bool) {
	v := m.addcreate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateAt resets all changes to the "create_at" field.
func (m *RegistrationInvitationMutation) ResetCreateAt() {
	m.create_at = nil
	m.addcreate_at = nil
}

// SetUpdateAt sets the "update_at" field.
func (m *RegistrationInvitationMutation) SetUpdateAt(u uint32) {
	m.update_at = &u
	m.addupdate_at = nil
}

// UpdateAt returns the value of the "update_at" field in the mutation.
func (m *RegistrationInvitationMutation) UpdateAt() (r uint32, exists bool) {
	v := m.update_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateAt returns the old "update_at" field's value of the RegistrationInvitation entity.
// If the RegistrationInvitation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RegistrationInvitationMutation) OldUpdateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateAt: %w", err)
	}
	return oldValue.UpdateAt, nil
}

// AddUpdateAt adds u to the "update_at" field.
func (m *RegistrationInvitationMutation) AddUpdateAt(u int32) {
	if m.addupdate_at != nil {
		*m.addupdate_at += u
	} else {
		m.addupdate_at = &u
	}
}

// AddedUpdateAt returns the value that was added to the "update_at" field in this mutation.
func (m *RegistrationInvitationMutation) AddedUpdateAt() (r int32, exists bool) {
	v := m.addupdate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateAt resets all changes to the "update_at" field.
func (m *RegistrationInvitationMutation) ResetUpdateAt() {
	m.update_at = nil
	m.addupdate_at = nil
}

// SetDeleteAt sets the "delete_at" field.
func (m *RegistrationInvitationMutation) SetDeleteAt(u uint32) {
	m.delete_at = &u
	m.adddelete_at = nil
}

// DeleteAt returns the value of the "delete_at" field in the mutation.
func (m *RegistrationInvitationMutation) DeleteAt() (r uint32, exists bool) {
	v := m.delete_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteAt returns the old "delete_at" field's value of the RegistrationInvitation entity.
// If the RegistrationInvitation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RegistrationInvitationMutation) OldDeleteAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteAt: %w", err)
	}
	return oldValue.DeleteAt, nil
}

// AddDeleteAt adds u to the "delete_at" field.
func (m *RegistrationInvitationMutation) AddDeleteAt(u int32) {
	if m.adddelete_at != nil {
		*m.adddelete_at += u
	} else {
		m.adddelete_at = &u
	}
}

// AddedDeleteAt returns the value that was added to the "delete_at" field in this mutation.
func (m *RegistrationInvitationMutation) AddedDeleteAt() (r int32, exists bool) {
	v := m.adddelete_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeleteAt resets all changes to the "delete_at" field.
func (m *RegistrationInvitationMutation) ResetDeleteAt() {
	m.delete_at = nil
	m.adddelete_at = nil
}

// SetInviterID sets the "inviter_id" field.
func (m *RegistrationInvitationMutation) SetInviterID(u uuid.UUID) {
	m.inviter_id = &u
}

// InviterID returns the value of the "inviter_id" field in the mutation.
func (m *RegistrationInvitationMutation) InviterID() (r uuid.UUID, exists bool) {
	v := m.inviter_id
	if v == nil {
		return
	}
	return *v, true
}

// OldInviterID returns the old "inviter_id" field's value of the RegistrationInvitation entity.
// If the RegistrationInvitation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RegistrationInvitationMutation) OldInviterID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInviterID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInviterID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInviterID: %w", err)
	}
	return oldValue.InviterID, nil
}

// ResetInviterID resets all changes to the "inviter_id" field.
func (m *RegistrationInvitationMutation) ResetInviterID() {
	m.inviter_id = nil
}

// SetInviteeID sets the "invitee_id" field.
func (m *RegistrationInvitationMutation) SetInviteeID(u uuid.UUID) {
	m.invitee_id = &u
}

// InviteeID returns the value of the "invitee_id" field in the mutation.
func (m *RegistrationInvitationMutation) InviteeID() (r uuid.UUID, exists bool) {
	v := m.invitee_id
	if v == nil {
		return
	}
	return *v, true
}

// OldInviteeID returns the old "invitee_id" field's value of the RegistrationInvitation entity.
// If the RegistrationInvitation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RegistrationInvitationMutation) OldInviteeID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInviteeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInviteeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInviteeID: %w", err)
	}
	return oldValue.InviteeID, nil
}

// ResetInviteeID resets all changes to the "invitee_id" field.
func (m *RegistrationInvitationMutation) ResetInviteeID() {
	m.invitee_id = nil
}

// SetAppID sets the "app_id" field.
func (m *RegistrationInvitationMutation) SetAppID(u uuid.UUID) {
	m.app_id = &u
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *RegistrationInvitationMutation) AppID() (r uuid.UUID, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the RegistrationInvitation entity.
// If the RegistrationInvitation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RegistrationInvitationMutation) OldAppID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ResetAppID resets all changes to the "app_id" field.
func (m *RegistrationInvitationMutation) ResetAppID() {
	m.app_id = nil
}

// Where appends a list predicates to the RegistrationInvitationMutation builder.
func (m *RegistrationInvitationMutation) Where(ps ...predicate.RegistrationInvitation) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *RegistrationInvitationMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (RegistrationInvitation).
func (m *RegistrationInvitationMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RegistrationInvitationMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.create_at != nil {
		fields = append(fields, registrationinvitation.FieldCreateAt)
	}
	if m.update_at != nil {
		fields = append(fields, registrationinvitation.FieldUpdateAt)
	}
	if m.delete_at != nil {
		fields = append(fields, registrationinvitation.FieldDeleteAt)
	}
	if m.inviter_id != nil {
		fields = append(fields, registrationinvitation.FieldInviterID)
	}
	if m.invitee_id != nil {
		fields = append(fields, registrationinvitation.FieldInviteeID)
	}
	if m.app_id != nil {
		fields = append(fields, registrationinvitation.FieldAppID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RegistrationInvitationMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case registrationinvitation.FieldCreateAt:
		return m.CreateAt()
	case registrationinvitation.FieldUpdateAt:
		return m.UpdateAt()
	case registrationinvitation.FieldDeleteAt:
		return m.DeleteAt()
	case registrationinvitation.FieldInviterID:
		return m.InviterID()
	case registrationinvitation.FieldInviteeID:
		return m.InviteeID()
	case registrationinvitation.FieldAppID:
		return m.AppID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RegistrationInvitationMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case registrationinvitation.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case registrationinvitation.FieldUpdateAt:
		return m.OldUpdateAt(ctx)
	case registrationinvitation.FieldDeleteAt:
		return m.OldDeleteAt(ctx)
	case registrationinvitation.FieldInviterID:
		return m.OldInviterID(ctx)
	case registrationinvitation.FieldInviteeID:
		return m.OldInviteeID(ctx)
	case registrationinvitation.FieldAppID:
		return m.OldAppID(ctx)
	}
	return nil, fmt.Errorf("unknown RegistrationInvitation field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RegistrationInvitationMutation) SetField(name string, value ent.Value) error {
	switch name {
	case registrationinvitation.FieldCreateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateAt(v)
		return nil
	case registrationinvitation.FieldUpdateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateAt(v)
		return nil
	case registrationinvitation.FieldDeleteAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteAt(v)
		return nil
	case registrationinvitation.FieldInviterID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInviterID(v)
		return nil
	case registrationinvitation.FieldInviteeID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInviteeID(v)
		return nil
	case registrationinvitation.FieldAppID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	}
	return fmt.Errorf("unknown RegistrationInvitation field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RegistrationInvitationMutation) AddedFields() []string {
	var fields []string
	if m.addcreate_at != nil {
		fields = append(fields, registrationinvitation.FieldCreateAt)
	}
	if m.addupdate_at != nil {
		fields = append(fields, registrationinvitation.FieldUpdateAt)
	}
	if m.adddelete_at != nil {
		fields = append(fields, registrationinvitation.FieldDeleteAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RegistrationInvitationMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case registrationinvitation.FieldCreateAt:
		return m.AddedCreateAt()
	case registrationinvitation.FieldUpdateAt:
		return m.AddedUpdateAt()
	case registrationinvitation.FieldDeleteAt:
		return m.AddedDeleteAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RegistrationInvitationMutation) AddField(name string, value ent.Value) error {
	switch name {
	case registrationinvitation.FieldCreateAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateAt(v)
		return nil
	case registrationinvitation.FieldUpdateAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateAt(v)
		return nil
	case registrationinvitation.FieldDeleteAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown RegistrationInvitation numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RegistrationInvitationMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RegistrationInvitationMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RegistrationInvitationMutation) ClearField(name string) error {
	return fmt.Errorf("unknown RegistrationInvitation nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RegistrationInvitationMutation) ResetField(name string) error {
	switch name {
	case registrationinvitation.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case registrationinvitation.FieldUpdateAt:
		m.ResetUpdateAt()
		return nil
	case registrationinvitation.FieldDeleteAt:
		m.ResetDeleteAt()
		return nil
	case registrationinvitation.FieldInviterID:
		m.ResetInviterID()
		return nil
	case registrationinvitation.FieldInviteeID:
		m.ResetInviteeID()
		return nil
	case registrationinvitation.FieldAppID:
		m.ResetAppID()
		return nil
	}
	return fmt.Errorf("unknown RegistrationInvitation field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RegistrationInvitationMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RegistrationInvitationMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RegistrationInvitationMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RegistrationInvitationMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RegistrationInvitationMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RegistrationInvitationMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RegistrationInvitationMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown RegistrationInvitation unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RegistrationInvitationMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown RegistrationInvitation edge %s", name)
}

// UserInvitationCodeMutation represents an operation that mutates the UserInvitationCode nodes in the graph.
type UserInvitationCodeMutation struct {
	config
	op              Op
	typ             string
	id              *uuid.UUID
	user_id         *uuid.UUID
	app_id          *uuid.UUID
	invitation_code *string
	create_at       *uint32
	addcreate_at    *int32
	update_at       *uint32
	addupdate_at    *int32
	delete_at       *uint32
	adddelete_at    *int32
	clearedFields   map[string]struct{}
	done            bool
	oldValue        func(context.Context) (*UserInvitationCode, error)
	predicates      []predicate.UserInvitationCode
}

var _ ent.Mutation = (*UserInvitationCodeMutation)(nil)

// userinvitationcodeOption allows management of the mutation configuration using functional options.
type userinvitationcodeOption func(*UserInvitationCodeMutation)

// newUserInvitationCodeMutation creates new mutation for the UserInvitationCode entity.
func newUserInvitationCodeMutation(c config, op Op, opts ...userinvitationcodeOption) *UserInvitationCodeMutation {
	m := &UserInvitationCodeMutation{
		config:        c,
		op:            op,
		typ:           TypeUserInvitationCode,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserInvitationCodeID sets the ID field of the mutation.
func withUserInvitationCodeID(id uuid.UUID) userinvitationcodeOption {
	return func(m *UserInvitationCodeMutation) {
		var (
			err   error
			once  sync.Once
			value *UserInvitationCode
		)
		m.oldValue = func(ctx context.Context) (*UserInvitationCode, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UserInvitationCode.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUserInvitationCode sets the old UserInvitationCode of the mutation.
func withUserInvitationCode(node *UserInvitationCode) userinvitationcodeOption {
	return func(m *UserInvitationCodeMutation) {
		m.oldValue = func(context.Context) (*UserInvitationCode, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserInvitationCodeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserInvitationCodeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of UserInvitationCode entities.
func (m *UserInvitationCodeMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserInvitationCodeMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserInvitationCodeMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().UserInvitationCode.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUserID sets the "user_id" field.
func (m *UserInvitationCodeMutation) SetUserID(u uuid.UUID) {
	m.user_id = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *UserInvitationCodeMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the UserInvitationCode entity.
// If the UserInvitationCode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserInvitationCodeMutation) OldUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *UserInvitationCodeMutation) ResetUserID() {
	m.user_id = nil
}

// SetAppID sets the "app_id" field.
func (m *UserInvitationCodeMutation) SetAppID(u uuid.UUID) {
	m.app_id = &u
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *UserInvitationCodeMutation) AppID() (r uuid.UUID, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the UserInvitationCode entity.
// If the UserInvitationCode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserInvitationCodeMutation) OldAppID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ResetAppID resets all changes to the "app_id" field.
func (m *UserInvitationCodeMutation) ResetAppID() {
	m.app_id = nil
}

// SetInvitationCode sets the "invitation_code" field.
func (m *UserInvitationCodeMutation) SetInvitationCode(s string) {
	m.invitation_code = &s
}

// InvitationCode returns the value of the "invitation_code" field in the mutation.
func (m *UserInvitationCodeMutation) InvitationCode() (r string, exists bool) {
	v := m.invitation_code
	if v == nil {
		return
	}
	return *v, true
}

// OldInvitationCode returns the old "invitation_code" field's value of the UserInvitationCode entity.
// If the UserInvitationCode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserInvitationCodeMutation) OldInvitationCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInvitationCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInvitationCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInvitationCode: %w", err)
	}
	return oldValue.InvitationCode, nil
}

// ResetInvitationCode resets all changes to the "invitation_code" field.
func (m *UserInvitationCodeMutation) ResetInvitationCode() {
	m.invitation_code = nil
}

// SetCreateAt sets the "create_at" field.
func (m *UserInvitationCodeMutation) SetCreateAt(u uint32) {
	m.create_at = &u
	m.addcreate_at = nil
}

// CreateAt returns the value of the "create_at" field in the mutation.
func (m *UserInvitationCodeMutation) CreateAt() (r uint32, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateAt returns the old "create_at" field's value of the UserInvitationCode entity.
// If the UserInvitationCode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserInvitationCodeMutation) OldCreateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}
	return oldValue.CreateAt, nil
}

// AddCreateAt adds u to the "create_at" field.
func (m *UserInvitationCodeMutation) AddCreateAt(u int32) {
	if m.addcreate_at != nil {
		*m.addcreate_at += u
	} else {
		m.addcreate_at = &u
	}
}

// AddedCreateAt returns the value that was added to the "create_at" field in this mutation.
func (m *UserInvitationCodeMutation) AddedCreateAt() (r int32, exists bool) {
	v := m.addcreate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateAt resets all changes to the "create_at" field.
func (m *UserInvitationCodeMutation) ResetCreateAt() {
	m.create_at = nil
	m.addcreate_at = nil
}

// SetUpdateAt sets the "update_at" field.
func (m *UserInvitationCodeMutation) SetUpdateAt(u uint32) {
	m.update_at = &u
	m.addupdate_at = nil
}

// UpdateAt returns the value of the "update_at" field in the mutation.
func (m *UserInvitationCodeMutation) UpdateAt() (r uint32, exists bool) {
	v := m.update_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateAt returns the old "update_at" field's value of the UserInvitationCode entity.
// If the UserInvitationCode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserInvitationCodeMutation) OldUpdateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateAt: %w", err)
	}
	return oldValue.UpdateAt, nil
}

// AddUpdateAt adds u to the "update_at" field.
func (m *UserInvitationCodeMutation) AddUpdateAt(u int32) {
	if m.addupdate_at != nil {
		*m.addupdate_at += u
	} else {
		m.addupdate_at = &u
	}
}

// AddedUpdateAt returns the value that was added to the "update_at" field in this mutation.
func (m *UserInvitationCodeMutation) AddedUpdateAt() (r int32, exists bool) {
	v := m.addupdate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateAt resets all changes to the "update_at" field.
func (m *UserInvitationCodeMutation) ResetUpdateAt() {
	m.update_at = nil
	m.addupdate_at = nil
}

// SetDeleteAt sets the "delete_at" field.
func (m *UserInvitationCodeMutation) SetDeleteAt(u uint32) {
	m.delete_at = &u
	m.adddelete_at = nil
}

// DeleteAt returns the value of the "delete_at" field in the mutation.
func (m *UserInvitationCodeMutation) DeleteAt() (r uint32, exists bool) {
	v := m.delete_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteAt returns the old "delete_at" field's value of the UserInvitationCode entity.
// If the UserInvitationCode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserInvitationCodeMutation) OldDeleteAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteAt: %w", err)
	}
	return oldValue.DeleteAt, nil
}

// AddDeleteAt adds u to the "delete_at" field.
func (m *UserInvitationCodeMutation) AddDeleteAt(u int32) {
	if m.adddelete_at != nil {
		*m.adddelete_at += u
	} else {
		m.adddelete_at = &u
	}
}

// AddedDeleteAt returns the value that was added to the "delete_at" field in this mutation.
func (m *UserInvitationCodeMutation) AddedDeleteAt() (r int32, exists bool) {
	v := m.adddelete_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeleteAt resets all changes to the "delete_at" field.
func (m *UserInvitationCodeMutation) ResetDeleteAt() {
	m.delete_at = nil
	m.adddelete_at = nil
}

// Where appends a list predicates to the UserInvitationCodeMutation builder.
func (m *UserInvitationCodeMutation) Where(ps ...predicate.UserInvitationCode) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UserInvitationCodeMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (UserInvitationCode).
func (m *UserInvitationCodeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserInvitationCodeMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.user_id != nil {
		fields = append(fields, userinvitationcode.FieldUserID)
	}
	if m.app_id != nil {
		fields = append(fields, userinvitationcode.FieldAppID)
	}
	if m.invitation_code != nil {
		fields = append(fields, userinvitationcode.FieldInvitationCode)
	}
	if m.create_at != nil {
		fields = append(fields, userinvitationcode.FieldCreateAt)
	}
	if m.update_at != nil {
		fields = append(fields, userinvitationcode.FieldUpdateAt)
	}
	if m.delete_at != nil {
		fields = append(fields, userinvitationcode.FieldDeleteAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserInvitationCodeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case userinvitationcode.FieldUserID:
		return m.UserID()
	case userinvitationcode.FieldAppID:
		return m.AppID()
	case userinvitationcode.FieldInvitationCode:
		return m.InvitationCode()
	case userinvitationcode.FieldCreateAt:
		return m.CreateAt()
	case userinvitationcode.FieldUpdateAt:
		return m.UpdateAt()
	case userinvitationcode.FieldDeleteAt:
		return m.DeleteAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserInvitationCodeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case userinvitationcode.FieldUserID:
		return m.OldUserID(ctx)
	case userinvitationcode.FieldAppID:
		return m.OldAppID(ctx)
	case userinvitationcode.FieldInvitationCode:
		return m.OldInvitationCode(ctx)
	case userinvitationcode.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case userinvitationcode.FieldUpdateAt:
		return m.OldUpdateAt(ctx)
	case userinvitationcode.FieldDeleteAt:
		return m.OldDeleteAt(ctx)
	}
	return nil, fmt.Errorf("unknown UserInvitationCode field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserInvitationCodeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case userinvitationcode.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case userinvitationcode.FieldAppID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case userinvitationcode.FieldInvitationCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInvitationCode(v)
		return nil
	case userinvitationcode.FieldCreateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateAt(v)
		return nil
	case userinvitationcode.FieldUpdateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateAt(v)
		return nil
	case userinvitationcode.FieldDeleteAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown UserInvitationCode field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserInvitationCodeMutation) AddedFields() []string {
	var fields []string
	if m.addcreate_at != nil {
		fields = append(fields, userinvitationcode.FieldCreateAt)
	}
	if m.addupdate_at != nil {
		fields = append(fields, userinvitationcode.FieldUpdateAt)
	}
	if m.adddelete_at != nil {
		fields = append(fields, userinvitationcode.FieldDeleteAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserInvitationCodeMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case userinvitationcode.FieldCreateAt:
		return m.AddedCreateAt()
	case userinvitationcode.FieldUpdateAt:
		return m.AddedUpdateAt()
	case userinvitationcode.FieldDeleteAt:
		return m.AddedDeleteAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserInvitationCodeMutation) AddField(name string, value ent.Value) error {
	switch name {
	case userinvitationcode.FieldCreateAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateAt(v)
		return nil
	case userinvitationcode.FieldUpdateAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateAt(v)
		return nil
	case userinvitationcode.FieldDeleteAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown UserInvitationCode numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserInvitationCodeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserInvitationCodeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserInvitationCodeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown UserInvitationCode nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserInvitationCodeMutation) ResetField(name string) error {
	switch name {
	case userinvitationcode.FieldUserID:
		m.ResetUserID()
		return nil
	case userinvitationcode.FieldAppID:
		m.ResetAppID()
		return nil
	case userinvitationcode.FieldInvitationCode:
		m.ResetInvitationCode()
		return nil
	case userinvitationcode.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case userinvitationcode.FieldUpdateAt:
		m.ResetUpdateAt()
		return nil
	case userinvitationcode.FieldDeleteAt:
		m.ResetDeleteAt()
		return nil
	}
	return fmt.Errorf("unknown UserInvitationCode field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserInvitationCodeMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserInvitationCodeMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserInvitationCodeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserInvitationCodeMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserInvitationCodeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserInvitationCodeMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserInvitationCodeMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown UserInvitationCode unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserInvitationCodeMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown UserInvitationCode edge %s", name)
}

// UserKpiSettingMutation represents an operation that mutates the UserKpiSetting nodes in the graph.
type UserKpiSettingMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	amount        *uint64
	addamount     *int64
	percent       *int32
	addpercent    *int32
	app_id        *uuid.UUID
	good_id       *uuid.UUID
	user_id       *uuid.UUID
	create_at     *uint32
	addcreate_at  *int32
	update_at     *uint32
	addupdate_at  *int32
	delete_at     *uint32
	adddelete_at  *int32
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*UserKpiSetting, error)
	predicates    []predicate.UserKpiSetting
}

var _ ent.Mutation = (*UserKpiSettingMutation)(nil)

// userkpisettingOption allows management of the mutation configuration using functional options.
type userkpisettingOption func(*UserKpiSettingMutation)

// newUserKpiSettingMutation creates new mutation for the UserKpiSetting entity.
func newUserKpiSettingMutation(c config, op Op, opts ...userkpisettingOption) *UserKpiSettingMutation {
	m := &UserKpiSettingMutation{
		config:        c,
		op:            op,
		typ:           TypeUserKpiSetting,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserKpiSettingID sets the ID field of the mutation.
func withUserKpiSettingID(id uuid.UUID) userkpisettingOption {
	return func(m *UserKpiSettingMutation) {
		var (
			err   error
			once  sync.Once
			value *UserKpiSetting
		)
		m.oldValue = func(ctx context.Context) (*UserKpiSetting, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UserKpiSetting.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUserKpiSetting sets the old UserKpiSetting of the mutation.
func withUserKpiSetting(node *UserKpiSetting) userkpisettingOption {
	return func(m *UserKpiSettingMutation) {
		m.oldValue = func(context.Context) (*UserKpiSetting, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserKpiSettingMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserKpiSettingMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of UserKpiSetting entities.
func (m *UserKpiSettingMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserKpiSettingMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserKpiSettingMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().UserKpiSetting.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAmount sets the "amount" field.
func (m *UserKpiSettingMutation) SetAmount(u uint64) {
	m.amount = &u
	m.addamount = nil
}

// Amount returns the value of the "amount" field in the mutation.
func (m *UserKpiSettingMutation) Amount() (r uint64, exists bool) {
	v := m.amount
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount returns the old "amount" field's value of the UserKpiSetting entity.
// If the UserKpiSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserKpiSettingMutation) OldAmount(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount: %w", err)
	}
	return oldValue.Amount, nil
}

// AddAmount adds u to the "amount" field.
func (m *UserKpiSettingMutation) AddAmount(u int64) {
	if m.addamount != nil {
		*m.addamount += u
	} else {
		m.addamount = &u
	}
}

// AddedAmount returns the value that was added to the "amount" field in this mutation.
func (m *UserKpiSettingMutation) AddedAmount() (r int64, exists bool) {
	v := m.addamount
	if v == nil {
		return
	}
	return *v, true
}

// ResetAmount resets all changes to the "amount" field.
func (m *UserKpiSettingMutation) ResetAmount() {
	m.amount = nil
	m.addamount = nil
}

// SetPercent sets the "percent" field.
func (m *UserKpiSettingMutation) SetPercent(i int32) {
	m.percent = &i
	m.addpercent = nil
}

// Percent returns the value of the "percent" field in the mutation.
func (m *UserKpiSettingMutation) Percent() (r int32, exists bool) {
	v := m.percent
	if v == nil {
		return
	}
	return *v, true
}

// OldPercent returns the old "percent" field's value of the UserKpiSetting entity.
// If the UserKpiSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserKpiSettingMutation) OldPercent(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPercent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPercent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPercent: %w", err)
	}
	return oldValue.Percent, nil
}

// AddPercent adds i to the "percent" field.
func (m *UserKpiSettingMutation) AddPercent(i int32) {
	if m.addpercent != nil {
		*m.addpercent += i
	} else {
		m.addpercent = &i
	}
}

// AddedPercent returns the value that was added to the "percent" field in this mutation.
func (m *UserKpiSettingMutation) AddedPercent() (r int32, exists bool) {
	v := m.addpercent
	if v == nil {
		return
	}
	return *v, true
}

// ResetPercent resets all changes to the "percent" field.
func (m *UserKpiSettingMutation) ResetPercent() {
	m.percent = nil
	m.addpercent = nil
}

// SetAppID sets the "app_id" field.
func (m *UserKpiSettingMutation) SetAppID(u uuid.UUID) {
	m.app_id = &u
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *UserKpiSettingMutation) AppID() (r uuid.UUID, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the UserKpiSetting entity.
// If the UserKpiSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserKpiSettingMutation) OldAppID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ResetAppID resets all changes to the "app_id" field.
func (m *UserKpiSettingMutation) ResetAppID() {
	m.app_id = nil
}

// SetGoodID sets the "good_id" field.
func (m *UserKpiSettingMutation) SetGoodID(u uuid.UUID) {
	m.good_id = &u
}

// GoodID returns the value of the "good_id" field in the mutation.
func (m *UserKpiSettingMutation) GoodID() (r uuid.UUID, exists bool) {
	v := m.good_id
	if v == nil {
		return
	}
	return *v, true
}

// OldGoodID returns the old "good_id" field's value of the UserKpiSetting entity.
// If the UserKpiSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserKpiSettingMutation) OldGoodID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGoodID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGoodID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGoodID: %w", err)
	}
	return oldValue.GoodID, nil
}

// ResetGoodID resets all changes to the "good_id" field.
func (m *UserKpiSettingMutation) ResetGoodID() {
	m.good_id = nil
}

// SetUserID sets the "user_id" field.
func (m *UserKpiSettingMutation) SetUserID(u uuid.UUID) {
	m.user_id = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *UserKpiSettingMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the UserKpiSetting entity.
// If the UserKpiSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserKpiSettingMutation) OldUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *UserKpiSettingMutation) ResetUserID() {
	m.user_id = nil
}

// SetCreateAt sets the "create_at" field.
func (m *UserKpiSettingMutation) SetCreateAt(u uint32) {
	m.create_at = &u
	m.addcreate_at = nil
}

// CreateAt returns the value of the "create_at" field in the mutation.
func (m *UserKpiSettingMutation) CreateAt() (r uint32, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateAt returns the old "create_at" field's value of the UserKpiSetting entity.
// If the UserKpiSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserKpiSettingMutation) OldCreateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}
	return oldValue.CreateAt, nil
}

// AddCreateAt adds u to the "create_at" field.
func (m *UserKpiSettingMutation) AddCreateAt(u int32) {
	if m.addcreate_at != nil {
		*m.addcreate_at += u
	} else {
		m.addcreate_at = &u
	}
}

// AddedCreateAt returns the value that was added to the "create_at" field in this mutation.
func (m *UserKpiSettingMutation) AddedCreateAt() (r int32, exists bool) {
	v := m.addcreate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateAt resets all changes to the "create_at" field.
func (m *UserKpiSettingMutation) ResetCreateAt() {
	m.create_at = nil
	m.addcreate_at = nil
}

// SetUpdateAt sets the "update_at" field.
func (m *UserKpiSettingMutation) SetUpdateAt(u uint32) {
	m.update_at = &u
	m.addupdate_at = nil
}

// UpdateAt returns the value of the "update_at" field in the mutation.
func (m *UserKpiSettingMutation) UpdateAt() (r uint32, exists bool) {
	v := m.update_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateAt returns the old "update_at" field's value of the UserKpiSetting entity.
// If the UserKpiSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserKpiSettingMutation) OldUpdateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateAt: %w", err)
	}
	return oldValue.UpdateAt, nil
}

// AddUpdateAt adds u to the "update_at" field.
func (m *UserKpiSettingMutation) AddUpdateAt(u int32) {
	if m.addupdate_at != nil {
		*m.addupdate_at += u
	} else {
		m.addupdate_at = &u
	}
}

// AddedUpdateAt returns the value that was added to the "update_at" field in this mutation.
func (m *UserKpiSettingMutation) AddedUpdateAt() (r int32, exists bool) {
	v := m.addupdate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateAt resets all changes to the "update_at" field.
func (m *UserKpiSettingMutation) ResetUpdateAt() {
	m.update_at = nil
	m.addupdate_at = nil
}

// SetDeleteAt sets the "delete_at" field.
func (m *UserKpiSettingMutation) SetDeleteAt(u uint32) {
	m.delete_at = &u
	m.adddelete_at = nil
}

// DeleteAt returns the value of the "delete_at" field in the mutation.
func (m *UserKpiSettingMutation) DeleteAt() (r uint32, exists bool) {
	v := m.delete_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteAt returns the old "delete_at" field's value of the UserKpiSetting entity.
// If the UserKpiSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserKpiSettingMutation) OldDeleteAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteAt: %w", err)
	}
	return oldValue.DeleteAt, nil
}

// AddDeleteAt adds u to the "delete_at" field.
func (m *UserKpiSettingMutation) AddDeleteAt(u int32) {
	if m.adddelete_at != nil {
		*m.adddelete_at += u
	} else {
		m.adddelete_at = &u
	}
}

// AddedDeleteAt returns the value that was added to the "delete_at" field in this mutation.
func (m *UserKpiSettingMutation) AddedDeleteAt() (r int32, exists bool) {
	v := m.adddelete_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeleteAt resets all changes to the "delete_at" field.
func (m *UserKpiSettingMutation) ResetDeleteAt() {
	m.delete_at = nil
	m.adddelete_at = nil
}

// Where appends a list predicates to the UserKpiSettingMutation builder.
func (m *UserKpiSettingMutation) Where(ps ...predicate.UserKpiSetting) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UserKpiSettingMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (UserKpiSetting).
func (m *UserKpiSettingMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserKpiSettingMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.amount != nil {
		fields = append(fields, userkpisetting.FieldAmount)
	}
	if m.percent != nil {
		fields = append(fields, userkpisetting.FieldPercent)
	}
	if m.app_id != nil {
		fields = append(fields, userkpisetting.FieldAppID)
	}
	if m.good_id != nil {
		fields = append(fields, userkpisetting.FieldGoodID)
	}
	if m.user_id != nil {
		fields = append(fields, userkpisetting.FieldUserID)
	}
	if m.create_at != nil {
		fields = append(fields, userkpisetting.FieldCreateAt)
	}
	if m.update_at != nil {
		fields = append(fields, userkpisetting.FieldUpdateAt)
	}
	if m.delete_at != nil {
		fields = append(fields, userkpisetting.FieldDeleteAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserKpiSettingMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case userkpisetting.FieldAmount:
		return m.Amount()
	case userkpisetting.FieldPercent:
		return m.Percent()
	case userkpisetting.FieldAppID:
		return m.AppID()
	case userkpisetting.FieldGoodID:
		return m.GoodID()
	case userkpisetting.FieldUserID:
		return m.UserID()
	case userkpisetting.FieldCreateAt:
		return m.CreateAt()
	case userkpisetting.FieldUpdateAt:
		return m.UpdateAt()
	case userkpisetting.FieldDeleteAt:
		return m.DeleteAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserKpiSettingMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case userkpisetting.FieldAmount:
		return m.OldAmount(ctx)
	case userkpisetting.FieldPercent:
		return m.OldPercent(ctx)
	case userkpisetting.FieldAppID:
		return m.OldAppID(ctx)
	case userkpisetting.FieldGoodID:
		return m.OldGoodID(ctx)
	case userkpisetting.FieldUserID:
		return m.OldUserID(ctx)
	case userkpisetting.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case userkpisetting.FieldUpdateAt:
		return m.OldUpdateAt(ctx)
	case userkpisetting.FieldDeleteAt:
		return m.OldDeleteAt(ctx)
	}
	return nil, fmt.Errorf("unknown UserKpiSetting field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserKpiSettingMutation) SetField(name string, value ent.Value) error {
	switch name {
	case userkpisetting.FieldAmount:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount(v)
		return nil
	case userkpisetting.FieldPercent:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPercent(v)
		return nil
	case userkpisetting.FieldAppID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case userkpisetting.FieldGoodID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGoodID(v)
		return nil
	case userkpisetting.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case userkpisetting.FieldCreateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateAt(v)
		return nil
	case userkpisetting.FieldUpdateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateAt(v)
		return nil
	case userkpisetting.FieldDeleteAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown UserKpiSetting field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserKpiSettingMutation) AddedFields() []string {
	var fields []string
	if m.addamount != nil {
		fields = append(fields, userkpisetting.FieldAmount)
	}
	if m.addpercent != nil {
		fields = append(fields, userkpisetting.FieldPercent)
	}
	if m.addcreate_at != nil {
		fields = append(fields, userkpisetting.FieldCreateAt)
	}
	if m.addupdate_at != nil {
		fields = append(fields, userkpisetting.FieldUpdateAt)
	}
	if m.adddelete_at != nil {
		fields = append(fields, userkpisetting.FieldDeleteAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserKpiSettingMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case userkpisetting.FieldAmount:
		return m.AddedAmount()
	case userkpisetting.FieldPercent:
		return m.AddedPercent()
	case userkpisetting.FieldCreateAt:
		return m.AddedCreateAt()
	case userkpisetting.FieldUpdateAt:
		return m.AddedUpdateAt()
	case userkpisetting.FieldDeleteAt:
		return m.AddedDeleteAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserKpiSettingMutation) AddField(name string, value ent.Value) error {
	switch name {
	case userkpisetting.FieldAmount:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAmount(v)
		return nil
	case userkpisetting.FieldPercent:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPercent(v)
		return nil
	case userkpisetting.FieldCreateAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateAt(v)
		return nil
	case userkpisetting.FieldUpdateAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateAt(v)
		return nil
	case userkpisetting.FieldDeleteAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown UserKpiSetting numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserKpiSettingMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserKpiSettingMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserKpiSettingMutation) ClearField(name string) error {
	return fmt.Errorf("unknown UserKpiSetting nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserKpiSettingMutation) ResetField(name string) error {
	switch name {
	case userkpisetting.FieldAmount:
		m.ResetAmount()
		return nil
	case userkpisetting.FieldPercent:
		m.ResetPercent()
		return nil
	case userkpisetting.FieldAppID:
		m.ResetAppID()
		return nil
	case userkpisetting.FieldGoodID:
		m.ResetGoodID()
		return nil
	case userkpisetting.FieldUserID:
		m.ResetUserID()
		return nil
	case userkpisetting.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case userkpisetting.FieldUpdateAt:
		m.ResetUpdateAt()
		return nil
	case userkpisetting.FieldDeleteAt:
		m.ResetDeleteAt()
		return nil
	}
	return fmt.Errorf("unknown UserKpiSetting field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserKpiSettingMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserKpiSettingMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserKpiSettingMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserKpiSettingMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserKpiSettingMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserKpiSettingMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserKpiSettingMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown UserKpiSetting unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserKpiSettingMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown UserKpiSetting edge %s", name)
}

// UserSpecialReductionMutation represents an operation that mutates the UserSpecialReduction nodes in the graph.
type UserSpecialReductionMutation struct {
	config
	op                 Op
	typ                string
	id                 *uuid.UUID
	app_id             *uuid.UUID
	user_id            *uuid.UUID
	amount             *uint64
	addamount          *int64
	release_by_user_id *uuid.UUID
	start              *uint32
	addstart           *int32
	duration_days      *int32
	addduration_days   *int32
	message            *string
	create_at          *uint32
	addcreate_at       *int32
	update_at          *uint32
	addupdate_at       *int32
	delete_at          *uint32
	adddelete_at       *int32
	clearedFields      map[string]struct{}
	done               bool
	oldValue           func(context.Context) (*UserSpecialReduction, error)
	predicates         []predicate.UserSpecialReduction
}

var _ ent.Mutation = (*UserSpecialReductionMutation)(nil)

// userspecialreductionOption allows management of the mutation configuration using functional options.
type userspecialreductionOption func(*UserSpecialReductionMutation)

// newUserSpecialReductionMutation creates new mutation for the UserSpecialReduction entity.
func newUserSpecialReductionMutation(c config, op Op, opts ...userspecialreductionOption) *UserSpecialReductionMutation {
	m := &UserSpecialReductionMutation{
		config:        c,
		op:            op,
		typ:           TypeUserSpecialReduction,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserSpecialReductionID sets the ID field of the mutation.
func withUserSpecialReductionID(id uuid.UUID) userspecialreductionOption {
	return func(m *UserSpecialReductionMutation) {
		var (
			err   error
			once  sync.Once
			value *UserSpecialReduction
		)
		m.oldValue = func(ctx context.Context) (*UserSpecialReduction, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UserSpecialReduction.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUserSpecialReduction sets the old UserSpecialReduction of the mutation.
func withUserSpecialReduction(node *UserSpecialReduction) userspecialreductionOption {
	return func(m *UserSpecialReductionMutation) {
		m.oldValue = func(context.Context) (*UserSpecialReduction, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserSpecialReductionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserSpecialReductionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of UserSpecialReduction entities.
func (m *UserSpecialReductionMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserSpecialReductionMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserSpecialReductionMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().UserSpecialReduction.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAppID sets the "app_id" field.
func (m *UserSpecialReductionMutation) SetAppID(u uuid.UUID) {
	m.app_id = &u
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *UserSpecialReductionMutation) AppID() (r uuid.UUID, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the UserSpecialReduction entity.
// If the UserSpecialReduction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserSpecialReductionMutation) OldAppID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ResetAppID resets all changes to the "app_id" field.
func (m *UserSpecialReductionMutation) ResetAppID() {
	m.app_id = nil
}

// SetUserID sets the "user_id" field.
func (m *UserSpecialReductionMutation) SetUserID(u uuid.UUID) {
	m.user_id = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *UserSpecialReductionMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the UserSpecialReduction entity.
// If the UserSpecialReduction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserSpecialReductionMutation) OldUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *UserSpecialReductionMutation) ResetUserID() {
	m.user_id = nil
}

// SetAmount sets the "amount" field.
func (m *UserSpecialReductionMutation) SetAmount(u uint64) {
	m.amount = &u
	m.addamount = nil
}

// Amount returns the value of the "amount" field in the mutation.
func (m *UserSpecialReductionMutation) Amount() (r uint64, exists bool) {
	v := m.amount
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount returns the old "amount" field's value of the UserSpecialReduction entity.
// If the UserSpecialReduction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserSpecialReductionMutation) OldAmount(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount: %w", err)
	}
	return oldValue.Amount, nil
}

// AddAmount adds u to the "amount" field.
func (m *UserSpecialReductionMutation) AddAmount(u int64) {
	if m.addamount != nil {
		*m.addamount += u
	} else {
		m.addamount = &u
	}
}

// AddedAmount returns the value that was added to the "amount" field in this mutation.
func (m *UserSpecialReductionMutation) AddedAmount() (r int64, exists bool) {
	v := m.addamount
	if v == nil {
		return
	}
	return *v, true
}

// ResetAmount resets all changes to the "amount" field.
func (m *UserSpecialReductionMutation) ResetAmount() {
	m.amount = nil
	m.addamount = nil
}

// SetReleaseByUserID sets the "release_by_user_id" field.
func (m *UserSpecialReductionMutation) SetReleaseByUserID(u uuid.UUID) {
	m.release_by_user_id = &u
}

// ReleaseByUserID returns the value of the "release_by_user_id" field in the mutation.
func (m *UserSpecialReductionMutation) ReleaseByUserID() (r uuid.UUID, exists bool) {
	v := m.release_by_user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldReleaseByUserID returns the old "release_by_user_id" field's value of the UserSpecialReduction entity.
// If the UserSpecialReduction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserSpecialReductionMutation) OldReleaseByUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReleaseByUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReleaseByUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReleaseByUserID: %w", err)
	}
	return oldValue.ReleaseByUserID, nil
}

// ResetReleaseByUserID resets all changes to the "release_by_user_id" field.
func (m *UserSpecialReductionMutation) ResetReleaseByUserID() {
	m.release_by_user_id = nil
}

// SetStart sets the "start" field.
func (m *UserSpecialReductionMutation) SetStart(u uint32) {
	m.start = &u
	m.addstart = nil
}

// Start returns the value of the "start" field in the mutation.
func (m *UserSpecialReductionMutation) Start() (r uint32, exists bool) {
	v := m.start
	if v == nil {
		return
	}
	return *v, true
}

// OldStart returns the old "start" field's value of the UserSpecialReduction entity.
// If the UserSpecialReduction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserSpecialReductionMutation) OldStart(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStart is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStart requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStart: %w", err)
	}
	return oldValue.Start, nil
}

// AddStart adds u to the "start" field.
func (m *UserSpecialReductionMutation) AddStart(u int32) {
	if m.addstart != nil {
		*m.addstart += u
	} else {
		m.addstart = &u
	}
}

// AddedStart returns the value that was added to the "start" field in this mutation.
func (m *UserSpecialReductionMutation) AddedStart() (r int32, exists bool) {
	v := m.addstart
	if v == nil {
		return
	}
	return *v, true
}

// ResetStart resets all changes to the "start" field.
func (m *UserSpecialReductionMutation) ResetStart() {
	m.start = nil
	m.addstart = nil
}

// SetDurationDays sets the "duration_days" field.
func (m *UserSpecialReductionMutation) SetDurationDays(i int32) {
	m.duration_days = &i
	m.addduration_days = nil
}

// DurationDays returns the value of the "duration_days" field in the mutation.
func (m *UserSpecialReductionMutation) DurationDays() (r int32, exists bool) {
	v := m.duration_days
	if v == nil {
		return
	}
	return *v, true
}

// OldDurationDays returns the old "duration_days" field's value of the UserSpecialReduction entity.
// If the UserSpecialReduction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserSpecialReductionMutation) OldDurationDays(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDurationDays is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDurationDays requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDurationDays: %w", err)
	}
	return oldValue.DurationDays, nil
}

// AddDurationDays adds i to the "duration_days" field.
func (m *UserSpecialReductionMutation) AddDurationDays(i int32) {
	if m.addduration_days != nil {
		*m.addduration_days += i
	} else {
		m.addduration_days = &i
	}
}

// AddedDurationDays returns the value that was added to the "duration_days" field in this mutation.
func (m *UserSpecialReductionMutation) AddedDurationDays() (r int32, exists bool) {
	v := m.addduration_days
	if v == nil {
		return
	}
	return *v, true
}

// ResetDurationDays resets all changes to the "duration_days" field.
func (m *UserSpecialReductionMutation) ResetDurationDays() {
	m.duration_days = nil
	m.addduration_days = nil
}

// SetMessage sets the "message" field.
func (m *UserSpecialReductionMutation) SetMessage(s string) {
	m.message = &s
}

// Message returns the value of the "message" field in the mutation.
func (m *UserSpecialReductionMutation) Message() (r string, exists bool) {
	v := m.message
	if v == nil {
		return
	}
	return *v, true
}

// OldMessage returns the old "message" field's value of the UserSpecialReduction entity.
// If the UserSpecialReduction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserSpecialReductionMutation) OldMessage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMessage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMessage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMessage: %w", err)
	}
	return oldValue.Message, nil
}

// ResetMessage resets all changes to the "message" field.
func (m *UserSpecialReductionMutation) ResetMessage() {
	m.message = nil
}

// SetCreateAt sets the "create_at" field.
func (m *UserSpecialReductionMutation) SetCreateAt(u uint32) {
	m.create_at = &u
	m.addcreate_at = nil
}

// CreateAt returns the value of the "create_at" field in the mutation.
func (m *UserSpecialReductionMutation) CreateAt() (r uint32, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateAt returns the old "create_at" field's value of the UserSpecialReduction entity.
// If the UserSpecialReduction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserSpecialReductionMutation) OldCreateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}
	return oldValue.CreateAt, nil
}

// AddCreateAt adds u to the "create_at" field.
func (m *UserSpecialReductionMutation) AddCreateAt(u int32) {
	if m.addcreate_at != nil {
		*m.addcreate_at += u
	} else {
		m.addcreate_at = &u
	}
}

// AddedCreateAt returns the value that was added to the "create_at" field in this mutation.
func (m *UserSpecialReductionMutation) AddedCreateAt() (r int32, exists bool) {
	v := m.addcreate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateAt resets all changes to the "create_at" field.
func (m *UserSpecialReductionMutation) ResetCreateAt() {
	m.create_at = nil
	m.addcreate_at = nil
}

// SetUpdateAt sets the "update_at" field.
func (m *UserSpecialReductionMutation) SetUpdateAt(u uint32) {
	m.update_at = &u
	m.addupdate_at = nil
}

// UpdateAt returns the value of the "update_at" field in the mutation.
func (m *UserSpecialReductionMutation) UpdateAt() (r uint32, exists bool) {
	v := m.update_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateAt returns the old "update_at" field's value of the UserSpecialReduction entity.
// If the UserSpecialReduction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserSpecialReductionMutation) OldUpdateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateAt: %w", err)
	}
	return oldValue.UpdateAt, nil
}

// AddUpdateAt adds u to the "update_at" field.
func (m *UserSpecialReductionMutation) AddUpdateAt(u int32) {
	if m.addupdate_at != nil {
		*m.addupdate_at += u
	} else {
		m.addupdate_at = &u
	}
}

// AddedUpdateAt returns the value that was added to the "update_at" field in this mutation.
func (m *UserSpecialReductionMutation) AddedUpdateAt() (r int32, exists bool) {
	v := m.addupdate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateAt resets all changes to the "update_at" field.
func (m *UserSpecialReductionMutation) ResetUpdateAt() {
	m.update_at = nil
	m.addupdate_at = nil
}

// SetDeleteAt sets the "delete_at" field.
func (m *UserSpecialReductionMutation) SetDeleteAt(u uint32) {
	m.delete_at = &u
	m.adddelete_at = nil
}

// DeleteAt returns the value of the "delete_at" field in the mutation.
func (m *UserSpecialReductionMutation) DeleteAt() (r uint32, exists bool) {
	v := m.delete_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteAt returns the old "delete_at" field's value of the UserSpecialReduction entity.
// If the UserSpecialReduction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserSpecialReductionMutation) OldDeleteAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteAt: %w", err)
	}
	return oldValue.DeleteAt, nil
}

// AddDeleteAt adds u to the "delete_at" field.
func (m *UserSpecialReductionMutation) AddDeleteAt(u int32) {
	if m.adddelete_at != nil {
		*m.adddelete_at += u
	} else {
		m.adddelete_at = &u
	}
}

// AddedDeleteAt returns the value that was added to the "delete_at" field in this mutation.
func (m *UserSpecialReductionMutation) AddedDeleteAt() (r int32, exists bool) {
	v := m.adddelete_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeleteAt resets all changes to the "delete_at" field.
func (m *UserSpecialReductionMutation) ResetDeleteAt() {
	m.delete_at = nil
	m.adddelete_at = nil
}

// Where appends a list predicates to the UserSpecialReductionMutation builder.
func (m *UserSpecialReductionMutation) Where(ps ...predicate.UserSpecialReduction) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UserSpecialReductionMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (UserSpecialReduction).
func (m *UserSpecialReductionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserSpecialReductionMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.app_id != nil {
		fields = append(fields, userspecialreduction.FieldAppID)
	}
	if m.user_id != nil {
		fields = append(fields, userspecialreduction.FieldUserID)
	}
	if m.amount != nil {
		fields = append(fields, userspecialreduction.FieldAmount)
	}
	if m.release_by_user_id != nil {
		fields = append(fields, userspecialreduction.FieldReleaseByUserID)
	}
	if m.start != nil {
		fields = append(fields, userspecialreduction.FieldStart)
	}
	if m.duration_days != nil {
		fields = append(fields, userspecialreduction.FieldDurationDays)
	}
	if m.message != nil {
		fields = append(fields, userspecialreduction.FieldMessage)
	}
	if m.create_at != nil {
		fields = append(fields, userspecialreduction.FieldCreateAt)
	}
	if m.update_at != nil {
		fields = append(fields, userspecialreduction.FieldUpdateAt)
	}
	if m.delete_at != nil {
		fields = append(fields, userspecialreduction.FieldDeleteAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserSpecialReductionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case userspecialreduction.FieldAppID:
		return m.AppID()
	case userspecialreduction.FieldUserID:
		return m.UserID()
	case userspecialreduction.FieldAmount:
		return m.Amount()
	case userspecialreduction.FieldReleaseByUserID:
		return m.ReleaseByUserID()
	case userspecialreduction.FieldStart:
		return m.Start()
	case userspecialreduction.FieldDurationDays:
		return m.DurationDays()
	case userspecialreduction.FieldMessage:
		return m.Message()
	case userspecialreduction.FieldCreateAt:
		return m.CreateAt()
	case userspecialreduction.FieldUpdateAt:
		return m.UpdateAt()
	case userspecialreduction.FieldDeleteAt:
		return m.DeleteAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserSpecialReductionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case userspecialreduction.FieldAppID:
		return m.OldAppID(ctx)
	case userspecialreduction.FieldUserID:
		return m.OldUserID(ctx)
	case userspecialreduction.FieldAmount:
		return m.OldAmount(ctx)
	case userspecialreduction.FieldReleaseByUserID:
		return m.OldReleaseByUserID(ctx)
	case userspecialreduction.FieldStart:
		return m.OldStart(ctx)
	case userspecialreduction.FieldDurationDays:
		return m.OldDurationDays(ctx)
	case userspecialreduction.FieldMessage:
		return m.OldMessage(ctx)
	case userspecialreduction.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case userspecialreduction.FieldUpdateAt:
		return m.OldUpdateAt(ctx)
	case userspecialreduction.FieldDeleteAt:
		return m.OldDeleteAt(ctx)
	}
	return nil, fmt.Errorf("unknown UserSpecialReduction field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserSpecialReductionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case userspecialreduction.FieldAppID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case userspecialreduction.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case userspecialreduction.FieldAmount:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount(v)
		return nil
	case userspecialreduction.FieldReleaseByUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReleaseByUserID(v)
		return nil
	case userspecialreduction.FieldStart:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStart(v)
		return nil
	case userspecialreduction.FieldDurationDays:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDurationDays(v)
		return nil
	case userspecialreduction.FieldMessage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMessage(v)
		return nil
	case userspecialreduction.FieldCreateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateAt(v)
		return nil
	case userspecialreduction.FieldUpdateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateAt(v)
		return nil
	case userspecialreduction.FieldDeleteAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown UserSpecialReduction field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserSpecialReductionMutation) AddedFields() []string {
	var fields []string
	if m.addamount != nil {
		fields = append(fields, userspecialreduction.FieldAmount)
	}
	if m.addstart != nil {
		fields = append(fields, userspecialreduction.FieldStart)
	}
	if m.addduration_days != nil {
		fields = append(fields, userspecialreduction.FieldDurationDays)
	}
	if m.addcreate_at != nil {
		fields = append(fields, userspecialreduction.FieldCreateAt)
	}
	if m.addupdate_at != nil {
		fields = append(fields, userspecialreduction.FieldUpdateAt)
	}
	if m.adddelete_at != nil {
		fields = append(fields, userspecialreduction.FieldDeleteAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserSpecialReductionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case userspecialreduction.FieldAmount:
		return m.AddedAmount()
	case userspecialreduction.FieldStart:
		return m.AddedStart()
	case userspecialreduction.FieldDurationDays:
		return m.AddedDurationDays()
	case userspecialreduction.FieldCreateAt:
		return m.AddedCreateAt()
	case userspecialreduction.FieldUpdateAt:
		return m.AddedUpdateAt()
	case userspecialreduction.FieldDeleteAt:
		return m.AddedDeleteAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserSpecialReductionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case userspecialreduction.FieldAmount:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAmount(v)
		return nil
	case userspecialreduction.FieldStart:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStart(v)
		return nil
	case userspecialreduction.FieldDurationDays:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDurationDays(v)
		return nil
	case userspecialreduction.FieldCreateAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateAt(v)
		return nil
	case userspecialreduction.FieldUpdateAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateAt(v)
		return nil
	case userspecialreduction.FieldDeleteAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown UserSpecialReduction numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserSpecialReductionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserSpecialReductionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserSpecialReductionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown UserSpecialReduction nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserSpecialReductionMutation) ResetField(name string) error {
	switch name {
	case userspecialreduction.FieldAppID:
		m.ResetAppID()
		return nil
	case userspecialreduction.FieldUserID:
		m.ResetUserID()
		return nil
	case userspecialreduction.FieldAmount:
		m.ResetAmount()
		return nil
	case userspecialreduction.FieldReleaseByUserID:
		m.ResetReleaseByUserID()
		return nil
	case userspecialreduction.FieldStart:
		m.ResetStart()
		return nil
	case userspecialreduction.FieldDurationDays:
		m.ResetDurationDays()
		return nil
	case userspecialreduction.FieldMessage:
		m.ResetMessage()
		return nil
	case userspecialreduction.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case userspecialreduction.FieldUpdateAt:
		m.ResetUpdateAt()
		return nil
	case userspecialreduction.FieldDeleteAt:
		m.ResetDeleteAt()
		return nil
	}
	return fmt.Errorf("unknown UserSpecialReduction field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserSpecialReductionMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserSpecialReductionMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserSpecialReductionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserSpecialReductionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserSpecialReductionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserSpecialReductionMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserSpecialReductionMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown UserSpecialReduction unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserSpecialReductionMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown UserSpecialReduction edge %s", name)
}
