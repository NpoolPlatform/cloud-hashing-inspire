// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/apppurchaseamountsetting"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// AppPurchaseAmountSettingUpdate is the builder for updating AppPurchaseAmountSetting entities.
type AppPurchaseAmountSettingUpdate struct {
	config
	hooks    []Hook
	mutation *AppPurchaseAmountSettingMutation
}

// Where appends a list predicates to the AppPurchaseAmountSettingUpdate builder.
func (apasu *AppPurchaseAmountSettingUpdate) Where(ps ...predicate.AppPurchaseAmountSetting) *AppPurchaseAmountSettingUpdate {
	apasu.mutation.Where(ps...)
	return apasu
}

// SetAppID sets the "app_id" field.
func (apasu *AppPurchaseAmountSettingUpdate) SetAppID(u uuid.UUID) *AppPurchaseAmountSettingUpdate {
	apasu.mutation.SetAppID(u)
	return apasu
}

// SetTitle sets the "title" field.
func (apasu *AppPurchaseAmountSettingUpdate) SetTitle(s string) *AppPurchaseAmountSettingUpdate {
	apasu.mutation.SetTitle(s)
	return apasu
}

// SetAmount sets the "amount" field.
func (apasu *AppPurchaseAmountSettingUpdate) SetAmount(u uint64) *AppPurchaseAmountSettingUpdate {
	apasu.mutation.ResetAmount()
	apasu.mutation.SetAmount(u)
	return apasu
}

// AddAmount adds u to the "amount" field.
func (apasu *AppPurchaseAmountSettingUpdate) AddAmount(u int64) *AppPurchaseAmountSettingUpdate {
	apasu.mutation.AddAmount(u)
	return apasu
}

// SetPercent sets the "percent" field.
func (apasu *AppPurchaseAmountSettingUpdate) SetPercent(u uint32) *AppPurchaseAmountSettingUpdate {
	apasu.mutation.ResetPercent()
	apasu.mutation.SetPercent(u)
	return apasu
}

// AddPercent adds u to the "percent" field.
func (apasu *AppPurchaseAmountSettingUpdate) AddPercent(u int32) *AppPurchaseAmountSettingUpdate {
	apasu.mutation.AddPercent(u)
	return apasu
}

// SetStart sets the "start" field.
func (apasu *AppPurchaseAmountSettingUpdate) SetStart(u uint32) *AppPurchaseAmountSettingUpdate {
	apasu.mutation.ResetStart()
	apasu.mutation.SetStart(u)
	return apasu
}

// AddStart adds u to the "start" field.
func (apasu *AppPurchaseAmountSettingUpdate) AddStart(u int32) *AppPurchaseAmountSettingUpdate {
	apasu.mutation.AddStart(u)
	return apasu
}

// SetEnd sets the "end" field.
func (apasu *AppPurchaseAmountSettingUpdate) SetEnd(u uint32) *AppPurchaseAmountSettingUpdate {
	apasu.mutation.ResetEnd()
	apasu.mutation.SetEnd(u)
	return apasu
}

// AddEnd adds u to the "end" field.
func (apasu *AppPurchaseAmountSettingUpdate) AddEnd(u int32) *AppPurchaseAmountSettingUpdate {
	apasu.mutation.AddEnd(u)
	return apasu
}

// SetBadgeLarge sets the "badge_large" field.
func (apasu *AppPurchaseAmountSettingUpdate) SetBadgeLarge(s string) *AppPurchaseAmountSettingUpdate {
	apasu.mutation.SetBadgeLarge(s)
	return apasu
}

// SetBadgeSmall sets the "badge_small" field.
func (apasu *AppPurchaseAmountSettingUpdate) SetBadgeSmall(s string) *AppPurchaseAmountSettingUpdate {
	apasu.mutation.SetBadgeSmall(s)
	return apasu
}

// SetCreateAt sets the "create_at" field.
func (apasu *AppPurchaseAmountSettingUpdate) SetCreateAt(u uint32) *AppPurchaseAmountSettingUpdate {
	apasu.mutation.ResetCreateAt()
	apasu.mutation.SetCreateAt(u)
	return apasu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (apasu *AppPurchaseAmountSettingUpdate) SetNillableCreateAt(u *uint32) *AppPurchaseAmountSettingUpdate {
	if u != nil {
		apasu.SetCreateAt(*u)
	}
	return apasu
}

// AddCreateAt adds u to the "create_at" field.
func (apasu *AppPurchaseAmountSettingUpdate) AddCreateAt(u int32) *AppPurchaseAmountSettingUpdate {
	apasu.mutation.AddCreateAt(u)
	return apasu
}

// SetUpdateAt sets the "update_at" field.
func (apasu *AppPurchaseAmountSettingUpdate) SetUpdateAt(u uint32) *AppPurchaseAmountSettingUpdate {
	apasu.mutation.ResetUpdateAt()
	apasu.mutation.SetUpdateAt(u)
	return apasu
}

// AddUpdateAt adds u to the "update_at" field.
func (apasu *AppPurchaseAmountSettingUpdate) AddUpdateAt(u int32) *AppPurchaseAmountSettingUpdate {
	apasu.mutation.AddUpdateAt(u)
	return apasu
}

// SetDeleteAt sets the "delete_at" field.
func (apasu *AppPurchaseAmountSettingUpdate) SetDeleteAt(u uint32) *AppPurchaseAmountSettingUpdate {
	apasu.mutation.ResetDeleteAt()
	apasu.mutation.SetDeleteAt(u)
	return apasu
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (apasu *AppPurchaseAmountSettingUpdate) SetNillableDeleteAt(u *uint32) *AppPurchaseAmountSettingUpdate {
	if u != nil {
		apasu.SetDeleteAt(*u)
	}
	return apasu
}

// AddDeleteAt adds u to the "delete_at" field.
func (apasu *AppPurchaseAmountSettingUpdate) AddDeleteAt(u int32) *AppPurchaseAmountSettingUpdate {
	apasu.mutation.AddDeleteAt(u)
	return apasu
}

// Mutation returns the AppPurchaseAmountSettingMutation object of the builder.
func (apasu *AppPurchaseAmountSettingUpdate) Mutation() *AppPurchaseAmountSettingMutation {
	return apasu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (apasu *AppPurchaseAmountSettingUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	apasu.defaults()
	if len(apasu.hooks) == 0 {
		affected, err = apasu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppPurchaseAmountSettingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			apasu.mutation = mutation
			affected, err = apasu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(apasu.hooks) - 1; i >= 0; i-- {
			if apasu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = apasu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, apasu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (apasu *AppPurchaseAmountSettingUpdate) SaveX(ctx context.Context) int {
	affected, err := apasu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (apasu *AppPurchaseAmountSettingUpdate) Exec(ctx context.Context) error {
	_, err := apasu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (apasu *AppPurchaseAmountSettingUpdate) ExecX(ctx context.Context) {
	if err := apasu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (apasu *AppPurchaseAmountSettingUpdate) defaults() {
	if _, ok := apasu.mutation.UpdateAt(); !ok {
		v := apppurchaseamountsetting.UpdateDefaultUpdateAt()
		apasu.mutation.SetUpdateAt(v)
	}
}

func (apasu *AppPurchaseAmountSettingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   apppurchaseamountsetting.Table,
			Columns: apppurchaseamountsetting.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: apppurchaseamountsetting.FieldID,
			},
		},
	}
	if ps := apasu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := apasu.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: apppurchaseamountsetting.FieldAppID,
		})
	}
	if value, ok := apasu.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: apppurchaseamountsetting.FieldTitle,
		})
	}
	if value, ok := apasu.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: apppurchaseamountsetting.FieldAmount,
		})
	}
	if value, ok := apasu.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: apppurchaseamountsetting.FieldAmount,
		})
	}
	if value, ok := apasu.mutation.Percent(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: apppurchaseamountsetting.FieldPercent,
		})
	}
	if value, ok := apasu.mutation.AddedPercent(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: apppurchaseamountsetting.FieldPercent,
		})
	}
	if value, ok := apasu.mutation.Start(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: apppurchaseamountsetting.FieldStart,
		})
	}
	if value, ok := apasu.mutation.AddedStart(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: apppurchaseamountsetting.FieldStart,
		})
	}
	if value, ok := apasu.mutation.End(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: apppurchaseamountsetting.FieldEnd,
		})
	}
	if value, ok := apasu.mutation.AddedEnd(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: apppurchaseamountsetting.FieldEnd,
		})
	}
	if value, ok := apasu.mutation.BadgeLarge(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: apppurchaseamountsetting.FieldBadgeLarge,
		})
	}
	if value, ok := apasu.mutation.BadgeSmall(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: apppurchaseamountsetting.FieldBadgeSmall,
		})
	}
	if value, ok := apasu.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: apppurchaseamountsetting.FieldCreateAt,
		})
	}
	if value, ok := apasu.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: apppurchaseamountsetting.FieldCreateAt,
		})
	}
	if value, ok := apasu.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: apppurchaseamountsetting.FieldUpdateAt,
		})
	}
	if value, ok := apasu.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: apppurchaseamountsetting.FieldUpdateAt,
		})
	}
	if value, ok := apasu.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: apppurchaseamountsetting.FieldDeleteAt,
		})
	}
	if value, ok := apasu.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: apppurchaseamountsetting.FieldDeleteAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, apasu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{apppurchaseamountsetting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AppPurchaseAmountSettingUpdateOne is the builder for updating a single AppPurchaseAmountSetting entity.
type AppPurchaseAmountSettingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AppPurchaseAmountSettingMutation
}

// SetAppID sets the "app_id" field.
func (apasuo *AppPurchaseAmountSettingUpdateOne) SetAppID(u uuid.UUID) *AppPurchaseAmountSettingUpdateOne {
	apasuo.mutation.SetAppID(u)
	return apasuo
}

// SetTitle sets the "title" field.
func (apasuo *AppPurchaseAmountSettingUpdateOne) SetTitle(s string) *AppPurchaseAmountSettingUpdateOne {
	apasuo.mutation.SetTitle(s)
	return apasuo
}

// SetAmount sets the "amount" field.
func (apasuo *AppPurchaseAmountSettingUpdateOne) SetAmount(u uint64) *AppPurchaseAmountSettingUpdateOne {
	apasuo.mutation.ResetAmount()
	apasuo.mutation.SetAmount(u)
	return apasuo
}

// AddAmount adds u to the "amount" field.
func (apasuo *AppPurchaseAmountSettingUpdateOne) AddAmount(u int64) *AppPurchaseAmountSettingUpdateOne {
	apasuo.mutation.AddAmount(u)
	return apasuo
}

// SetPercent sets the "percent" field.
func (apasuo *AppPurchaseAmountSettingUpdateOne) SetPercent(u uint32) *AppPurchaseAmountSettingUpdateOne {
	apasuo.mutation.ResetPercent()
	apasuo.mutation.SetPercent(u)
	return apasuo
}

// AddPercent adds u to the "percent" field.
func (apasuo *AppPurchaseAmountSettingUpdateOne) AddPercent(u int32) *AppPurchaseAmountSettingUpdateOne {
	apasuo.mutation.AddPercent(u)
	return apasuo
}

// SetStart sets the "start" field.
func (apasuo *AppPurchaseAmountSettingUpdateOne) SetStart(u uint32) *AppPurchaseAmountSettingUpdateOne {
	apasuo.mutation.ResetStart()
	apasuo.mutation.SetStart(u)
	return apasuo
}

// AddStart adds u to the "start" field.
func (apasuo *AppPurchaseAmountSettingUpdateOne) AddStart(u int32) *AppPurchaseAmountSettingUpdateOne {
	apasuo.mutation.AddStart(u)
	return apasuo
}

// SetEnd sets the "end" field.
func (apasuo *AppPurchaseAmountSettingUpdateOne) SetEnd(u uint32) *AppPurchaseAmountSettingUpdateOne {
	apasuo.mutation.ResetEnd()
	apasuo.mutation.SetEnd(u)
	return apasuo
}

// AddEnd adds u to the "end" field.
func (apasuo *AppPurchaseAmountSettingUpdateOne) AddEnd(u int32) *AppPurchaseAmountSettingUpdateOne {
	apasuo.mutation.AddEnd(u)
	return apasuo
}

// SetBadgeLarge sets the "badge_large" field.
func (apasuo *AppPurchaseAmountSettingUpdateOne) SetBadgeLarge(s string) *AppPurchaseAmountSettingUpdateOne {
	apasuo.mutation.SetBadgeLarge(s)
	return apasuo
}

// SetBadgeSmall sets the "badge_small" field.
func (apasuo *AppPurchaseAmountSettingUpdateOne) SetBadgeSmall(s string) *AppPurchaseAmountSettingUpdateOne {
	apasuo.mutation.SetBadgeSmall(s)
	return apasuo
}

// SetCreateAt sets the "create_at" field.
func (apasuo *AppPurchaseAmountSettingUpdateOne) SetCreateAt(u uint32) *AppPurchaseAmountSettingUpdateOne {
	apasuo.mutation.ResetCreateAt()
	apasuo.mutation.SetCreateAt(u)
	return apasuo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (apasuo *AppPurchaseAmountSettingUpdateOne) SetNillableCreateAt(u *uint32) *AppPurchaseAmountSettingUpdateOne {
	if u != nil {
		apasuo.SetCreateAt(*u)
	}
	return apasuo
}

// AddCreateAt adds u to the "create_at" field.
func (apasuo *AppPurchaseAmountSettingUpdateOne) AddCreateAt(u int32) *AppPurchaseAmountSettingUpdateOne {
	apasuo.mutation.AddCreateAt(u)
	return apasuo
}

// SetUpdateAt sets the "update_at" field.
func (apasuo *AppPurchaseAmountSettingUpdateOne) SetUpdateAt(u uint32) *AppPurchaseAmountSettingUpdateOne {
	apasuo.mutation.ResetUpdateAt()
	apasuo.mutation.SetUpdateAt(u)
	return apasuo
}

// AddUpdateAt adds u to the "update_at" field.
func (apasuo *AppPurchaseAmountSettingUpdateOne) AddUpdateAt(u int32) *AppPurchaseAmountSettingUpdateOne {
	apasuo.mutation.AddUpdateAt(u)
	return apasuo
}

// SetDeleteAt sets the "delete_at" field.
func (apasuo *AppPurchaseAmountSettingUpdateOne) SetDeleteAt(u uint32) *AppPurchaseAmountSettingUpdateOne {
	apasuo.mutation.ResetDeleteAt()
	apasuo.mutation.SetDeleteAt(u)
	return apasuo
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (apasuo *AppPurchaseAmountSettingUpdateOne) SetNillableDeleteAt(u *uint32) *AppPurchaseAmountSettingUpdateOne {
	if u != nil {
		apasuo.SetDeleteAt(*u)
	}
	return apasuo
}

// AddDeleteAt adds u to the "delete_at" field.
func (apasuo *AppPurchaseAmountSettingUpdateOne) AddDeleteAt(u int32) *AppPurchaseAmountSettingUpdateOne {
	apasuo.mutation.AddDeleteAt(u)
	return apasuo
}

// Mutation returns the AppPurchaseAmountSettingMutation object of the builder.
func (apasuo *AppPurchaseAmountSettingUpdateOne) Mutation() *AppPurchaseAmountSettingMutation {
	return apasuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (apasuo *AppPurchaseAmountSettingUpdateOne) Select(field string, fields ...string) *AppPurchaseAmountSettingUpdateOne {
	apasuo.fields = append([]string{field}, fields...)
	return apasuo
}

// Save executes the query and returns the updated AppPurchaseAmountSetting entity.
func (apasuo *AppPurchaseAmountSettingUpdateOne) Save(ctx context.Context) (*AppPurchaseAmountSetting, error) {
	var (
		err  error
		node *AppPurchaseAmountSetting
	)
	apasuo.defaults()
	if len(apasuo.hooks) == 0 {
		node, err = apasuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppPurchaseAmountSettingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			apasuo.mutation = mutation
			node, err = apasuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(apasuo.hooks) - 1; i >= 0; i-- {
			if apasuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = apasuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, apasuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (apasuo *AppPurchaseAmountSettingUpdateOne) SaveX(ctx context.Context) *AppPurchaseAmountSetting {
	node, err := apasuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (apasuo *AppPurchaseAmountSettingUpdateOne) Exec(ctx context.Context) error {
	_, err := apasuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (apasuo *AppPurchaseAmountSettingUpdateOne) ExecX(ctx context.Context) {
	if err := apasuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (apasuo *AppPurchaseAmountSettingUpdateOne) defaults() {
	if _, ok := apasuo.mutation.UpdateAt(); !ok {
		v := apppurchaseamountsetting.UpdateDefaultUpdateAt()
		apasuo.mutation.SetUpdateAt(v)
	}
}

func (apasuo *AppPurchaseAmountSettingUpdateOne) sqlSave(ctx context.Context) (_node *AppPurchaseAmountSetting, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   apppurchaseamountsetting.Table,
			Columns: apppurchaseamountsetting.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: apppurchaseamountsetting.FieldID,
			},
		},
	}
	id, ok := apasuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AppPurchaseAmountSetting.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := apasuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, apppurchaseamountsetting.FieldID)
		for _, f := range fields {
			if !apppurchaseamountsetting.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != apppurchaseamountsetting.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := apasuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := apasuo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: apppurchaseamountsetting.FieldAppID,
		})
	}
	if value, ok := apasuo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: apppurchaseamountsetting.FieldTitle,
		})
	}
	if value, ok := apasuo.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: apppurchaseamountsetting.FieldAmount,
		})
	}
	if value, ok := apasuo.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: apppurchaseamountsetting.FieldAmount,
		})
	}
	if value, ok := apasuo.mutation.Percent(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: apppurchaseamountsetting.FieldPercent,
		})
	}
	if value, ok := apasuo.mutation.AddedPercent(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: apppurchaseamountsetting.FieldPercent,
		})
	}
	if value, ok := apasuo.mutation.Start(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: apppurchaseamountsetting.FieldStart,
		})
	}
	if value, ok := apasuo.mutation.AddedStart(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: apppurchaseamountsetting.FieldStart,
		})
	}
	if value, ok := apasuo.mutation.End(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: apppurchaseamountsetting.FieldEnd,
		})
	}
	if value, ok := apasuo.mutation.AddedEnd(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: apppurchaseamountsetting.FieldEnd,
		})
	}
	if value, ok := apasuo.mutation.BadgeLarge(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: apppurchaseamountsetting.FieldBadgeLarge,
		})
	}
	if value, ok := apasuo.mutation.BadgeSmall(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: apppurchaseamountsetting.FieldBadgeSmall,
		})
	}
	if value, ok := apasuo.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: apppurchaseamountsetting.FieldCreateAt,
		})
	}
	if value, ok := apasuo.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: apppurchaseamountsetting.FieldCreateAt,
		})
	}
	if value, ok := apasuo.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: apppurchaseamountsetting.FieldUpdateAt,
		})
	}
	if value, ok := apasuo.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: apppurchaseamountsetting.FieldUpdateAt,
		})
	}
	if value, ok := apasuo.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: apppurchaseamountsetting.FieldDeleteAt,
		})
	}
	if value, ok := apasuo.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: apppurchaseamountsetting.FieldDeleteAt,
		})
	}
	_node = &AppPurchaseAmountSetting{config: apasuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, apasuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{apppurchaseamountsetting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
