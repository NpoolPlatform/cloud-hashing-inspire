// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/appinvitationsetting"
	"github.com/google/uuid"
)

// AppInvitationSetting is the model entity for the AppInvitationSetting schema.
type AppInvitationSetting struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID uuid.UUID `json:"app_id,omitempty"`
	// Count holds the value of the "count" field.
	Count uint32 `json:"count,omitempty"`
	// Discount holds the value of the "discount" field.
	Discount uint32 `json:"discount,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// BadgeLarge holds the value of the "badge_large" field.
	BadgeLarge string `json:"badge_large,omitempty"`
	// BadgeSmall holds the value of the "badge_small" field.
	BadgeSmall string `json:"badge_small,omitempty"`
	// CreateAt holds the value of the "create_at" field.
	CreateAt uint32 `json:"create_at,omitempty"`
	// UpdateAt holds the value of the "update_at" field.
	UpdateAt uint32 `json:"update_at,omitempty"`
	// DeleteAt holds the value of the "delete_at" field.
	DeleteAt uint32 `json:"delete_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AppInvitationSetting) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case appinvitationsetting.FieldCount, appinvitationsetting.FieldDiscount, appinvitationsetting.FieldCreateAt, appinvitationsetting.FieldUpdateAt, appinvitationsetting.FieldDeleteAt:
			values[i] = new(sql.NullInt64)
		case appinvitationsetting.FieldTitle, appinvitationsetting.FieldBadgeLarge, appinvitationsetting.FieldBadgeSmall:
			values[i] = new(sql.NullString)
		case appinvitationsetting.FieldID, appinvitationsetting.FieldAppID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AppInvitationSetting", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AppInvitationSetting fields.
func (ais *AppInvitationSetting) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case appinvitationsetting.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ais.ID = *value
			}
		case appinvitationsetting.FieldAppID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value != nil {
				ais.AppID = *value
			}
		case appinvitationsetting.FieldCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field count", values[i])
			} else if value.Valid {
				ais.Count = uint32(value.Int64)
			}
		case appinvitationsetting.FieldDiscount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field discount", values[i])
			} else if value.Valid {
				ais.Discount = uint32(value.Int64)
			}
		case appinvitationsetting.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				ais.Title = value.String
			}
		case appinvitationsetting.FieldBadgeLarge:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field badge_large", values[i])
			} else if value.Valid {
				ais.BadgeLarge = value.String
			}
		case appinvitationsetting.FieldBadgeSmall:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field badge_small", values[i])
			} else if value.Valid {
				ais.BadgeSmall = value.String
			}
		case appinvitationsetting.FieldCreateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				ais.CreateAt = uint32(value.Int64)
			}
		case appinvitationsetting.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				ais.UpdateAt = uint32(value.Int64)
			}
		case appinvitationsetting.FieldDeleteAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete_at", values[i])
			} else if value.Valid {
				ais.DeleteAt = uint32(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this AppInvitationSetting.
// Note that you need to call AppInvitationSetting.Unwrap() before calling this method if this AppInvitationSetting
// was returned from a transaction, and the transaction was committed or rolled back.
func (ais *AppInvitationSetting) Update() *AppInvitationSettingUpdateOne {
	return (&AppInvitationSettingClient{config: ais.config}).UpdateOne(ais)
}

// Unwrap unwraps the AppInvitationSetting entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ais *AppInvitationSetting) Unwrap() *AppInvitationSetting {
	tx, ok := ais.config.driver.(*txDriver)
	if !ok {
		panic("ent: AppInvitationSetting is not a transactional entity")
	}
	ais.config.driver = tx.drv
	return ais
}

// String implements the fmt.Stringer.
func (ais *AppInvitationSetting) String() string {
	var builder strings.Builder
	builder.WriteString("AppInvitationSetting(")
	builder.WriteString(fmt.Sprintf("id=%v", ais.ID))
	builder.WriteString(", app_id=")
	builder.WriteString(fmt.Sprintf("%v", ais.AppID))
	builder.WriteString(", count=")
	builder.WriteString(fmt.Sprintf("%v", ais.Count))
	builder.WriteString(", discount=")
	builder.WriteString(fmt.Sprintf("%v", ais.Discount))
	builder.WriteString(", title=")
	builder.WriteString(ais.Title)
	builder.WriteString(", badge_large=")
	builder.WriteString(ais.BadgeLarge)
	builder.WriteString(", badge_small=")
	builder.WriteString(ais.BadgeSmall)
	builder.WriteString(", create_at=")
	builder.WriteString(fmt.Sprintf("%v", ais.CreateAt))
	builder.WriteString(", update_at=")
	builder.WriteString(fmt.Sprintf("%v", ais.UpdateAt))
	builder.WriteString(", delete_at=")
	builder.WriteString(fmt.Sprintf("%v", ais.DeleteAt))
	builder.WriteByte(')')
	return builder.String()
}

// AppInvitationSettings is a parsable slice of AppInvitationSetting.
type AppInvitationSettings []*AppInvitationSetting

func (ais AppInvitationSettings) config(cfg config) {
	for _i := range ais {
		ais[_i].config = cfg
	}
}
