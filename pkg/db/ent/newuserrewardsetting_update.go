// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/newuserrewardsetting"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// NewUserRewardSettingUpdate is the builder for updating NewUserRewardSetting entities.
type NewUserRewardSettingUpdate struct {
	config
	hooks    []Hook
	mutation *NewUserRewardSettingMutation
}

// Where appends a list predicates to the NewUserRewardSettingUpdate builder.
func (nursu *NewUserRewardSettingUpdate) Where(ps ...predicate.NewUserRewardSetting) *NewUserRewardSettingUpdate {
	nursu.mutation.Where(ps...)
	return nursu
}

// SetAppID sets the "app_id" field.
func (nursu *NewUserRewardSettingUpdate) SetAppID(u uuid.UUID) *NewUserRewardSettingUpdate {
	nursu.mutation.SetAppID(u)
	return nursu
}

// SetRegistrationCouponID sets the "registration_coupon_id" field.
func (nursu *NewUserRewardSettingUpdate) SetRegistrationCouponID(u uuid.UUID) *NewUserRewardSettingUpdate {
	nursu.mutation.SetRegistrationCouponID(u)
	return nursu
}

// SetKycCouponID sets the "kyc_coupon_id" field.
func (nursu *NewUserRewardSettingUpdate) SetKycCouponID(u uuid.UUID) *NewUserRewardSettingUpdate {
	nursu.mutation.SetKycCouponID(u)
	return nursu
}

// SetAutoGenerateInvitationCode sets the "auto_generate_invitation_code" field.
func (nursu *NewUserRewardSettingUpdate) SetAutoGenerateInvitationCode(b bool) *NewUserRewardSettingUpdate {
	nursu.mutation.SetAutoGenerateInvitationCode(b)
	return nursu
}

// SetNillableAutoGenerateInvitationCode sets the "auto_generate_invitation_code" field if the given value is not nil.
func (nursu *NewUserRewardSettingUpdate) SetNillableAutoGenerateInvitationCode(b *bool) *NewUserRewardSettingUpdate {
	if b != nil {
		nursu.SetAutoGenerateInvitationCode(*b)
	}
	return nursu
}

// SetCreateAt sets the "create_at" field.
func (nursu *NewUserRewardSettingUpdate) SetCreateAt(u uint32) *NewUserRewardSettingUpdate {
	nursu.mutation.ResetCreateAt()
	nursu.mutation.SetCreateAt(u)
	return nursu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (nursu *NewUserRewardSettingUpdate) SetNillableCreateAt(u *uint32) *NewUserRewardSettingUpdate {
	if u != nil {
		nursu.SetCreateAt(*u)
	}
	return nursu
}

// AddCreateAt adds u to the "create_at" field.
func (nursu *NewUserRewardSettingUpdate) AddCreateAt(u int32) *NewUserRewardSettingUpdate {
	nursu.mutation.AddCreateAt(u)
	return nursu
}

// SetUpdateAt sets the "update_at" field.
func (nursu *NewUserRewardSettingUpdate) SetUpdateAt(u uint32) *NewUserRewardSettingUpdate {
	nursu.mutation.ResetUpdateAt()
	nursu.mutation.SetUpdateAt(u)
	return nursu
}

// AddUpdateAt adds u to the "update_at" field.
func (nursu *NewUserRewardSettingUpdate) AddUpdateAt(u int32) *NewUserRewardSettingUpdate {
	nursu.mutation.AddUpdateAt(u)
	return nursu
}

// SetDeleteAt sets the "delete_at" field.
func (nursu *NewUserRewardSettingUpdate) SetDeleteAt(u uint32) *NewUserRewardSettingUpdate {
	nursu.mutation.ResetDeleteAt()
	nursu.mutation.SetDeleteAt(u)
	return nursu
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (nursu *NewUserRewardSettingUpdate) SetNillableDeleteAt(u *uint32) *NewUserRewardSettingUpdate {
	if u != nil {
		nursu.SetDeleteAt(*u)
	}
	return nursu
}

// AddDeleteAt adds u to the "delete_at" field.
func (nursu *NewUserRewardSettingUpdate) AddDeleteAt(u int32) *NewUserRewardSettingUpdate {
	nursu.mutation.AddDeleteAt(u)
	return nursu
}

// Mutation returns the NewUserRewardSettingMutation object of the builder.
func (nursu *NewUserRewardSettingUpdate) Mutation() *NewUserRewardSettingMutation {
	return nursu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nursu *NewUserRewardSettingUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	nursu.defaults()
	if len(nursu.hooks) == 0 {
		affected, err = nursu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NewUserRewardSettingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			nursu.mutation = mutation
			affected, err = nursu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(nursu.hooks) - 1; i >= 0; i-- {
			if nursu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = nursu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, nursu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (nursu *NewUserRewardSettingUpdate) SaveX(ctx context.Context) int {
	affected, err := nursu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nursu *NewUserRewardSettingUpdate) Exec(ctx context.Context) error {
	_, err := nursu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nursu *NewUserRewardSettingUpdate) ExecX(ctx context.Context) {
	if err := nursu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nursu *NewUserRewardSettingUpdate) defaults() {
	if _, ok := nursu.mutation.UpdateAt(); !ok {
		v := newuserrewardsetting.UpdateDefaultUpdateAt()
		nursu.mutation.SetUpdateAt(v)
	}
}

func (nursu *NewUserRewardSettingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   newuserrewardsetting.Table,
			Columns: newuserrewardsetting.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: newuserrewardsetting.FieldID,
			},
		},
	}
	if ps := nursu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nursu.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: newuserrewardsetting.FieldAppID,
		})
	}
	if value, ok := nursu.mutation.RegistrationCouponID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: newuserrewardsetting.FieldRegistrationCouponID,
		})
	}
	if value, ok := nursu.mutation.KycCouponID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: newuserrewardsetting.FieldKycCouponID,
		})
	}
	if value, ok := nursu.mutation.AutoGenerateInvitationCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: newuserrewardsetting.FieldAutoGenerateInvitationCode,
		})
	}
	if value, ok := nursu.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: newuserrewardsetting.FieldCreateAt,
		})
	}
	if value, ok := nursu.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: newuserrewardsetting.FieldCreateAt,
		})
	}
	if value, ok := nursu.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: newuserrewardsetting.FieldUpdateAt,
		})
	}
	if value, ok := nursu.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: newuserrewardsetting.FieldUpdateAt,
		})
	}
	if value, ok := nursu.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: newuserrewardsetting.FieldDeleteAt,
		})
	}
	if value, ok := nursu.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: newuserrewardsetting.FieldDeleteAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, nursu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{newuserrewardsetting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// NewUserRewardSettingUpdateOne is the builder for updating a single NewUserRewardSetting entity.
type NewUserRewardSettingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NewUserRewardSettingMutation
}

// SetAppID sets the "app_id" field.
func (nursuo *NewUserRewardSettingUpdateOne) SetAppID(u uuid.UUID) *NewUserRewardSettingUpdateOne {
	nursuo.mutation.SetAppID(u)
	return nursuo
}

// SetRegistrationCouponID sets the "registration_coupon_id" field.
func (nursuo *NewUserRewardSettingUpdateOne) SetRegistrationCouponID(u uuid.UUID) *NewUserRewardSettingUpdateOne {
	nursuo.mutation.SetRegistrationCouponID(u)
	return nursuo
}

// SetKycCouponID sets the "kyc_coupon_id" field.
func (nursuo *NewUserRewardSettingUpdateOne) SetKycCouponID(u uuid.UUID) *NewUserRewardSettingUpdateOne {
	nursuo.mutation.SetKycCouponID(u)
	return nursuo
}

// SetAutoGenerateInvitationCode sets the "auto_generate_invitation_code" field.
func (nursuo *NewUserRewardSettingUpdateOne) SetAutoGenerateInvitationCode(b bool) *NewUserRewardSettingUpdateOne {
	nursuo.mutation.SetAutoGenerateInvitationCode(b)
	return nursuo
}

// SetNillableAutoGenerateInvitationCode sets the "auto_generate_invitation_code" field if the given value is not nil.
func (nursuo *NewUserRewardSettingUpdateOne) SetNillableAutoGenerateInvitationCode(b *bool) *NewUserRewardSettingUpdateOne {
	if b != nil {
		nursuo.SetAutoGenerateInvitationCode(*b)
	}
	return nursuo
}

// SetCreateAt sets the "create_at" field.
func (nursuo *NewUserRewardSettingUpdateOne) SetCreateAt(u uint32) *NewUserRewardSettingUpdateOne {
	nursuo.mutation.ResetCreateAt()
	nursuo.mutation.SetCreateAt(u)
	return nursuo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (nursuo *NewUserRewardSettingUpdateOne) SetNillableCreateAt(u *uint32) *NewUserRewardSettingUpdateOne {
	if u != nil {
		nursuo.SetCreateAt(*u)
	}
	return nursuo
}

// AddCreateAt adds u to the "create_at" field.
func (nursuo *NewUserRewardSettingUpdateOne) AddCreateAt(u int32) *NewUserRewardSettingUpdateOne {
	nursuo.mutation.AddCreateAt(u)
	return nursuo
}

// SetUpdateAt sets the "update_at" field.
func (nursuo *NewUserRewardSettingUpdateOne) SetUpdateAt(u uint32) *NewUserRewardSettingUpdateOne {
	nursuo.mutation.ResetUpdateAt()
	nursuo.mutation.SetUpdateAt(u)
	return nursuo
}

// AddUpdateAt adds u to the "update_at" field.
func (nursuo *NewUserRewardSettingUpdateOne) AddUpdateAt(u int32) *NewUserRewardSettingUpdateOne {
	nursuo.mutation.AddUpdateAt(u)
	return nursuo
}

// SetDeleteAt sets the "delete_at" field.
func (nursuo *NewUserRewardSettingUpdateOne) SetDeleteAt(u uint32) *NewUserRewardSettingUpdateOne {
	nursuo.mutation.ResetDeleteAt()
	nursuo.mutation.SetDeleteAt(u)
	return nursuo
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (nursuo *NewUserRewardSettingUpdateOne) SetNillableDeleteAt(u *uint32) *NewUserRewardSettingUpdateOne {
	if u != nil {
		nursuo.SetDeleteAt(*u)
	}
	return nursuo
}

// AddDeleteAt adds u to the "delete_at" field.
func (nursuo *NewUserRewardSettingUpdateOne) AddDeleteAt(u int32) *NewUserRewardSettingUpdateOne {
	nursuo.mutation.AddDeleteAt(u)
	return nursuo
}

// Mutation returns the NewUserRewardSettingMutation object of the builder.
func (nursuo *NewUserRewardSettingUpdateOne) Mutation() *NewUserRewardSettingMutation {
	return nursuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nursuo *NewUserRewardSettingUpdateOne) Select(field string, fields ...string) *NewUserRewardSettingUpdateOne {
	nursuo.fields = append([]string{field}, fields...)
	return nursuo
}

// Save executes the query and returns the updated NewUserRewardSetting entity.
func (nursuo *NewUserRewardSettingUpdateOne) Save(ctx context.Context) (*NewUserRewardSetting, error) {
	var (
		err  error
		node *NewUserRewardSetting
	)
	nursuo.defaults()
	if len(nursuo.hooks) == 0 {
		node, err = nursuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NewUserRewardSettingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			nursuo.mutation = mutation
			node, err = nursuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(nursuo.hooks) - 1; i >= 0; i-- {
			if nursuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = nursuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, nursuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (nursuo *NewUserRewardSettingUpdateOne) SaveX(ctx context.Context) *NewUserRewardSetting {
	node, err := nursuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nursuo *NewUserRewardSettingUpdateOne) Exec(ctx context.Context) error {
	_, err := nursuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nursuo *NewUserRewardSettingUpdateOne) ExecX(ctx context.Context) {
	if err := nursuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nursuo *NewUserRewardSettingUpdateOne) defaults() {
	if _, ok := nursuo.mutation.UpdateAt(); !ok {
		v := newuserrewardsetting.UpdateDefaultUpdateAt()
		nursuo.mutation.SetUpdateAt(v)
	}
}

func (nursuo *NewUserRewardSettingUpdateOne) sqlSave(ctx context.Context) (_node *NewUserRewardSetting, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   newuserrewardsetting.Table,
			Columns: newuserrewardsetting.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: newuserrewardsetting.FieldID,
			},
		},
	}
	id, ok := nursuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "NewUserRewardSetting.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := nursuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, newuserrewardsetting.FieldID)
		for _, f := range fields {
			if !newuserrewardsetting.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != newuserrewardsetting.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nursuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nursuo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: newuserrewardsetting.FieldAppID,
		})
	}
	if value, ok := nursuo.mutation.RegistrationCouponID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: newuserrewardsetting.FieldRegistrationCouponID,
		})
	}
	if value, ok := nursuo.mutation.KycCouponID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: newuserrewardsetting.FieldKycCouponID,
		})
	}
	if value, ok := nursuo.mutation.AutoGenerateInvitationCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: newuserrewardsetting.FieldAutoGenerateInvitationCode,
		})
	}
	if value, ok := nursuo.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: newuserrewardsetting.FieldCreateAt,
		})
	}
	if value, ok := nursuo.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: newuserrewardsetting.FieldCreateAt,
		})
	}
	if value, ok := nursuo.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: newuserrewardsetting.FieldUpdateAt,
		})
	}
	if value, ok := nursuo.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: newuserrewardsetting.FieldUpdateAt,
		})
	}
	if value, ok := nursuo.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: newuserrewardsetting.FieldDeleteAt,
		})
	}
	if value, ok := nursuo.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: newuserrewardsetting.FieldDeleteAt,
		})
	}
	_node = &NewUserRewardSetting{config: nursuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nursuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{newuserrewardsetting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
