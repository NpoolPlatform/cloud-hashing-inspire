// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/cloud-hashing-inspire/pkg/db/ent/appuserpurchaseamountsetting"
	"github.com/google/uuid"
)

// AppUserPurchaseAmountSetting is the model entity for the AppUserPurchaseAmountSetting schema.
type AppUserPurchaseAmountSetting struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID uuid.UUID `json:"app_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// BadgeLarge holds the value of the "badge_large" field.
	BadgeLarge string `json:"badge_large,omitempty"`
	// BadgeSmall holds the value of the "badge_small" field.
	BadgeSmall string `json:"badge_small,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount uint64 `json:"amount,omitempty"`
	// Percent holds the value of the "percent" field.
	Percent uint32 `json:"percent,omitempty"`
	// CreateAt holds the value of the "create_at" field.
	CreateAt uint32 `json:"create_at,omitempty"`
	// UpdateAt holds the value of the "update_at" field.
	UpdateAt uint32 `json:"update_at,omitempty"`
	// DeleteAt holds the value of the "delete_at" field.
	DeleteAt uint32 `json:"delete_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AppUserPurchaseAmountSetting) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case appuserpurchaseamountsetting.FieldAmount, appuserpurchaseamountsetting.FieldPercent, appuserpurchaseamountsetting.FieldCreateAt, appuserpurchaseamountsetting.FieldUpdateAt, appuserpurchaseamountsetting.FieldDeleteAt:
			values[i] = new(sql.NullInt64)
		case appuserpurchaseamountsetting.FieldTitle, appuserpurchaseamountsetting.FieldBadgeLarge, appuserpurchaseamountsetting.FieldBadgeSmall:
			values[i] = new(sql.NullString)
		case appuserpurchaseamountsetting.FieldID, appuserpurchaseamountsetting.FieldAppID, appuserpurchaseamountsetting.FieldUserID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AppUserPurchaseAmountSetting", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AppUserPurchaseAmountSetting fields.
func (aupas *AppUserPurchaseAmountSetting) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case appuserpurchaseamountsetting.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				aupas.ID = *value
			}
		case appuserpurchaseamountsetting.FieldAppID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value != nil {
				aupas.AppID = *value
			}
		case appuserpurchaseamountsetting.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				aupas.UserID = *value
			}
		case appuserpurchaseamountsetting.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				aupas.Title = value.String
			}
		case appuserpurchaseamountsetting.FieldBadgeLarge:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field badge_large", values[i])
			} else if value.Valid {
				aupas.BadgeLarge = value.String
			}
		case appuserpurchaseamountsetting.FieldBadgeSmall:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field badge_small", values[i])
			} else if value.Valid {
				aupas.BadgeSmall = value.String
			}
		case appuserpurchaseamountsetting.FieldAmount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				aupas.Amount = uint64(value.Int64)
			}
		case appuserpurchaseamountsetting.FieldPercent:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field percent", values[i])
			} else if value.Valid {
				aupas.Percent = uint32(value.Int64)
			}
		case appuserpurchaseamountsetting.FieldCreateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				aupas.CreateAt = uint32(value.Int64)
			}
		case appuserpurchaseamountsetting.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				aupas.UpdateAt = uint32(value.Int64)
			}
		case appuserpurchaseamountsetting.FieldDeleteAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete_at", values[i])
			} else if value.Valid {
				aupas.DeleteAt = uint32(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this AppUserPurchaseAmountSetting.
// Note that you need to call AppUserPurchaseAmountSetting.Unwrap() before calling this method if this AppUserPurchaseAmountSetting
// was returned from a transaction, and the transaction was committed or rolled back.
func (aupas *AppUserPurchaseAmountSetting) Update() *AppUserPurchaseAmountSettingUpdateOne {
	return (&AppUserPurchaseAmountSettingClient{config: aupas.config}).UpdateOne(aupas)
}

// Unwrap unwraps the AppUserPurchaseAmountSetting entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (aupas *AppUserPurchaseAmountSetting) Unwrap() *AppUserPurchaseAmountSetting {
	tx, ok := aupas.config.driver.(*txDriver)
	if !ok {
		panic("ent: AppUserPurchaseAmountSetting is not a transactional entity")
	}
	aupas.config.driver = tx.drv
	return aupas
}

// String implements the fmt.Stringer.
func (aupas *AppUserPurchaseAmountSetting) String() string {
	var builder strings.Builder
	builder.WriteString("AppUserPurchaseAmountSetting(")
	builder.WriteString(fmt.Sprintf("id=%v", aupas.ID))
	builder.WriteString(", app_id=")
	builder.WriteString(fmt.Sprintf("%v", aupas.AppID))
	builder.WriteString(", user_id=")
	builder.WriteString(fmt.Sprintf("%v", aupas.UserID))
	builder.WriteString(", title=")
	builder.WriteString(aupas.Title)
	builder.WriteString(", badge_large=")
	builder.WriteString(aupas.BadgeLarge)
	builder.WriteString(", badge_small=")
	builder.WriteString(aupas.BadgeSmall)
	builder.WriteString(", amount=")
	builder.WriteString(fmt.Sprintf("%v", aupas.Amount))
	builder.WriteString(", percent=")
	builder.WriteString(fmt.Sprintf("%v", aupas.Percent))
	builder.WriteString(", create_at=")
	builder.WriteString(fmt.Sprintf("%v", aupas.CreateAt))
	builder.WriteString(", update_at=")
	builder.WriteString(fmt.Sprintf("%v", aupas.UpdateAt))
	builder.WriteString(", delete_at=")
	builder.WriteString(fmt.Sprintf("%v", aupas.DeleteAt))
	builder.WriteByte(')')
	return builder.String()
}

// AppUserPurchaseAmountSettings is a parsable slice of AppUserPurchaseAmountSetting.
type AppUserPurchaseAmountSettings []*AppUserPurchaseAmountSetting

func (aupas AppUserPurchaseAmountSettings) config(cfg config) {
	for _i := range aupas {
		aupas[_i].config = cfg
	}
}
